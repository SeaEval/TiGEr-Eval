<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Real Python</title>
  <link href="https://realpython.com/atom.xml" rel="self"/>
  <link href="https://realpython.com/"/>
  <updated>2018-09-19T14:00:00+00:00</updated>
  <id>https://realpython.com/</id>
  <author>
    <name>Real Python</name>
  </author>

  
    <entry>
      <title>Absolute vs Relative Imports in Python</title>
      <id>https://realpython.com/absolute-vs-relative-python-imports/</id>
      <link href="https://realpython.com/absolute-vs-relative-python-imports/"/>
      <updated>2018-09-19T14:00:00+00:00</updated>
      <summary>If you’ve worked on a Python project that has more than one file, chances are you’ve had to use an import statement before. In this tutorial, you’ll not only cover the pros and cons of absolute and relative imports but also learn about the best practices for writing import statements.</summary>
      <content type="html">
        &lt;p&gt;If you&amp;rsquo;ve worked on a Python project that has more than one file, chances are you&amp;rsquo;ve had to use an import statement before.&lt;/p&gt;
&lt;p&gt;Even for Pythonistas with a couple of projects under their belt, imports can be confusing! You&amp;rsquo;re probably reading this because you&amp;rsquo;d like to gain a deeper understanding of imports in Python, particularly absolute and relative imports.&lt;/p&gt;
&lt;p&gt;In this tutorial, you&amp;rsquo;ll learn the differences between the two, as well as their pros and cons. Let&amp;rsquo;s dive right in!&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;&quot; class=&quot;alert-link&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-python-mastery-course&quot; data-focus=&quot;false&quot;&gt;5 Thoughts On Python Mastery&lt;/a&gt;, a free course for Python developers that shows you the roadmap and the mindset you&#39;ll need to take your Python skills to the next level.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-quick-recap-on-imports&quot;&gt;A Quick Recap on Imports&lt;/h2&gt;
&lt;p&gt;You need to have a good understanding of &lt;a href=&quot;https://realpython.com/python-modules-packages/&quot;&gt;Python modules and packages&lt;/a&gt; to know how imports work. A Python module is a file that has a &lt;code&gt;.py&lt;/code&gt; extension, and a Python package is any folder that has modules inside it (or, in Python 2, a folder that contains an &lt;code&gt;__init__.py&lt;/code&gt; file).&lt;/p&gt;
&lt;p&gt;What happens when you have code in one module that needs to access code in another module or package? You import it!&lt;/p&gt;
&lt;h3 id=&quot;how-imports-work&quot;&gt;How Imports Work&lt;/h3&gt;
&lt;p&gt;But how exactly do imports work? Let&amp;rsquo;s say you import a module &lt;code&gt;abc&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first thing Python will do is look up the name &lt;code&gt;abc&lt;/code&gt; in &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;. This is a cache of all modules that have been previously imported.&lt;/p&gt;
&lt;p&gt;If the name isn&amp;rsquo;t found in the module cache, Python will proceed to search through a list of built-in modules. These are modules that come pre-installed with Python and can be found in the &lt;a href=&quot;https://docs.python.org/3/library/&quot;&gt;Python Standard Library&lt;/a&gt;. If the name still isn&amp;rsquo;t found in the built-in modules, Python then searches for it in a list of directories defined by &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt;. This list usually includes the current directory, which is searched first.&lt;/p&gt;
&lt;p&gt;When Python finds the module, it binds it to a name in the local scope. This means that &lt;code&gt;abc&lt;/code&gt; is now defined and can be used in the current file without throwing a &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the name is never found, you&amp;rsquo;ll get a &lt;code&gt;ModuleNotFoundError&lt;/code&gt;. You can find out more about imports in the Python documentation &lt;a href=&quot;https://docs.python.org/3/reference/import.html&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note: Security Concerns&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Be aware that Python&amp;rsquo;s import system presents some significant security risks. This is largely due to its flexibility. For example, the module cache is writable, and it is possible to override core Python functionality using the import system. Importing from third-party packages can also expose your application to security threats.&lt;/p&gt;
&lt;p&gt;Here are a couple of interesting resources to learn more about these security concerns and how to mitigate them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hackernoon.com/10-common-security-gotchas-in-python-and-how-to-avoid-them-e19fbe265e03&quot;&gt;10 common security gotchas in Python and how to avoid them&lt;/a&gt; by Anthony Shaw (Point 5 talks about Python&amp;rsquo;s import system.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://talkpython.fm/episodes/show/168/10-python-security-holes-and-how-to-plug-them&quot;&gt;Episode #168: 10 Python security holes and how to plug them&lt;/a&gt; from the TalkPython podcast (The panelists begin talking about imports at around the 27:15 mark.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&quot;syntax-of-import-statements&quot;&gt;Syntax of Import Statements&lt;/h3&gt;
&lt;p&gt;Now that you know how import statements work, let&amp;rsquo;s explore their syntax. You can import both packages and modules. (Note that importing a package essentially imports the package&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt; file as a module.) You can also import specific objects from a package or module.&lt;/p&gt;
&lt;p&gt;There are generally two types of import syntax. When you use the first one, you import the resource directly, like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;abc&lt;/code&gt; can be a package or a module.&lt;/p&gt;
&lt;p&gt;When you use the second syntax, you import the resource from another package or module. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;xyz&lt;/code&gt; can be a module, subpackage, or object, such as a class or function.&lt;/p&gt;
&lt;p&gt;You can also choose to rename an imported resource, like so:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;other_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This renames the imported resource &lt;code&gt;abc&lt;/code&gt; to &lt;code&gt;other_name&lt;/code&gt; within the script. It must now be referenced as &lt;code&gt;other_name&lt;/code&gt;, or it will not be recognized.&lt;/p&gt;
&lt;h3 id=&quot;styling-of-import-statements&quot;&gt;Styling of Import Statements&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://pep8.org/#imports&quot;&gt;PEP 8&lt;/a&gt;, the official &lt;a href=&quot;https://realpython.com/python-code-quality/&quot;&gt;style guide for Python&lt;/a&gt;, has a few pointers when it comes to writing import statements. Here&amp;rsquo;s a summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Imports should always be written at the top of the file, after any module comments and docstrings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imports should be divided according to what is being imported. There are generally three groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard library imports (Python&amp;rsquo;s built-in modules)&lt;/li&gt;
&lt;li&gt;related third party imports (modules that are installed and do not belong to the current application)&lt;/li&gt;
&lt;li&gt;local application imports (modules that belong to the current application)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each group of imports should be separated by a blank space.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;rsquo;s also a good idea to order your imports alphabetically within each import group. This makes finding particular imports much easier, especially when there are many imports in a file.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of how to style import statements:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Illustration of good import statement styling.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;Note that the imports come after the docstring.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Standard library imports&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Third party imports&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask_restful&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLAlchemy&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Local application imports&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;local_module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_class&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;local_package&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The import statements above are divided into three distinct groups, separated by a blank space. They are also ordered alphabetically within each group.&lt;/p&gt;
&lt;h2 id=&quot;absolute-imports&quot;&gt;Absolute Imports&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ve gotten up to speed on how to write import statements and how to style them like a pro. Now it&amp;rsquo;s time to learn a little more about absolute imports.&lt;/p&gt;
&lt;p&gt;An absolute import specifies the resource to be imported using its full path from the project&amp;rsquo;s root folder.&lt;/p&gt;
&lt;h3 id=&quot;syntax-and-practical-examples&quot;&gt;Syntax and Practical Examples&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s say you have the following directory structure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;└── project
    ├── package1
    │   ├── module1.py
    │   └── module2.py
    └── package2
        ├── __init__.py
        ├── module3.py
        ├── module4.py
        └── subpackage1
            └── module5.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s a directory, &lt;code&gt;project&lt;/code&gt;, which contains two sub-directories, &lt;code&gt;package1&lt;/code&gt; and &lt;code&gt;package2&lt;/code&gt;. The &lt;code&gt;package1&lt;/code&gt; directory has two files, &lt;code&gt;module1.py&lt;/code&gt; and &lt;code&gt;module2.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;package2&lt;/code&gt; directory has three files: two modules, &lt;code&gt;module3.py&lt;/code&gt; and &lt;code&gt;module4.py&lt;/code&gt;, and an initialization file, &lt;code&gt;__init__.py&lt;/code&gt;. It also contains a directory, &lt;code&gt;subpackage&lt;/code&gt;, which in turn contains a file, &lt;code&gt;module5.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package1/module2.py&lt;/code&gt; contains a function, &lt;code&gt;function1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package2/__init__.py&lt;/code&gt; contains a class, &lt;code&gt;class1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package2/subpackage1/module5.py&lt;/code&gt; contains a function, &lt;code&gt;function2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following are practical examples of absolute imports:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;package1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module1&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;package1.module2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function1&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;package2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class1&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;package2.subpackage1.module5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that you must give a detailed path for each package or file, from the top-level package folder. This is somewhat similar to its file path, but we use a dot (&lt;code&gt;.&lt;/code&gt;) instead of a slash (&lt;code&gt;/&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;pros-and-cons-of-absolute-imports&quot;&gt;Pros and Cons of Absolute Imports&lt;/h3&gt;
&lt;p&gt;Absolute imports are preferred because they are quite clear and straightforward. It is easy to tell exactly where the imported resource is, just by looking at the statement. Additionally, absolute imports remain valid even if the current location of the import statement changes. In fact, PEP 8 explicitly recommends absolute imports.&lt;/p&gt;
&lt;p&gt;Sometimes, however, absolute imports can get quite verbose, depending on the complexity of the directory structure. Imagine having a statement like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;package1.subpackage2.subpackage3.subpackage4.module5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s ridiculous, right? Luckily, relative imports are a good alternative in such cases!&lt;/p&gt;
&lt;h2 id=&quot;relative-imports&quot;&gt;Relative Imports&lt;/h2&gt;
&lt;p&gt;A relative import specifies the resource to be imported relative to the current location&amp;mdash;that is, the location where the import statement is. There are two types of relative imports: implicit and explicit. Implicit relative imports have been deprecated in Python 3, so I won&amp;rsquo;t be covering them here.&lt;/p&gt;
&lt;h3 id=&quot;syntax-and-practical-examples_1&quot;&gt;Syntax and Practical Examples&lt;/h3&gt;
&lt;p&gt;The syntax of a relative import depends on the current location as well as the location of the module, package, or object to be imported. Here are a few examples of relative imports:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.some_module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_class&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;..some_package&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_function&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that there is at least one dot in each import statement above. Relative imports make use of dot notation to specify location.&lt;/p&gt;
&lt;p&gt;A single dot means that the module or package referenced is in the same directory as the current location. Two dots mean that it is in the parent directory of the current location&amp;mdash;that is, the directory above. Three dots mean that it is in the grandparent directory, and so on. This will probably be familiar to you if you use a Unix-like operating system!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume you have the same directory structure as before:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;└── project
    ├── package1
    │   ├── module1.py
    │   └── module2.py
    └── package2
        ├── __init__.py
        ├── module3.py
        ├── module4.py
        └── subpackage1
            └── module5.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recall the file contents:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package1/module2.py&lt;/code&gt; contains a function, &lt;code&gt;function1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package2/__init__.py&lt;/code&gt; contains a class, &lt;code&gt;class1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package2/subpackage1/module5.py&lt;/code&gt; contains a function, &lt;code&gt;function2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can import &lt;code&gt;function1&lt;/code&gt; into the &lt;code&gt;package1/module1.py&lt;/code&gt; file this way:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# package1/module1.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.module2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;d use only one dot here because &lt;code&gt;module2.py&lt;/code&gt; is in the same directory as the current module, which is &lt;code&gt;module1.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can import &lt;code&gt;class1&lt;/code&gt; and &lt;code&gt;function2&lt;/code&gt; into the &lt;code&gt;package2/module3.py&lt;/code&gt; file this way:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# package2/module3.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class1&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.subpackage1.module5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the first import statement,  the single dot means that you are importing &lt;code&gt;class1&lt;/code&gt; from the current package. Remember that importing a package essentially imports the package&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt; file as a module.&lt;/p&gt;
&lt;p&gt;In the second import statement, you&amp;rsquo;d use a single dot again because &lt;code&gt;subpackage1&lt;/code&gt; is in the same directory as the current module, which is &lt;code&gt;module3.py&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pros-and-cons-of-relative-imports&quot;&gt;Pros and Cons of Relative Imports&lt;/h3&gt;
&lt;p&gt;One clear advantage of relative imports is that they are quite succinct. Depending on the current location, they can turn the ridiculously long import statement you saw earlier to something as simple as this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;..subpackage4.module5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, relative imports can be messy, particularly for shared projects where directory structure is likely to change. Relative imports are also not as readable as absolute ones, and it&amp;rsquo;s not easy to tell the location of the imported resources.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Good job for making it to the end of this crash course on absolute and relative imports! Now you&amp;rsquo;re up to speed on how imports work. You&amp;rsquo;ve learned the best practices for writing import statements, and you know the difference between absolute and relative imports.&lt;/p&gt;
&lt;p&gt;With your new skills, you can confidently import packages and modules from the Python standard library, third party packages, and your own local packages. Remember that you should generally opt for absolute imports over relative ones, unless the path is complex and would make the statement too long.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Top 10 Must-Watch PyCon Talks</title>
      <id>https://realpython.com/must-watch-pycon-talks/</id>
      <link href="https://realpython.com/must-watch-pycon-talks/"/>
      <updated>2018-09-17T14:00:00+00:00</updated>
      <summary>Get the inside scoop on the top 10 must-watch PyCon talks for both beginners and advanced Python developers. There&#39;s something for everyone in this list of informative videos!</summary>
      <content type="html">
        &lt;p&gt;For the past three years, I&amp;rsquo;ve had the privilege of attending the Python Conference (PyCon) in the United States.  PyCon US is a yearly event where Pythonistas get together to talk and learn about Python. It&amp;rsquo;s a great place to learn, meet new fellow Python devs, and get some seriously cool swag.&lt;/p&gt;
&lt;p&gt;The first time I attended, I quickly realized that it was more a community event than a typical conference. There were people from all over the world, from all walks of life. There were no prejudicial biases&amp;mdash;apart from everyone knowing that Python is the best programming language out there!&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;p&gt;&lt;strong&gt;Learn More:&lt;/strong&gt; &lt;a href=&quot;&quot; class=&quot;alert-link&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-newsletter-community&quot; data-focus=&quot;false&quot;&gt;Click here to join 45,000+ Python developers on the Real Python Newsletter&lt;/a&gt; and get new Python tutorials and news that will make you a more effective Pythonista.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;At PyCon, there are so many things you can do. The United States conference is broken up into 3 major parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt; A collection of classroom-like learning sessions where experts teach in depth on a particular topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conference:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A selection of talks, ranging from 30 to 45 minutes in length, all throughout the day, submitted by members of the Python community&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keynote speakers invited by the conference organizers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A collection of 5-minute lightning talks given by any attendee who wants the spotlight (Sidenote: Docker was announced in a &lt;a href=&quot;https://www.youtube.com/watch?v=9xciauwbsuo&quot;&gt;PyCon 2014 lightning talk&lt;/a&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sprints:&lt;/strong&gt; A week-long event where members get to work on projects proposed by their peers&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you ever get the chance to attend a PyCon event, either in the United States or closer to where you live, I highly recommend it. Not only will you learn more about the Python language, but you&amp;rsquo;ll be able to meet with other amazing Python developers. Check out &lt;a href=&quot;https://www.python.org/community/workshops/&quot;&gt;Python.org&amp;rsquo;s list of conferences&lt;/a&gt; to see if there are any near you.&lt;/p&gt;
&lt;p&gt;When selecting the videos for this list, I limited myself to talks that were given at PyCon US in 2009 or later. I chose only keynote talks and talks that were 30 to 45 minutes long. I didn&amp;rsquo;t include any tutorials or lightning talks. I also tried to select videos that would stand the test of time, meaning the topics they cover will hopefully be useful for a long time for both beginners and advanced developers.&lt;/p&gt;
&lt;p&gt;Without further ado, here&amp;rsquo;s my list of the top 10 must-watch PyCon talks.&lt;/p&gt;
&lt;h2 id=&quot;10-refactoring-python-why-and-how-to-restructure-your-code&quot;&gt;#10: Refactoring Python: Why and How to Restructure Your Code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Brett Slatkin, PyCon 2016&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/haxor&quot;&gt;Brett Slatkin&lt;/a&gt; is a Google engineer and the author of &lt;em&gt;Effective Python&lt;/em&gt;. He has given many talks related to Python at both PyCon US and PyCon Montreal. In this talk, Brett takes a quick, but deep, dive into what re-factoring your code means and involves.&lt;/p&gt;
&lt;p&gt;He also explains why refactoring your code is so important that you should spend as much&amp;mdash;or even more&amp;mdash;time refactoring it than actually developing it. The concepts explored in his talk are great for not only Python developers but for all software engineers.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/D_6ybDcU5gc?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;You can find the slides to his talk &lt;a href=&quot;https://speakerdeck.com/pycon2016/brett-slatkin-refactoring-python-why-and-how-to-restructure-your-code&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;9-solve-your-problems-with-sloppy-python&quot;&gt;#9: Solve Your Problems With Sloppy Python&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Larry Hastings, PyCon 2018&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Larry Hastings is one of Python&amp;rsquo;s core developers  and has been involved in its development since almost the beginning. He has given quite a few talks on Python at various venues, but this is the one that stands out.&lt;/p&gt;
&lt;p&gt;In this talk, he explores when it&amp;rsquo;s okay to break &amp;ldquo;Pythonic&amp;rdquo; convention to quickly solve the problem at hand. I love this talk because it has got some great tips on how and when to break conventions as well as some other Python tricks. It&amp;rsquo;s a fun talk that is also informative.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/Jd8ulMb6_ls?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;8-awesome-command-line-tools&quot;&gt;#8: Awesome Command Line Tools&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Amjith Pamaujam, PyCon 2017&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/amjithr&quot;&gt;Amjith Ramanujam&lt;/a&gt; is a Traffic Engineer at Netflix and creator of PGCLI and MYCLI, amazing interactive command line tools for Postgres and MySQL. Python developers often find themselves creating scripts or programs that require running from the command line. Amjith does a great job of exploring what makes a great command line tool by going over the design decisions made while developing these tools.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/hJhZhLg3obk?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;7-discovering-python&quot;&gt;#7: Discovering Python&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;David Beazley, PyCon 2014&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/dabeaz&quot;&gt;David Beazley&lt;/a&gt; is another Python core developer with multiple books and talks for learning about Python. I own his &lt;em&gt;Python Cookbook&lt;/em&gt; and highly recommend it.&lt;/p&gt;
&lt;p&gt;This talk is a little different from the others in that it doesn&amp;rsquo;t include any Python code. It&amp;rsquo;s a memoir on how he used Python to solve what would&amp;rsquo;ve been an impossible task.  This talk really showcases the power of Python, a language that is easy to use and can be used to solve real-world problems.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/RZ4Sn-Y7AP8?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;6-big-o-how-code-slows-as-data-grows&quot;&gt;#6: Big-O: How Code Slows as Data Grows&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Ned Batchelder, PyCon 2018&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nedbat&quot;&gt;Ned Batchelder&lt;/a&gt; is the leader of the Python Boston group and has spoken at almost every PyCon since 2009! He&amp;rsquo;s a great speaker, and I highly recommend going to any of his talks if you get the chance.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve had multiple people attempt to explain what Big-O notation was and why it was important. It wasn&amp;rsquo;t until I saw Ned&amp;rsquo;s talk that I began to really grasp it.  Ned does a great job of explaining it with simple examples of what Big-O means and why we, as Python developers, need to understand it.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/duvZ-2UK0fc?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;5-hidden-treasures-in-the-standard-library&quot;&gt;#5: Hidden Treasures in the Standard Library&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Doug Hellman, PyCon 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/doughellmann&quot;&gt;Doug Hellman&lt;/a&gt; is the author of the blog &lt;em&gt;Python Module of the Week&lt;/em&gt;, which is dedicated to explaining in detail some of Python&amp;rsquo;s built-in modules. It&amp;rsquo;s a great resource, so I highly recommend that you check it out and subscribe to the feed.&lt;/p&gt;
&lt;p&gt;This talk is the oldest in this list and is therefore a little dated in that he still uses Python 2 for the examples. However, he sheds some light on libraries that are hidden treasures and shows unique ways to use them.&lt;/p&gt;
&lt;p&gt;You can view &lt;a href=&quot;https://pyvideo.org/pycon-us-2011/pycon-2011--hidden-treasures-in-the-standard-libr.html&quot;&gt;this talk over at PyVideo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;4-memory-management-in-python-the-basics&quot;&gt;#4: Memory Management in Python: The Basics&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Nina Zakharenko, PyCon 2016&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nnja&quot;&gt;Nina Zakharenko&lt;/a&gt; works for Microsoft as a Python Cloud Developer Advocate, which sounds awesome! In this PyCon 2016 talk, she explores the details of memory management within Python.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s common for newer Python developers to not think or care about memory management since it is handled somewhat &amp;ldquo;automagically.&amp;rdquo; But it can actually be crucial to know the basics of what is happening behind the scenes so you can learn how to write more efficient code.  Nina provides us with a great start to learning these concepts.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/WiQqqB9MlkA?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;3-all-your-ducks-in-a-row-data-structures-in-the-standard-library-and-beyond&quot;&gt;#3: All Your Ducks in a Row: Data Structures in the Standard Library and Beyond&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Brandon Rhodes, PyCon 2014&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/brandon_rhodes&quot;&gt;Brandon Rhodes&lt;/a&gt; is a Python developer at Dropbox and was the chair at PyCon 2016&amp;ndash;2017. Whenever you want to know how data structures work, or what they do efficiently, this is the talk to view. I have it bookmarked to refer to whenever I wonder which one I should use.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/fYlnfvKVDoM?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2-beyond-pep-8-best-practices-for-beautiful-intelligible-code&quot;&gt;#2: Beyond PEP 8: Best Practices for Beautiful Intelligible Code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Raymond Hettinger, PyCon 2015&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I really could change this to &amp;ldquo;Raymond Hettinger &amp;mdash; Any of his talks&amp;rdquo; as Raymond has a vast repertoire of great talks. But this one about going beyond PEP 8 is probably the one that is most famous and referenced most often. &lt;/p&gt;
&lt;p&gt;Often, as Pythonistas, we get caught up in the strict rules of PEP 8 and deem anything that deviates from it to be &amp;ldquo;un-Pythonic.&amp;rdquo; Raymond instead delves into the spirit of PEP 8 and explores when it&amp;rsquo;s good to be strict about it and when it&amp;rsquo;s not.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/wf-BqAjZb8M?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;1-pycon-2016-keynote&quot;&gt;#1: PyCon 2016 Keynote&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;K. Lars Lohn, PyCon 2016&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A hippie biker plays the oboe and teaches life lessons using computer algorithms.&lt;/p&gt;
&lt;p&gt;In case that hasn&amp;rsquo;t catch your attention, he also  received a standing ovation at the end of his talk, which I haven&amp;rsquo;t seen happen since. I had the pleasure of personally attending this talk, which is the epitome of what the Python community is all about: unity, inclusion, and the love of solving complex problems. When I first started putting together this list, this talk immediately came to mind as the one that should be #1.&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9 mb-3&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/bSfe5M_zG2s?autoplay=0&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https://realpython.com&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;There it is, my curated list of the must-watch PyCon videos. Comment below with your favorite talks from PyCon US or other PyCons from around the world. Happy Pythoning!&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Logging in Python</title>
      <id>https://realpython.com/python-logging/</id>
      <link href="https://realpython.com/python-logging/"/>
      <updated>2018-09-12T14:00:00+00:00</updated>
      <summary>Learn why and how to get started with Python&#39;s powerful logging module to meet the needs of beginners and enterprise teams alike.</summary>
      <content type="html">
        &lt;p&gt;Logging is a very useful tool in a programmer&amp;rsquo;s toolbox. It can help you develop a better understanding of the flow of a program and discover scenarios that you might not even have thought of while developing.&lt;/p&gt;
&lt;p&gt;Logs provide developers with an extra set of eyes that are constantly looking at the flow that an application is going through. They can store information, like which user or IP accessed the application. If an error occurs, then they can provide more insights than a stack trace by telling you what the state of the program was before it arrived at the line of code where the error occurred.&lt;/p&gt;
&lt;p&gt;By logging useful data from the right places, you can not only debug errors easily but also use the data to analyze the performance of the application to plan for scaling or look at usage patterns to plan for marketing.&lt;/p&gt;
&lt;p&gt;Python provides a logging system as a part of its standard library, so you can quickly add logging to your application. In this article, you will learn why using this module is the best way to add logging to your application as well as how to get started quickly, and you will get an introduction to some of the advanced features available.&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;&quot; class=&quot;alert-link&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-python-mastery-course&quot; data-focus=&quot;false&quot;&gt;5 Thoughts On Python Mastery&lt;/a&gt;, a free course for Python developers that shows you the roadmap and the mindset you&#39;ll need to take your Python skills to the next level.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-logging-module&quot;&gt;The Logging Module&lt;/h2&gt;
&lt;p&gt;The logging module in Python is a ready-to-use and powerful module that is designed to meet the needs of beginners as well as enterprise teams. It is used by most of the third-party Python libraries, so you can integrate your log messages with the ones from those libraries to produce a homogeneous log for your application.&lt;/p&gt;
&lt;p&gt;Adding logging to your Python program is as easy as this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the logging module imported, you can use something called a &amp;ldquo;logger&amp;rdquo; to log messages that you want to see. By default, there are 5 standard levels indicating the severity of events. Each has a corresponding method that can be used to log events at that level of severity. The defined levels, in order of increasing severity, are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DEBUG&lt;/li&gt;
&lt;li&gt;INFO&lt;/li&gt;
&lt;li&gt;WARNING&lt;/li&gt;
&lt;li&gt;ERROR&lt;/li&gt;
&lt;li&gt;CRITICAL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The logging module provides you with a default logger that allows you to get started without needing to do much configuration. The corresponding methods for each level can be called as shown in the following example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a debug message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is an info message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a warning message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is an error message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a critical message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of the above program would look like this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;WARNING:root:This is a warning message&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ERROR:root:This is an error message&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;CRITICAL:root:This is a critical message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output shows the severity level before each message along with &lt;code&gt;root&lt;/code&gt;, which is the name the logging module gives to its default logger. (Loggers are discussed in detail in later sections.) This format, which shows the level, name, and message separated by a colon (&lt;code&gt;:&lt;/code&gt;), is the default output format that can be configured to include things like timestamp, line number, and other details.&lt;/p&gt;
&lt;p&gt;Notice that the &lt;code&gt;debug()&lt;/code&gt; and &lt;code&gt;info()&lt;/code&gt; messages didn&amp;rsquo;t get logged. This is because, by default, the logging module logs the messages with a severity level of &lt;code&gt;WARNING&lt;/code&gt; or above. You can change that by configuring the logging module to log events of all levels if you want. You can also define your own severity levels by changing configurations, but it is generally not recommended as it can cause confusion with logs of some third-party libraries that you might be using.&lt;/p&gt;
&lt;h2 id=&quot;basic-configurations&quot;&gt;Basic Configurations&lt;/h2&gt;
&lt;p&gt;You can use the &lt;code&gt;basicConfig(**&lt;/code&gt;&lt;em&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;/em&gt;&lt;code&gt;)&lt;/code&gt; method to configure the logging:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;You will notice that the logging module breaks PEP8 styleguide and uses &lt;code&gt;camelCase&lt;/code&gt; naming conventions. This is because it was adopted from Log4j, a logging utility in Java. It is a known issue in the package but by the time it was decided to add it to the standard library, it had already been adopted by users and changing it to meet PEP8 requirements would cause backwards compatibility issues.&amp;rdquo; &lt;a href=&quot;https://wiki.python.org/moin/LoggingPackage&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some of the commonly used parameters for &lt;code&gt;basicConfig()&lt;/code&gt; are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt;: The root logger will be set to the specified severity level.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: This specifies the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filemode&lt;/code&gt;: If &lt;code&gt;filename&lt;/code&gt; is given, the file is opened in this mode. The default is &lt;code&gt;a&lt;/code&gt;, which means append.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt;: This is the format of the log message.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By using the &lt;code&gt;level&lt;/code&gt; parameter, you can set what level of log messages you want to record. This can be done by passing one of the constants available in the class, and this would enable all logging calls at or above that level to be logged. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This will get logged&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;DEBUG:root:This will get logged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All events at or above &lt;code&gt;DEBUG&lt;/code&gt; level will now get logged.&lt;/p&gt;
&lt;p&gt;Similarly, for logging to a file rather than the console, &lt;code&gt;filename&lt;/code&gt; and &lt;code&gt;filemode&lt;/code&gt; can be used, and you can decide the format of the message using &lt;code&gt;format&lt;/code&gt;. The following example shows the usage of all three:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.log&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filemode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(name)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This will get logged to a file&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;root - ERROR - This will get logged to a file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The message will look like this but will be written to a file named &lt;code&gt;app.log&lt;/code&gt; instead of the console. The filemode is set to &lt;code&gt;w&lt;/code&gt;, which means the log file is opened in &amp;ldquo;write mode&amp;rdquo; each time &lt;code&gt;basicConfig()&lt;/code&gt; is called, and each run of the program will rewrite the file. The default configuration for filemode is &lt;code&gt;a&lt;/code&gt;, which is append.&lt;/p&gt;
&lt;p&gt;You can customize the root logger even further by using more parameters for &lt;code&gt;basicConfig()&lt;/code&gt;, which can be found &lt;a href=&quot;https://docs.python.org/3/library/logging.html#logging.basicConfig&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should be noted that calling &lt;code&gt;basicConfig()&lt;/code&gt; to configure the root logger works only if the root logger has not been configured before. &lt;strong&gt;Basically, this function can only be called once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;debug()&lt;/code&gt;, &lt;code&gt;info()&lt;/code&gt;, &lt;code&gt;warning()&lt;/code&gt;, &lt;code&gt;error()&lt;/code&gt;, and &lt;code&gt;critical()&lt;/code&gt; also call &lt;code&gt;basicConfig()&lt;/code&gt; without arguments automatically if it has not been called before. This means that after the first time one of the above functions is called, you can no longer configure the root logger because they would have called the &lt;code&gt;basicConfig()&lt;/code&gt; function internally.&lt;/p&gt;
&lt;p&gt;The default setting in &lt;code&gt;basicConfig()&lt;/code&gt; is to set the logger to write to the console in the following format:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;ERROR:root:This is an error message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;formatting-the-output&quot;&gt;Formatting the Output&lt;/h2&gt;
&lt;p&gt;While you can pass any variable that can be represented as a string from your program as a message to your logs, there are some basic elements that are already a part of the &lt;code&gt;LogRecord&lt;/code&gt; and can be easily added to the output format. If you want to log the process ID along with the level and message, you can do something like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(process)d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a Warning&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;18472-WARNING-This is a Warning&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;format&lt;/code&gt; can take a string with &lt;code&gt;LogRecord&lt;/code&gt; attributes in any arrangement you like. The entire list of available attributes can be found &lt;a href=&quot;https://docs.python.org/3/library/logging.html#logrecord-attributes&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another example where you can add the date and time info:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Admin logged in&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;2018-07-11 20:12:06,288 - Admin logged in&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;%(asctime)s&lt;/code&gt; adds the time of creation of the &lt;code&gt;LogRecord&lt;/code&gt;. The format can be changed using the &lt;code&gt;datefmt&lt;/code&gt; attribute, which uses the same formatting language as the formatting functions in the datetime module, such as &lt;code&gt;time.strftime()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datefmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-%b-%y %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Admin logged out&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;12-Jul-18 20:53:19 - Admin logged out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can find the guide &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;logging-variable-data&quot;&gt;Logging Variable Data&lt;/h3&gt;
&lt;p&gt;In most cases, you would want to include dynamic information from your application in the logs. You have seen that the logging methods take a string as an argument, and it might seem natural to format a string with variable data in a separate line and pass it to the log method. But this can actually be done directly by using a format string for the message and appending the variable data as arguments. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; raised an error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;ERROR:root:John raised an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The arguments passed to the method would be included as variable data in the message.&lt;/p&gt;
&lt;p&gt;While you can use any formatting style, the &lt;a href=&quot;https://realpython.com/python-f-strings/&quot;&gt;f-strings&lt;/a&gt; introduced in Python 3.6 are an awesome way to format strings as they can help keep the formatting short and easy to read:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; raised an error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;ERROR:root:John raised an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;capturing-stack-traces&quot;&gt;Capturing Stack Traces&lt;/h3&gt;
&lt;p&gt;The logging module also allows you to capture the full stack traces in an application. Exception information can be captured if the  &lt;code&gt;exc_info&lt;/code&gt; parameter is passed as &lt;code&gt;True&lt;/code&gt;, and the logging functions are called like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Exception occurred&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;ERROR:root:Exception occurred&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  File &amp;quot;exceptions.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    c = a / b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ZeroDivisionError: division by zero&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[Finished in 0.2s]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code&gt;exc_info&lt;/code&gt; is not set to &lt;code&gt;True&lt;/code&gt;, the output of the above program would not tell us anything about the exception, which, in a real-world scenario, might not be as simple as a &lt;code&gt;ZeroDivisionError&lt;/code&gt;. Imagine trying to debug an error in a complicated codebase with a log that shows only this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;ERROR:root:Exception occurred&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a quick tip: if you&amp;rsquo;re logging from an exception handler, use the &lt;code&gt;logging.exception()&lt;/code&gt; method, which logs a message with level &lt;code&gt;ERROR&lt;/code&gt; and adds exception information to the message. To put it more simply, calling &lt;code&gt;logging.exception()&lt;/code&gt; is like calling &lt;code&gt;logging.error(exc_info=True)&lt;/code&gt;. But since this method always dumps exception information, it should only be called from an exception handler. Take a look at this example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Exception occurred&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;ERROR:root:Exception occurred&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  File &amp;quot;exceptions.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    c = a / b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ZeroDivisionError: division by zero&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[Finished in 0.2s]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code&gt;logging.exception()&lt;/code&gt; would show a log at the level of &lt;code&gt;ERROR&lt;/code&gt;. If you don&amp;rsquo;t want that, you can call any of the other logging methods from &lt;code&gt;debug()&lt;/code&gt; to &lt;code&gt;critical()&lt;/code&gt; and pass the &lt;code&gt;exc_info&lt;/code&gt; parameter as &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;classes-and-functions&quot;&gt;Classes and Functions&lt;/h2&gt;
&lt;p&gt;So far, we have seen the default logger named &lt;code&gt;root&lt;/code&gt;, which is used by the logging module whenever its functions are called directly like this: &lt;code&gt;logging.debug()&lt;/code&gt;. You can (and should) define your own logger by creating an object of the &lt;code&gt;Logger&lt;/code&gt; class, especially if your application has multiple modules. Let&amp;rsquo;s have a look at some of the classes and functions in the module.&lt;/p&gt;
&lt;p&gt;The most commonly used classes defined in the logging module are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Logger&lt;/code&gt;:&lt;/strong&gt; This is the class whose objects will be used in the application code directly to call the functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;LogRecord&lt;/code&gt;:&lt;/strong&gt; Loggers automatically create &lt;code&gt;LogRecord&lt;/code&gt; objects that have all the information related to the event being logged, like the name of the logger, the function, the line number, the message, and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Handler&lt;/code&gt;:&lt;/strong&gt; Handlers send the &lt;code&gt;LogRecord&lt;/code&gt; to the required output destination, like the console or a file. &lt;code&gt;Handler&lt;/code&gt; is a base for subclasses like &lt;code&gt;StreamHandler&lt;/code&gt;, &lt;code&gt;FileHandler&lt;/code&gt;, &lt;code&gt;SMTPHandler&lt;/code&gt;, &lt;code&gt;HTTPHandler&lt;/code&gt;, and more. These subclasses send the logging outputs to corresponding destinations, like &lt;code&gt;sys.stdout&lt;/code&gt; or a disk file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Formatter&lt;/code&gt;:&lt;/strong&gt; This is where you specify the format of the output by specifying a string format that lists out the attributes that the output should contain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Out of these, we mostly deal with the objects of the &lt;code&gt;Logger&lt;/code&gt; class, which are instantiated using the module-level function &lt;code&gt;logging.getLogger(name)&lt;/code&gt;. Multiple calls to &lt;code&gt;getLogger()&lt;/code&gt; with the same &lt;code&gt;name&lt;/code&gt; will return a reference to the same &lt;code&gt;Logger&lt;/code&gt; object, which saves us from passing the logger objects to every part where it&amp;rsquo;s needed. Here&amp;rsquo;s an example: &lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;example_logger&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a warning&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;This is a warning&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a custom logger named &lt;code&gt;example_logger&lt;/code&gt;, but unlike the root logger, the name of a custom logger is not part of the default output format and has to be added to the configuration. Configuring it to a format to show the name of the logger would give an output like this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;WARNING:example_logger:This is a warning&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, unlike the root logger, a custom logger can&amp;rsquo;t be configured using &lt;code&gt;basicConfig()&lt;/code&gt;. You have to configure it using Handlers and Formatters:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;It is recommended that we use module-level loggers by passing &lt;code&gt;__name__&lt;/code&gt; as the name parameter to &lt;code&gt;getLogger()&lt;/code&gt; to create a logger object as the name of the logger itself would tell us from where the events are being logged. &lt;code&gt;__name__&lt;/code&gt; is a special built-in variable in Python which evaluates to the name of the current module.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/logging.html#logger-objects&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;using-handlers&quot;&gt;Using Handlers&lt;/h2&gt;
&lt;p&gt;Handlers come into the picture when you want to configure your own loggers and send the logs to multiple places when they are generated. Handlers send the log messages to configured destinations like the standard output stream or a file or over HTTP or to your email via SMTP.&lt;/p&gt;
&lt;p&gt;A logger that you create can have more than one handler, which means you can set it up to be saved to a log file and also send it over email.&lt;/p&gt;
&lt;p&gt;Like loggers, you can also set the severity level in handlers. This is useful if you want to set multiple handlers for the same logger but want different severity levels for each of them. For example, you may want logs with level &lt;code&gt;WARNING&lt;/code&gt; and above to be logged to the console, but everything with level &lt;code&gt;ERROR&lt;/code&gt; and above should also be saved to a file. Here&amp;rsquo;s a program that does that:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# logging_example.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create a custom logger&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create handlers&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;file.log&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WARNING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create formatters and add it to handlers&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(name)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(name)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Add handlers to the logger&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a warning&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is an error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;__main__ - WARNING - This is a warning&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;__main__ - ERROR - This is an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;logger.warning()&lt;/code&gt; is creating a &lt;code&gt;LogRecord&lt;/code&gt; that holds all the information of the event and passing it to all the Handlers that it has: &lt;code&gt;c_handler&lt;/code&gt; and &lt;code&gt;f_handler&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;c_handler&lt;/code&gt; is a &lt;code&gt;StreamHandler&lt;/code&gt; with level &lt;code&gt;WARNING&lt;/code&gt; and takes the info from the &lt;code&gt;LogRecord&lt;/code&gt; to generate an output in the format specified and prints it to the console. &lt;code&gt;f_handler&lt;/code&gt; is a &lt;code&gt;FileHandler&lt;/code&gt; with level &lt;code&gt;ERROR&lt;/code&gt;, and it ignores this &lt;code&gt;LogRecord&lt;/code&gt; as its level is &lt;code&gt;WARNING&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;logger.error()&lt;/code&gt; is called, &lt;code&gt;c_handler&lt;/code&gt; behaves exactly as before, and &lt;code&gt;f_handler&lt;/code&gt; gets a &lt;code&gt;LogRecord&lt;/code&gt; at the level of &lt;code&gt;ERROR&lt;/code&gt;, so it proceeds to generate an output just like &lt;code&gt;c_handler&lt;/code&gt;, but instead of printing it to console, it writes it to the specified file in this format:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;2018-08-03 16:12:21,723 - __main__ - ERROR - This is an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The name of the logger corresponding to the &lt;code&gt;__name__&lt;/code&gt; variable is logged as &lt;code&gt;__main__&lt;/code&gt;, which is the name Python assigns to the module where execution starts. If this file is imported by some other module, then the &lt;code&gt;__name__&lt;/code&gt; variable would correspond to its name &lt;em&gt;logging_example&lt;/em&gt;. Here&amp;rsquo;s how it would look:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# run.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging_example&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;logging_example - WARNING - This is a warning&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;logging_example - ERROR - This is an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-configuration-methods&quot;&gt;Other Configuration Methods&lt;/h2&gt;
&lt;p&gt;You can configure logging as shown above using the module and class functions or by creating a config file or a dictionary and loading it using &lt;code&gt;fileConfig()&lt;/code&gt; or &lt;code&gt;dictConfig()&lt;/code&gt; respectively. These are useful in case you want to change your logging configuration in a running application.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example file configuration:&lt;/p&gt;
&lt;div class=&quot;highlight ini&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;[loggers]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;root,sampleLogger&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[handlers]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;consoleHandler&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[formatters]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sampleFormatter&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[logger_root]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;consoleHandler&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[logger_sampleLogger]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;consoleHandler&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;qualname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sampleLogger&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;propagate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[handler_consoleHandler]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;StreamHandler&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sampleFormatter&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(sys.stdout,)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[formatter_sampleFormatter]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%(asctime)s - %(name)s - %(levelname)s - %(message)s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above file, there are two loggers, one handler, and one formatter. After their names are defined, they are configured by adding the words logger, handler, and formatter before their names separated by an underscore. &lt;/p&gt;
&lt;p&gt;To load this config file, you have to use &lt;code&gt;fileConfig()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging.config&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;file.conf&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disable_existing_loggers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Get the logger specified in the file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a debug message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;2018-07-13 13:57:45,467 - __main__ - DEBUG - This is a debug message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The path of the config file is passed as a parameter to the &lt;code&gt;fileConfig()&lt;/code&gt; method, and the &lt;code&gt;disable_existing_loggers&lt;/code&gt; parameter is used to keep or disable the loggers that are present when the function is called. It defaults to &lt;code&gt;True&lt;/code&gt; if not mentioned.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the same configuration in a YAML format for the dictionary approach:&lt;/p&gt;
&lt;div class=&quot;highlight yaml&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;formatters&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;simple&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;%(asctime)s&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%(name)s&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%(levelname)s&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%(message)s&amp;#39;&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;logging.StreamHandler&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;DEBUG&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;simple&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ext://sys.stdout&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;loggers&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;sampleLogger&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;DEBUG&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;propagate&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;no&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;DEBUG&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s an example that shows how to load config from a &lt;code&gt;yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging.config&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;config.yaml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safe_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is a debug message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;2018-07-13 14:05:03,766 - __main__ - DEBUG - This is a debug message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;keep-calm-and-read-the-logs&quot;&gt;Keep Calm and Read the Logs&lt;/h2&gt;
&lt;p&gt;The logging module is considered to be very flexible. Its design is very practical and should fit your use case out of the box. You can add basic logging to a small project, or you can go as far as creating your own custom log levels, handler classes, and more if you are working on a big project. &lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t been using logging in your applications, now is a good time to start. When done right, logging will surely remove a lot of friction from your development process and help you find opportunities to take your application to the next level.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>The Best Python Books</title>
      <id>https://realpython.com/best-python-books/</id>
      <link href="https://realpython.com/best-python-books/"/>
      <updated>2018-09-10T14:00:00+00:00</updated>
      <summary>Find the right books to help you get started with Python or take your coding to the next level with this detailed guide to the best Python books out there.</summary>
      <content type="html">
        &lt;p&gt;Python is an amazing programming language.
It can be applied to almost any programming task, allows for rapid development and debugging, and brings the support of what is arguably the most welcoming user community.&lt;/p&gt;
&lt;p&gt;Getting started with Python is like learning any new skill: it&amp;rsquo;s important to find a resource you connect with to guide your learning. Luckily, there&amp;rsquo;s no shortage of excellent books that can help you learn both the basic concepts of programming and the specifics of programming in Python. With the abundance of resources, it can be difficult to identify which book would be best for your situation.&lt;/p&gt;
&lt;p&gt;In this article, we highlight the best books for learning Python through a collection of book reviews. Each review gives you a taste of the book, the topics covered, and the context used to illustrate those topics. Different books will resonate with different people, depending on the style and presentation of the books, the readers&amp;rsquo; backgrounds, as well as other factors.&lt;/p&gt;
&lt;p&gt;If you are new to Python, any of the &lt;a href=&quot;#best-books-for-learning-python&quot;&gt;introductory books&lt;/a&gt; will give you a solid foundation in the basics.&lt;/p&gt;
&lt;p&gt;Perhaps you want to learn Python with your kid, or maybe teach Python to a group of kids.
Check out &lt;a href=&quot;#best-python-books-for-kids&quot;&gt;the Best Python Books for Kids&lt;/a&gt; for resources aimed at a younger audience.&lt;/p&gt;
&lt;p&gt;As you progress in you Python journey, you will want to dig deeper to maximize the efficiency of your code. The &lt;a href=&quot;#best-intermediate-and-advanced-python-books&quot;&gt;best intermediate and advanced Python books&lt;/a&gt; provide insight to help you level up your Python skills, enabling you to become an expert Pythonista.&lt;/p&gt;
&lt;p&gt;After reading these reviews, if you still are not sure which book to choose, publishers often provide a sample chapter or section to give you an example of what the book offers. Reading a sample of the book should give you the most representative picture of the author&amp;rsquo;s pace, style, and expectations.&lt;/p&gt;
&lt;p&gt;Regardless of which book most stands out, consider this anecdote from one of our book reviewers, Steven C. Howell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A favorite professor once told me, &amp;lsquo;It doesn&amp;rsquo;t matter which book you read first. It&amp;rsquo;s always the second one that makes the most sense.&amp;rsquo;&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t say this has always been the case for me, but I&amp;rsquo;ve definitely found that a second reference can make all the difference when the first left me puzzled or frustrated.&lt;/p&gt;
&lt;p&gt;When learning Python classes, I had difficulty relating to the examples used in the first two books I picked up.
It wasn&amp;rsquo;t until the third book I referred to that the concepts started to click.&lt;/p&gt;
&lt;p&gt;The important lesson is that if you get stuck or frustrated, and the resources you have are not helping, then don&amp;rsquo;t give up. Look at another book, search the web, ask on a forum, or just take a break.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article contains affiliate links to retailers like Amazon, so you can support Real Python by clicking through and making a purchase on some of the links. Purchasing from one of these links adds no extra cost to you.  Affiliate links never influence our editorial decisions in any way.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;best-books-for-learning-python&quot;&gt;Best Books for Learning Python&lt;/h2&gt;
&lt;p&gt;If you are new to Python, you are likely in one of the following two situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are new to programming and want to start by learning Python.&lt;/li&gt;
&lt;li&gt;You have a reasonable amount of programming experience in another language and now want to learn Python.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This section focuses on the first of these two scenarios, with reviews of the books we consider to be the best Python programming books for readers who are new to both programming and Python. Accordingly, these books require no previous programming experience. They start from the absolute basics and teach both general programming concepts as well as how they apply to Python.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&amp;rsquo;re looking for &lt;strong&gt;the best Python books for experienced programmers&lt;/strong&gt;, consider the following selection of books with full reviews in the &lt;a href=&quot;#best-books-for-learning-python&quot;&gt;intro&lt;/a&gt; and &lt;a href=&quot;#best-intermediate-and-advanced-python-books&quot;&gt;advanced&lt;/a&gt; sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#think-python&quot;&gt;&lt;em&gt;Think Python&lt;/em&gt;&lt;/a&gt;: The most basic of this list, &lt;em&gt;Think Python&lt;/em&gt; provides a comprehensive Python reference.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fluent-python&quot;&gt;&lt;em&gt;Fluent Python&lt;/em&gt;&lt;/a&gt;: While Python&amp;rsquo;s simplicity lets you quickly start coding, this book teaches you how to write idiomatic Python code, while going into several deep topics of the language.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#effective-python-59-ways-to-write-better-python&quot;&gt;&lt;em&gt;Effective Python: 59 Ways to Write Better Python&lt;/em&gt;&lt;/a&gt;: This relatively short book is a collection of 59 articles that, similarly to &lt;em&gt;Fluent Python&lt;/em&gt;, focus on teaching you how to write truly Pythonic code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#python-cookbook&quot;&gt;&lt;em&gt;Python Cookbook&lt;/em&gt;&lt;/a&gt;: As a cookbook, this will be a good reference on how to use Python to complete tasks you have done in another language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, you may even prefer to go directly to &lt;a href=&quot;https://docs.python.org/3/tutorial/index.html&quot;&gt;the official Python Tutorial&lt;/a&gt;, a well-written and thorough resource.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;python-crash-course&quot;&gt;Python Crash Course&lt;/h3&gt;
&lt;p&gt;Eric Matthes &lt;em&gt;(No Starch Press, 2016)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/python-crash-course-cover.56540af24538.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/python-crash-course-cover.56540af24538.jpg&quot; width=&quot;378&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-crash-course-cover.56540af24538.jpg&amp;amp;w=94&amp;amp;sig=e1121cfd81ec00b7bedc7aa11e1377d375579649 94w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-crash-course-cover.56540af24538.jpg&amp;amp;w=189&amp;amp;sig=b672c2b63ea105388529b7918faea5d34f64a03f 189w, https://files.realpython.com/media/python-crash-course-cover.56540af24538.jpg 378w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Python Crash Course&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It does what it says on the tin, and it does it really well. The book starts out with a walkthrough of the basic Python elements and data structures, working through variables, strings, numbers, lists, and tuples, outlining how you work with each of them.&lt;/p&gt;
&lt;p&gt;Next, &lt;code&gt;if&lt;/code&gt; statements and logical tests are covered, followed by a dive into dictionaries.&lt;/p&gt;
&lt;p&gt;After that, the book covers user input, &lt;code&gt;while&lt;/code&gt; loops, functions, classes, and file handling, as well as code testing and debugging.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s just the first half of the book! In the second half, you work on three major projects, creating some clever, fun applications.&lt;/p&gt;
&lt;p&gt;The first project is an Alien Invasion game, essentially Space Invaders, developed using the &lt;code&gt;pygame&lt;/code&gt; package. You design a ship (using classes), then program how to pilot it and make it fire bullets. Then, you design several classes of aliens, make the alien fleet move, and make it possible to shoot them down. Finally, you add a scoreboard and a list of high scores to complete the game.&lt;/p&gt;
&lt;p&gt;After that, the next project covers data visualization with &lt;code&gt;matplotlib&lt;/code&gt;, random walks, rolling dice, and a little bit of statistical analysis, creating graphs and charts with the &lt;code&gt;pygal&lt;/code&gt; package. You learn how to download data in a variety of formats, import it into Python, and visualize the results, as well as how to interact with web APIs, retrieving and visualizing data from GitHub and HackerNews.&lt;/p&gt;
&lt;p&gt;The third project walks you through the creation of a complete web application using Django to set up a Learning Log to track what users have been studying. It covers how to install Django, set up a project, design your models, create an admin interface, set up user accounts, manage access controls on a per-user basis, style your entire app with Bootstrap, and then finally deploy it to Heroku.&lt;/p&gt;
&lt;p&gt;This book is well written and nicely organized. It presents a large number of useful exercises as well as three challenging and entertaining projects that make up the second half of the book.
&lt;em&gt;(Reviewed by David Schlesinger.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1593276036/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nostarch.com/pythoncrashcourse&quot;&gt;View On Publisher Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;head-first-python-2nd-edition&quot;&gt;Head-First Python, 2nd edition&lt;/h3&gt;
&lt;p&gt;Paul Barry &lt;em&gt;(O’Reilly, 2016)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/head-first-python-cover.3869ed7d3547.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/head-first-python-cover.3869ed7d3547.jpg&quot; width=&quot;435&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/head-first-python-cover.3869ed7d3547.jpg&amp;amp;w=108&amp;amp;sig=7e281e04486c83bab63ee4ba73ee9b15754d44c6 108w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/head-first-python-cover.3869ed7d3547.jpg&amp;amp;w=217&amp;amp;sig=4940f0a35c89b325328336d306c87c57722252c2 217w, https://files.realpython.com/media/head-first-python-cover.3869ed7d3547.jpg 435w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Head-First Python&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I really like the &lt;em&gt;Head-First&lt;/em&gt; series of books, although they&amp;rsquo;re admittedly lighter weight in overall content than many of the other recommendations in this section. The trade-off is the that this approach makes the book more user-friendly.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re the kind of person who likes to learn things one small, fairly self-contained chunk at a time, and you want to have lots of concrete examples and illustrations of the concepts involved, then the &lt;em&gt;Head-First&lt;/em&gt; series is for you. The publisher&amp;rsquo;s website has the following to say about their approach:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Based on the latest research in cognitive science and learning theory, &lt;em&gt;Head-First Python&lt;/em&gt; uses a visually rich format to engage your mind, rather than a text-heavy approach that puts you to sleep. Why waste your time struggling with new concepts? This multi-sensory learning experience is designed for the way your brain really works.&amp;rdquo; &lt;a href=&quot;http://shop.oreilly.com/product/0636920036777.do&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Chock full of illustrations, examples, asides, and other tidbits, &lt;em&gt;Head-First Python&lt;/em&gt; is consistently engaging and easy to read. This book starts its tour of Python by diving into lists and explaining how to use and manipulate them. It then goes into modules, errors, and file handling. Each topic is organized around a unifying project: building a dynamic website for a school athletic coach using Python through a Common Gateway Interface (CGI).&lt;/p&gt;
&lt;p&gt;After that, the book spends time teaching you how to use an Android application to interact with the website you created. You learn to handle user input, wrangle data, and look into what&amp;rsquo;s involved in deploying and scaling a Python application on the web.&lt;/p&gt;
&lt;p&gt;While this book isn&amp;rsquo;t as comprehensive as some of the others, it covers a good range of Python tasks in a way that&amp;rsquo;s arguably more accessible, painless, and effective.  This is especially true if you find the subject of writing programs somewhat intimidating at first.&lt;/p&gt;
&lt;p&gt;This book is designed to guide you through any challenge.  While the content is more focused, this book has plenty of material to keep you busy and learning. You will not be bored. If you find most programming books to be too dry, this could be an excellent book for you to get started in Python.
&lt;em&gt;(Reviewed by David Schlesinger and Steven C. Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1491919531/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920036777.do&quot;&gt;View On Publisher Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;invent-your-own-computer-games-with-python-4th-edition&quot;&gt;Invent Your Own Computer Games with Python, 4th edition&lt;/h3&gt;
&lt;p&gt;Al Sweigart &lt;em&gt;(No Starch, 2017)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/iyocgwp-cover.4d43d42500a2.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/iyocgwp-cover.4d43d42500a2.jpg&quot; width=&quot;378&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/iyocgwp-cover.4d43d42500a2.jpg&amp;amp;w=94&amp;amp;sig=d0e2a40d8bcf4e0fd1ef16e624995c3877147843 94w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/iyocgwp-cover.4d43d42500a2.jpg&amp;amp;w=189&amp;amp;sig=cdf7690feeac1b761695a45db08992dbcad82cbf 189w, https://files.realpython.com/media/iyocgwp-cover.4d43d42500a2.jpg 378w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Invent Your Own Computer Games with Python&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If games are your thing, or you even have a game idea of your own, this would be the perfect book to learn Python. In this book, you learn the fundamentals of programming and Python with the application exercises focused on building classic games.&lt;/p&gt;
&lt;p&gt;Starting with an introduction to the Python shell and the REPL loop, followed by a basic &amp;ldquo;Hello, World!&amp;rdquo; script, you dive right into making a basic number-guessing game, covering random numbers, flow control, type conversion, and Boolean data. After that, a small joke-telling script is written to illustrate the use of print statements, escape characters, and basic string operations.&lt;/p&gt;
&lt;p&gt;The next project is a text-based cave exploration game, Dragon’s Realm, which introduces you to flowcharts and functions, guides you through how to define your own arguments and parameters, and explains Boolean operators, global and local scope, and the &lt;code&gt;sleep()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;After a brief detour into how to debug your Python code, you next implement the game of Hangman, using ASCII artwork, while learning about lists, the &lt;code&gt;in&lt;/code&gt; operator, methods, &lt;code&gt;elif&lt;/code&gt; statements, the &lt;code&gt;random&lt;/code&gt; module, and a handful of string methods.&lt;/p&gt;
&lt;p&gt;You then extend the Hangman game with new features, like word lists and difficulty levels, while learning about dictionaries, key-value pairs, and assignment to multiple variables.&lt;/p&gt;
&lt;p&gt;Your next project is a Tic-Tac-Toe game, which introduces some high-level artificial intelligence concepts, shows you how to short-circuit evaluation in conditionals, and explains the &lt;code&gt;None&lt;/code&gt; value as well as some different ways of accessing lists.&lt;/p&gt;
&lt;p&gt;Your journey through the rest of the book proceeds in a similar vein.
You&amp;rsquo;ll learn nested loops while building a Mastermind-style number guessing game, Cartesian coordinates for a Sonar Hunt game, cryptography to write a Caesar cipher, and artificial intelligence when implementing Reversi (also known as Othello), in which the computer can play against itself.&lt;/p&gt;
&lt;p&gt;After all of this, there&amp;rsquo;s a dive into using graphics for your games with PyGame: you&amp;rsquo;ll cover how to animate the graphics, manage collision detection, as well as use sounds, images, and sprites. To bring all these concepts together, the book guides you through making a graphical obstacle-dodging game.&lt;/p&gt;
&lt;p&gt;This book is well done, and the fact that each project is a self-contained unit makes it appealing and accessible. If you&amp;rsquo;re someone who likes to learn by doing, then you&amp;rsquo;ll enjoy this book.&lt;/p&gt;
&lt;p&gt;The fact that this book introduces concepts only as needed can be a possible disadvantage.
While it&amp;rsquo;s organized more as a guide than a reference, the broad range of contents taught in the context of familiar games makes this one of the best books for learning Python.
&lt;em&gt;(Reviewed by David Schlesinger.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1593277954/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inventwithpython.com/&quot;&gt;View On Author Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;think-python-how-to-think-like-a-computer-scientist-2nd-edition&quot;&gt;Think Python: How to Think Like a Computer Scientist, 2nd edition&lt;/h3&gt;
&lt;p&gt;Allen B. Downey &lt;em&gt;(O’Reilly, 2015)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/think-python-cover.a6cbd57dbde7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/think-python-cover.a6cbd57dbde7.jpg&quot; width=&quot;381&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/think-python-cover.a6cbd57dbde7.jpg&amp;amp;w=95&amp;amp;sig=bf73c2403fd9bb237856d3282ae28c20198733ab 95w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/think-python-cover.a6cbd57dbde7.jpg&amp;amp;w=190&amp;amp;sig=b872c4b6627c6346dcdba8286c2f6fa263a0c2fa 190w, https://files.realpython.com/media/think-python-cover.a6cbd57dbde7.jpg 381w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Think Python: How to Think Like a Computer Scientist&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If learning Python by creating video games is too frivolous for you, consider Allen Downey&amp;rsquo;s book &lt;em&gt;Think Python&lt;/em&gt;, which takes a much more serious approach.&lt;/p&gt;
&lt;p&gt;As the title says, the goal of this book is to teach you how coders &lt;em&gt;think&lt;/em&gt; about coding, and it does a good job of it. Compared to the other books, it&amp;rsquo;s drier and organized in a more linear way.  The book focuses on everything you need to know about basic Python programming, in a very straightforward, clear, and comprehensive way.&lt;/p&gt;
&lt;p&gt;Compared to other similar books, it doesn&amp;rsquo;t go quite as deep into some of the more advanced areas, instead covering a wider range of material, including topics the other books don&amp;rsquo;t go anywhere near.  Examples of such topics include operator overloading, polymorphism, analysis of algorithms, and mutability versus immutability.&lt;/p&gt;
&lt;p&gt;Previous versions were a little light on exercises, but the latest edition has largely corrected this shortcoming.
The book contains four reasonably deep projects, presented as case studies, but overall, it has fewer directed application exercises compared to many other books.&lt;/p&gt;
&lt;p&gt;If you like a step-by-step presentation of just the facts, and you want to get a little additional insight into how professional coders look at problems, this book is a great choice.
&lt;em&gt;(Reviewed by David Schlesinger and Steven C. Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1491939362/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://greenteapress.com/wp/think-python-2e/&quot;&gt;View On Publisher Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;effective-computation-in-physics-field-guide-to-research-with-python&quot;&gt;Effective Computation in Physics: Field Guide to Research with Python&lt;/h3&gt;
&lt;p&gt;Anthony Scopatz, Kathryn D. Huff &lt;em&gt;(O&amp;rsquo;Reilly, 2015)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/ecip-book-cover.7ce8078aba69.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/ecip-book-cover.7ce8078aba69.jpg&quot; width=&quot;382&quot; height=&quot;499&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/ecip-book-cover.7ce8078aba69.jpg&amp;amp;w=95&amp;amp;sig=dbcb32ad6e6cf35b843722f06e99d38f6e889017 95w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/ecip-book-cover.7ce8078aba69.jpg&amp;amp;w=191&amp;amp;sig=4b4b774f5499a737cc2c6c2eac128129f7647095 191w, https://files.realpython.com/media/ecip-book-cover.7ce8078aba69.jpg 382w&quot; sizes=&quot;75vw&quot; alt=&quot;Effective Computation in Physics&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the book I wish I had when I was first learning Python.&lt;/p&gt;
&lt;p&gt;Despite its name, this book is an excellent choice for people who don&amp;rsquo;t have experience with physics, research, or computational problems.&lt;/p&gt;
&lt;p&gt;It really is a &lt;em&gt;field guide&lt;/em&gt; for using Python. On top of actually teaching you Python, it also covers the related topics, like the command-line and version control, as well as the testing and deploying of software.&lt;/p&gt;
&lt;p&gt;In addition to being a great learning resource, this book will also serve as an excellent Python reference, as the topics are well organized with plenty of interspersed examples and exercises.&lt;/p&gt;
&lt;p&gt;The book is divided into four aptly named sections: Getting Started, Getting it Done, Getting it Right, and Getting it Out There.&lt;/p&gt;
&lt;p&gt;The Getting Started section contains everything you need to hit the ground running.
It begins with a chapter on the fundamentals of the bash command-line. (Yes, you can even install &lt;a href=&quot;https://gitforwindows.org/&quot;&gt;bash for Windows&lt;/a&gt;.)
The book then proceeds to explain the foundations of Python, hitting on all the expected topics: operators, strings, variables, containers, logic, and flow control.
Additionally, there is an entire chapter dedicated to all the different types of functions, and another for classes and &lt;a href=&quot;https://realpython.com/python3-object-oriented-programming/&quot;&gt;object-oriented programming.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Building on this foundation, the Getting it Done section moves into the more data-centric area of Python.
Note that this section, which takes up approximately a third of the book, will be most applicable to scientists, engineers, and data scientists.
If that is you, enjoy.
If not, feel free to skip ahead, picking out any pertinent sections. But be sure to catch the last chapter of the section because it will teach you how to deploy software using pip, conda, virtual machines, and Docker containers.&lt;/p&gt;
&lt;p&gt;For those of you who are interested in working with data, the section begins with a quick &lt;a href=&quot;https://realpython.com/tutorials/data-science/&quot;&gt;overview of the essential libraries for data analysis and visualization.&lt;/a&gt;
You then have a separate chapter dedicated to teaching you the topics of regular expressions, NumPy, data storage (including performing out-of-core operations), specialized data structures (hash tables, data frames, D-trees, and k-d trees), and parallel computation.&lt;/p&gt;
&lt;p&gt;The Getting it Right section teaches you how to avoid and overcome many of the common pitfalls associated with working in Python.
It begins by extending the discussion on deploying software by teaching you how to build software pipelines using &lt;code&gt;make&lt;/code&gt;.
You then learn how to use Git and GitHub to track, store, and organize your code edits over time, a process known as version control.
The section concludes by teaching you how to debug and test your code, two incredibly valuable skills.&lt;/p&gt;
&lt;p&gt;The final section, Getting it Out There, focuses on effectively communicating with the  consumers of your code, yourself included.
It covers the topics of documentation, markup languages (primarily LaTeX), code collaboration, and software licenses.
The section, and book, concludes with a long list of scientific Python projects organized by topic.&lt;/p&gt;
&lt;p&gt;This book stands out because, in addition to teaching all the fundamentals of Python, it also teaches you many of the technologies used by Pythonistas. This is truly one of the best books for learning Python.&lt;/p&gt;
&lt;p&gt;It also serves as a great reference, will a full glossary, bibliography, and index.
The book definitely has a scientific Python spin, but don&amp;rsquo;t worry if you do not come from a scientific background. There are no mathematical equations, and you may even impress your coworkers when they see you are on reading up on Computational Physics!
&lt;em&gt;(Reviewed by Steven C Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1491901535/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920033424.do&quot;&gt;View On Author Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;learn-python-3-the-hard-way&quot;&gt;Learn Python 3 the Hard Way&lt;/h3&gt;
&lt;p&gt;Zed A. Shaw &lt;em&gt;(Addison-Wesley, 2016)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/lp3thw-cover.12d9c32dede7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/lp3thw-cover.12d9c32dede7.jpg&quot; width=&quot;383&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/lp3thw-cover.12d9c32dede7.jpg&amp;amp;w=95&amp;amp;sig=0dc8689e4b1f4e70ee9e5937a0a28cfb6acf47d1 95w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/lp3thw-cover.12d9c32dede7.jpg&amp;amp;w=191&amp;amp;sig=c299c858e1b83fe436603af46a33ca2a57f8ad91 191w, https://files.realpython.com/media/lp3thw-cover.12d9c32dede7.jpg 383w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Learn Python 3 The Hard Way&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Learn Python the Hard Way&lt;/em&gt; is a classic. I&amp;rsquo;m a big fan of the book&amp;rsquo;s approach. When you learn &amp;ldquo;the hard way,&amp;rdquo; you have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Type in all the code yourself&lt;/li&gt;
&lt;li&gt;Do all the exercises&lt;/li&gt;
&lt;li&gt;Find your own solutions to problems you run into&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The great thing about this book is how well the content is presented.  Each chapter is clearly presented.  The code examples are all concise, well constructed, and to the point.  The exercises are instructive, and any problems you run into will not be at all insurmountable. Your biggest risk is typographical errors. Make it through this book, and you’ll definitely no longer be a beginner at Python.&lt;/p&gt;
&lt;p&gt;Don’t let the title put you off. The &amp;ldquo;hard way&amp;rdquo; turns out to be the easy way if you take the long view. Nobody loves typing a lot of stuff in, but that’s what programming actually involves, so it&amp;rsquo;s good to get used to it from the start. One nice thing about this book is that it has been refined through several editions now, so any rough edges have been made nice and smooth by now.&lt;/p&gt;
&lt;p&gt;The book is constructed as a series of &lt;a href=&quot;https://learnpythonthehardway.org/book/&quot;&gt;over fifty exercises&lt;/a&gt;, each building on the previous, and each teaching you some new feature of the language. Starting from Exercise 0, getting Python set up on your computer, you begin writing simple programs. You learn about variables, data types, functions, logic, loops, lists, debugging, dictionaries, object-oriented programming, inheritance, and packaging. You even create a simple game using a game engine.&lt;/p&gt;
&lt;p&gt;The next sections cover concepts like automated testing, lexical scanning on user input to parse sentences, and the &lt;a href=&quot;https://pypi.org/project/lpthw.web/&quot;&gt;&lt;code&gt;lpthw.web&lt;/code&gt; package&lt;/a&gt;, to put your game up on the web.&lt;/p&gt;
&lt;p&gt;Zed is an engaging, patient writer who doesn&amp;rsquo;t gloss over the details. If you work through this book the right way&amp;mdash;the &amp;ldquo;hard way,&amp;rdquo; by following up on the study suggestions provided throughout the text as well as the programming exercises&amp;mdash;you&amp;rsquo;ll be well beyond the beginner programmer stage when you&amp;rsquo;ve finished.
&lt;em&gt;(Reviewed by David Schlesinger.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/0134692888/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learnpythonthehardway.org/python3/&quot;&gt;View On Author Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Of all the books included in this article, this is the only with somewhat mixed reviews. The Stack Overflow (SO) community has compiled a list of 22 complaints prefaced with the following statement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We noticed a general trend that users using [&lt;em&gt;Learn Python the Hard Way&lt;/em&gt;] post questions &lt;a href=&quot;https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem&quot;&gt;that don’t make a lot of sense&lt;/a&gt; both on SO and in chat. This is due to the structure and techniques used in the book.&amp;rdquo; &lt;a href=&quot;https://sopython.com/wiki/LPTHW_Complaints&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They provide their own &lt;a href=&quot;https://sopython.com/wiki/What_tutorial_should_I_read%3F&quot;&gt;list of recommended tutorials&lt;/a&gt;, which includes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/&quot;&gt;The official Python 3 tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1430224150&quot;&gt;&lt;em&gt;Dive into Python 3&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inventwithpython.com/&quot;&gt;The Invent with Python series&lt;/a&gt;, which includes &lt;a href=&quot;#invent-your-own-computer-games-with-python&quot;&gt;&lt;em&gt;Invent Your Own Computer Games with Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#think-python-how-to-think-like-a-computer-scientist-2nd-edition&quot;&gt;&lt;em&gt;Think Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Despite the negative criticism toward &lt;em&gt;Learn Python the Hard Way&lt;/em&gt;, David Schlesinger and &lt;a href=&quot;https://realpython.com/asin/0134692888#customerReviews&quot;&gt;Amazon reviewers&lt;/a&gt; agree that the book is worthwhile, though you probably want to supplement your library with another Python book that could serve more as a reference.
Also, be sure to do your due diligence before posting questions to Stack Overflow, as that community can be somewhat abrasive at times.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;real-python-course-part-1&quot;&gt;Real Python Course, Part 1&lt;/h3&gt;
&lt;p&gt;Real Python Team &lt;em&gt;(Real Python, 2017)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/real-python-logo-round.4d95338e8944.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/real-python-logo-round.4d95338e8944.png&quot; width=&quot;1500&quot; height=&quot;1500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/real-python-logo-round.4d95338e8944.png&amp;amp;w=375&amp;amp;sig=e431a39c9d7f2d5963a81687571a41288c359142 375w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/real-python-logo-round.4d95338e8944.png&amp;amp;w=750&amp;amp;sig=a098752adfc378feee6bc69748af593ed078b8c0 750w, https://files.realpython.com/media/real-python-logo-round.4d95338e8944.png 1500w&quot; sizes=&quot;75vw&quot; alt=&quot;Real Python Logo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This eBook is the first of three (so far) in the &lt;a href=&quot;https://realpython.com/products/real-python-course/&quot;&gt;&lt;em&gt;Real Python&lt;/em&gt; course series&lt;/a&gt;.  It was written with the goal of getting you up and running, and it does a great job at achieving this goal.  The book is a mix of explanatory prose, example code, and review exercises.  The interspersed review exercises solidify your learning by letting you immediately apply what you&amp;rsquo;ve learned.&lt;/p&gt;
&lt;p&gt;As with the previous books, clear instructions are provided up front for getting Python installed and running on your computer.  After the setup section, rather than giving a dry overview of data types, &lt;em&gt;Real Python&lt;/em&gt; simply starts with strings and is actually quite thorough: you learn string slicing before you hit page 30.&lt;/p&gt;
&lt;p&gt;Then the book gives you a good sense of the flavor of Python by showing you how to play with some of the class methods that can be applied. Next, you learn to write functions and loops, use conditional logic, work with lists and dictionaries, and read and write files.&lt;/p&gt;
&lt;p&gt;Then things get really fun! Once you’ve learned to install packages with &lt;code&gt;pip&lt;/code&gt; (and from source), &lt;em&gt;Real Python&lt;/em&gt; covers interacting with and manipulating PDF files, using SQL from within Python, scraping data from web pages, using &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt; to do scientific computing, and finally, creating graphical user interfaces with &lt;code&gt;EasyGUI&lt;/code&gt; and &lt;code&gt;tkinter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What I like best about &lt;em&gt;Real Python&lt;/em&gt; is that, in addition to covering the basics in a thorough and friendly way, the book explores some more advanced uses of Python that none of the other books hit on, like web-scraping. There are also two additional volumes, which go into more advanced Python development.
&lt;em&gt;(Reviewed by David Schlesinger.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/products/real-python-course/&quot;&gt;View On Real Python »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I first started using the &lt;em&gt;Real Python&lt;/em&gt; books several years ago, when they were still in beta.  I thought then&amp;mdash;and still think now&amp;mdash;that they&amp;rsquo;re one of the best resources available to learn the Python language and several ways it can be used. My gig writing articles on the Real Python web site is a much more recent development, and my review is completely independent. &amp;mdash; David&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;best-python-books-for-kids&quot;&gt;Best Python Books for Kids&lt;/h2&gt;
&lt;p&gt;The following books are aimed at adults interested in teaching kids to code, while possibly learning it themselves along the way.
Both of these books are recommended for kids as young as 9 or 10, but they are great for older kids as well.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that these books are not meant to be just handed to a kid, depending on their age. They would be ideal for a parent who wanted to learn Python alongside their child.&lt;/p&gt;
&lt;h3 id=&quot;python-for-kids-a-playful-introduction-to-programming&quot;&gt;Python for Kids: A Playful Introduction to Programming&lt;/h3&gt;
&lt;p&gt;Jason R. Briggs &lt;em&gt;(No Starch, 2013)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/python-for-kids-cover.6e5bae2b7709.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/python-for-kids-cover.6e5bae2b7709.jpg&quot; width=&quot;378&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-for-kids-cover.6e5bae2b7709.jpg&amp;amp;w=94&amp;amp;sig=0e7dd488bb3cc0716cbf1c596c952c34f6f62430 94w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-for-kids-cover.6e5bae2b7709.jpg&amp;amp;w=189&amp;amp;sig=73caa3e961d420e6c20d7454e4c1c24b83c775fe 189w, https://files.realpython.com/media/python-for-kids-cover.6e5bae2b7709.jpg 378w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Python for Kids: A Playful Introduction to Programming&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Playful&amp;rdquo; is right!
This is a fun book for all ages, despite its title. It provides a clear, easy to follow, introduction to Python programming.
It’s profusely illustrated, the examples are straightforward and clearly presented, and it’s a solid guide for someone who wants to get a good grounding in the basics, plus a little more.&lt;/p&gt;
&lt;p&gt;The book begins with an excellent, detailed guide to getting Python installed on your system, whether that&amp;rsquo;s Windows, OS X, or Ubuntu Linux.
It then proceeds to introduce the Python shell and how it can be used as a simple calculator.
This serves to introduce some basic concepts like variables and arithmetic operation.&lt;/p&gt;
&lt;p&gt;Next, iterables are tackled, and the chapter works its way progressively through strings, lists, tuples, and dictionaries.&lt;/p&gt;
&lt;p&gt;Once that’s accomplished, the Python &lt;code&gt;turtle&lt;/code&gt; library is used to begin working with turtle graphics, a popular framework for teaching children to code.
From there, the book progresses through conditional statements, loops, functions, and modules.&lt;/p&gt;
&lt;p&gt;Classes and objects are covered, followed by a truly excellent section on Python’s built-in functions, and then a section on a number of useful Python libraries and modules.
Turtle graphics are revisited in greater detail, after which the book introduces &lt;code&gt;tkinter&lt;/code&gt; for creating user interfaces, better graphics, and even animations.&lt;/p&gt;
&lt;p&gt;This concludes part 1 of the book, &amp;ldquo;Learning to Program,&amp;rdquo; with the remainder focused on building two fun application projects.
The first project is to build a single-player version of &lt;a href=&quot;https://en.wikipedia.org/wiki/Pong&quot;&gt;Pong&lt;/a&gt;, called Bounce!
This integrates the programming concepts of functions, classes, and control flow, together with the tasks of creating an interface using &lt;code&gt;tkinter&lt;/code&gt;, illustrating to the canvas, performing geometric calculations, and using event bindings to create interactivity.&lt;/p&gt;
&lt;p&gt;In the second project, you build a side-scrolling video game, Mr. Stickman Races for the Exit.
This game applies many of the same concepts and tasks as Bounce! but with more depth and increased complexity.
Along the way, you also get introduced to the open source image manipulation program &lt;a href=&quot;https://www.gimp.org/&quot;&gt;GIMP&lt;/a&gt;, used to create your game’s assets.
The book gets an amazing amount of mileage out of these two games, and getting them working is both instructive and a lot of fun.&lt;/p&gt;
&lt;p&gt;I really like this book.
Whether you are young, or just young at heart, you will enjoy this book if you are looking for a fun, approachable, introduction to Python and programming.
&lt;em&gt;(Reviewed by David Schlesinger and Steven C. Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1593274076/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nostarch.com/pythonforkids&quot;&gt;View On Publisher Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;teach-your-kids-to-code-a-parent-friendly-guide-to-python-programming&quot;&gt;Teach Your Kids to Code: A Parent-Friendly Guide to Python Programming&lt;/h3&gt;
&lt;p&gt;Bryson Payne &lt;em&gt;(No Starch, 2015)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/tyctc-cover.4c9e18e01fb0.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/tyctc-cover.4c9e18e01fb0.jpg&quot; width=&quot;379&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/tyctc-cover.4c9e18e01fb0.jpg&amp;amp;w=94&amp;amp;sig=451528dcadc5d9787457c07e6f86cca67dfca170 94w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/tyctc-cover.4c9e18e01fb0.jpg&amp;amp;w=189&amp;amp;sig=846d11097d6a6ed8aa622dbc062feb0d67d85b9b 189w, https://files.realpython.com/media/tyctc-cover.4c9e18e01fb0.jpg 379w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Teach Your Kids to Code: A Parent-Friendly Guide to Python Programming&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This book is similar to &lt;a href=&quot;#python-for-kids-a-playful-introduction-to-programming&quot;&gt;&lt;em&gt;Python for Kids&lt;/em&gt;&lt;/a&gt; but intended more for an adult working with a child (or children) to learn to code, as the title suggests.
One thing that sets this book apart from most &lt;a href=&quot;#best-books-for-learning-python&quot;&gt;introductory books&lt;/a&gt; is the use of color and illustrations on almost every page.
The book is well written and presents learning to code as a way to teach children problem-solving skills.&lt;/p&gt;
&lt;p&gt;As is commonly the case, this book begins with a Python installation guide.
Compared to &lt;a href=&quot;#python-for-kids-a-playful-introduction-to-programming&quot;&gt;&lt;em&gt;Python for Kids&lt;/em&gt;&lt;/a&gt;, the guide in this book is more cursory but completely adequate.&lt;/p&gt;
&lt;p&gt;The first activity is, again, turtle graphics.
A number of basic variations on drawing a rotated square are presented&amp;mdash;without a lot of underlying explanation, initially&amp;mdash;just to introduce the general concepts, but by the end of the section, you’ll have been provided with a pretty good understanding of the basics.&lt;/p&gt;
&lt;p&gt;Next, calculations, variables, and mathematics in Python are explained. Once strings have been covered, the book brings all of that back into turtle graphics to enhance and explore the work that was done earlier. By this point, the code explanations are extremely clear, with explicit line-by-line details. You’d have a hard time misunderstanding any of the code presented.&lt;/p&gt;
&lt;p&gt;Lists are explored next, as is the &lt;code&gt;eval()&lt;/code&gt; function.
Loops are introduced and then used to create increasingly complex graphics with the turtle.
Conditional expressions come next, along with Boolean logic and operators.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;random&lt;/code&gt; library is introduced with a guessing game and randomly placed spirals made with turtle graphics.  You explore randomness further by implementing rolling dice and picking cards, which leads up to you creating the games Yahtzee and War.&lt;/p&gt;
&lt;p&gt;Functions, more advanced graphics, and user interaction are investigated next.&lt;/p&gt;
&lt;p&gt;The book then branches off to cover using PyGame to create even more advanced graphics and animations, and then user interaction to create a very simple drawing program.&lt;/p&gt;
&lt;p&gt;At this point, you have all the tools to create some real games. Development of both a full-featured version of Pong and a bubble-popping game are presented. Both provide enough depth to pose some challenges and maintain interest.&lt;/p&gt;
&lt;p&gt;What I like best about this book is its large number of programming challenges, as well as the excellent summaries at the end of each chapter reminding you what was covered.
If you and your child are interested in programming, this book should take both of you a good distance, and you&amp;rsquo;ll have a lot of fun.
As the author, Dr. Bryson Payne, said in &lt;a href=&quot;http://brysonpayne.com/2018/04/24/bryson-payne-tedx-talk-coding-cyber-new-literacy/&quot;&gt;his recent TEDx talk&lt;/a&gt;, &amp;ldquo;Step out of your comfort zone, and become literate in the language of technology.&amp;rdquo;
&lt;em&gt;(Reviewed by David Schlesinger and Steven C. Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1593276141/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nostarch.com/teachkids&quot;&gt;View On Publisher Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;best-intermediate-and-advanced-python-books&quot;&gt;Best Intermediate and Advanced Python Books&lt;/h2&gt;
&lt;p&gt;Knowing Python is one thing.
Knowing what’s Pythonic takes practice.
Sometimes Python&amp;rsquo;s low barrier to entry gives people the mistaken idea that the language is less capable than other languages, that style does not matter, or that best practices are only a matter of preference.
Have you ever seen Python code that looked like C or Fortran?&lt;/p&gt;
&lt;p&gt;Learning how to use Python effectively requires some understanding of what Python is doing under the hood.
Pythonic programming takes advantage of how the Python language is implemented to maximize the efficiency of your code.&lt;/p&gt;
&lt;p&gt;Fortunately, there are some excellent books, packed with expert guidance, aimed to help you take what you’ve learned and level up your skills.
Any of the books in this section will give you a deeper understanding of Python programming concepts and teach you how to write &lt;em&gt;developer-style&lt;/em&gt; Python code.
Note that these are by no means introductory books.
They do not include the basics of getting started.
These books will be helpful if you are already coding in Python and want to further hone your skills on your path to becoming a serious Pythonista.&lt;/p&gt;
&lt;h3 id=&quot;python-tricks-a-buffet-of-awesome-python-features&quot;&gt;Python Tricks: A Buffet of Awesome Python Features&lt;/h3&gt;
&lt;p&gt;Dan Bader &lt;em&gt;(dbader.org, 2017)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/python-tricks-book-cover.5b0f5df06d94.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/python-tricks-book-cover.5b0f5df06d94.jpg&quot; width=&quot;333&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-tricks-book-cover.5b0f5df06d94.jpg&amp;amp;w=83&amp;amp;sig=19fc214ce446737e2244854d79dc89d29e1d2f30 83w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-tricks-book-cover.5b0f5df06d94.jpg&amp;amp;w=166&amp;amp;sig=a5b9099744ff97efd754d116f0f0bfa88c1e7110 166w, https://files.realpython.com/media/python-tricks-book-cover.5b0f5df06d94.jpg 333w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Python Tricks&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This book illustrates valuable lesser-known Python features and best practices, written to help you gain a deeper understanding of Python.
Each of the 43 subsections presents a different concept, referred to as a Python Trick, with discussion and easy-to-digest code examples illustrating how you can take advantage of that concept.&lt;/p&gt;
&lt;p&gt;The book&amp;rsquo;s content is broken into the following sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Patterns for Cleaner Python&lt;/li&gt;
&lt;li&gt;Effective Functions&lt;/li&gt;
&lt;li&gt;Classes &amp;amp; OOP&lt;/li&gt;
&lt;li&gt;Common Data Structures in Python&lt;/li&gt;
&lt;li&gt;Looping &amp;amp; Iteration&lt;/li&gt;
&lt;li&gt;Dictionary Tricks&lt;/li&gt;
&lt;li&gt;Pythonic Productivity Techniques&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As it says on the cover, the content is organized as &amp;ldquo;A Buffet,&amp;rdquo; with each subsection being a self-contained topic, with a brief introduction, examples, discussion, and list of &lt;em&gt;Key Takeaways&lt;/em&gt;.
As such, you should feel free to jump around to whichever sections are the most appealing.&lt;/p&gt;
&lt;p&gt;In addition to the book, I particularly enjoyed the 12 Bonus Videos that are available when you purchase this as an eBook.
They have an average length of 11 minutes, perfect for watching during lunch.
Each video illustrates a different concept using clear and concise code examples that are simple to reproduce.
While some of the videos covered familiar concepts, they still provided interesting insight without dragging on.
&lt;em&gt;(Reviewed by Steven C. Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1775093301/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/products/python-tricks-book/&quot;&gt;View On Real Python »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Though this book is officially distributed through Real Python, I recommend it independently of my connection with Real Python.
I purchased this book when it was first released, before I had the opportunity to write for Real Python.
For further evidence of the value of this book, check out the &lt;a href=&quot;https://realpython.com/asins/1775093301#customerReviews&quot;&gt;Amazon reviews&lt;/a&gt;: 148, averaging 4.8 out of 5 stars, at the time of this review.  &amp;mdash; Steve&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;fluent-python-clear-concise-and-effective-programming&quot;&gt;Fluent Python: Clear, Concise, and Effective Programming&lt;/h3&gt;
&lt;p&gt;Luciano Ramalho &lt;em&gt;(O’Reilly, 2014)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/fluent-python-cover.f504156334d8.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/fluent-python-cover.f504156334d8.jpg&quot; width=&quot;381&quot; height=&quot;500&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/fluent-python-cover.f504156334d8.jpg&amp;amp;w=95&amp;amp;sig=be113afdf31bb87b1f36c47df9d7b1b088f3e2f5 95w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/fluent-python-cover.f504156334d8.jpg&amp;amp;w=190&amp;amp;sig=f5d6e7ec66dbb051cb2ef9c69b9bc45ff5792e4c 190w, https://files.realpython.com/media/fluent-python-cover.f504156334d8.jpg 381w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Fluent Python&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This book was written for experienced Python 2 programmers who want to become proficient in Python 3.
Consequently, this book is perfect for someone with a solid foundation in the basics of Python, 2 or 3, who wants to take their skills to the next level.
Additionally, this book also works well as a reference for an experienced programmer from another language who wants to look up &amp;ldquo;How do I do &lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt; in Python?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The book is organized by topic so that each section can be read independently.
While many of the topics covered in this book are found in introductory books, &lt;em&gt;Fluent Python&lt;/em&gt; provides much more detail, illuminating many of the more nuanced and overlooked features of the Python language.&lt;/p&gt;
&lt;p&gt;The chapters are broken into the following six sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prologue&lt;/strong&gt;: introduces Python&amp;rsquo;s object-oriented nature and the special methods that keep Python libraries consistent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;: covers sequences, mappings, sets, and the difference between &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions as Objects&lt;/strong&gt;: explains the consequences of functions being first-class objects in the Python language&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-Oriented Idioms&lt;/strong&gt;: includes references, mutability, instances, multiple inheritance, and operator overloading&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;: extends beyond the basic conditionals and covers the concept of generators, context managers, coroutines, &lt;code&gt;yield from&lt;/code&gt; syntax, and concurrency using &lt;code&gt;asyncio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metaprogramming&lt;/strong&gt;: explores the lesser know aspects of classes, discussing dynamic attributes and properties, attribute descriptors, class decorators, and metaclasses&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With code examples on almost every page, and numbered call-outs linking lines of code to helpful descriptions, this book is extremely approachable.
Additionally, the code examples are geared toward the interactive Python console, a practical approach to exploring and learning the concepts presented.&lt;/p&gt;
&lt;p&gt;I find myself turning to this book when I have a Python question and want an explanation that is more thorough than the one I would likely get on Stack Overflow.
I also enjoy reading this book when I have a bit of down-time and just want to learn something new.
On more than one occasion, I have found that a concept I recently learned from this book unexpectedly turned out to be the perfect solution to a problem I had to solve.
&lt;em&gt;(Reviewed by Steven C. Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1491946008/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920032519.do&quot;&gt;View On Publisher Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;effective-python-59-ways-to-write-better-python&quot;&gt;Effective Python: 59 Ways to Write Better Python&lt;/h3&gt;
&lt;p&gt;Brett Slatkin &lt;em&gt;(Addison-Wesley, 2015)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/effective-python-cover.6e060fbfa272.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/effective-python-cover.6e060fbfa272.jpg&quot; width=&quot;306&quot; height=&quot;400&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/effective-python-cover.6e060fbfa272.jpg&amp;amp;w=76&amp;amp;sig=31fef5db8b7f8c289a9f04053747b04a3c5de7a4 76w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/effective-python-cover.6e060fbfa272.jpg&amp;amp;w=153&amp;amp;sig=f582b81d33b74c137550df7a7dd52ce2415a07f5 153w, https://files.realpython.com/media/effective-python-cover.6e060fbfa272.jpg 306w&quot; sizes=&quot;75vw&quot; alt=&quot;&amp;quot;Effective Python: 59 Ways to Write Better Python&amp;quot; Book Cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This book is a collection of 59 independent articles that build on a basic understanding of Python to teach Pythonic best practices, lesser known functionality, and built-in tools.
The topics range in complexity, beginning with the simple concept of being aware of which Python version you&amp;rsquo;re using, and ending with the more complicated, and typically ignored, concept of identifying memory leaks.&lt;/p&gt;
&lt;p&gt;Each article is a combination of example code, discussion, and a list of things to remember.&lt;/p&gt;
&lt;p&gt;As each article is independent, this is a great book to jump around in, allowing you to focus on the topics that are most applicable or interesting.
This also makes it perfect for reading one article at a time.
With each article being around two to four pages in length, you could make time to read one article per day, finishing the book in two to three months (depending on whether you read on weekends).&lt;/p&gt;
&lt;p&gt;The articles are grouped into the following 8 chapters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pythonic Thinking&lt;/strong&gt;: introduces the best ways to perform common tasks, while taking advantage of how Python is implemented&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: clarifies nuanced differences of Python functions and outlines how to use functions to clarify intention, promote reuse, and reduce bugs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classes and Inheritance&lt;/strong&gt;: outlines the best practices when working with Python classes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metaclasses and Attributes&lt;/strong&gt;: illuminates the somewhat mysterious topic of metaclasses, teaching you how to use them to create intuitive functionality&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrency and Parallelism&lt;/strong&gt;: explains how to know to write multi-threaded applications in Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Built-in Modules&lt;/strong&gt;: introduces a few of Python&amp;rsquo;s lesser-known built-in libraries to make your code more useful and reliable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;: discusses proper documentation, packaging, dependency, and virtual environments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production&lt;/strong&gt;: covers the topics of debugging, optimization, testing, and memory management&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have a solid foundation in Python and want to fill in holes, deepen you understanding, and learn some of the less obvious features of Python, this would be a great book for you.
&lt;em&gt;(Reviewed by Steven C. Howell.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/0134034287/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://effectivepython.com/&quot;&gt;View On Author Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;python-cookbook&quot;&gt;Python Cookbook&lt;/h3&gt;
&lt;p&gt;David Beazley &amp;amp; Brian K. Jones &lt;em&gt;(O&amp;rsquo;Reilly, 3rd edition, 2013)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/python-cookbook-cover.449eb0e173ad.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid w-33 float-right pb-3 pl-4&quot; src=&quot;https://files.realpython.com/media/python-cookbook-cover.449eb0e173ad.jpg&quot; width=&quot;500&quot; height=&quot;656&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-cookbook-cover.449eb0e173ad.jpg&amp;amp;w=125&amp;amp;sig=ac9b32844e5c4461ffcf956260ea6925392f3fe7 125w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-cookbook-cover.449eb0e173ad.jpg&amp;amp;w=250&amp;amp;sig=b2255d2d1fb6905b72d11dcf887db24c1de8d734 250w, https://files.realpython.com/media/python-cookbook-cover.449eb0e173ad.jpg 500w&quot; sizes=&quot;75vw&quot; alt=&quot;Python Cookbook, 3rd. Edition&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What makes this book stand out is its level of detail.  Code &lt;em&gt;cookbooks&lt;/em&gt; are typically designed as short and sweet manuals to illustrate slick ways of doing everyday tasks.
In this case, each recipe in &lt;em&gt;Python Cookbook&lt;/em&gt; has an extended code solution as well as an author&amp;rsquo;s discussion of some particular elements of the solution.&lt;/p&gt;
&lt;p&gt;Each recipe starts out with a clear problem statement, such as, &amp;ldquo;You want to write a decorator that adds an extra argument to the calling signature of the wrapped function.&amp;rdquo;  It then jumps into a solution that uses modern, idiomatic Python 3 code, patterns, and data structures, often spending four to five pages discussing the solution.&lt;/p&gt;
&lt;p&gt;Based on its more involved and sophisticated examples, and the authors&amp;rsquo; own recommendation in the preface, this is probably the most advanced Python book on our list.
Despite that, don&amp;rsquo;t be scared away if you consider yourself an intermediate Python programmer.
Who&amp;rsquo;s judging, anyway?
There&amp;rsquo;s an old saying that goes something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The best way to become a better basketball player is to lose to the best players you can find, rather than beating the worst.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You may see some code blocks you don&amp;rsquo;t fully understand&amp;mdash;come back to them in a few months.  Re-read those sections after you&amp;rsquo;ve picked up a few additional concepts, and suddenly, it will click.  Most of the chapters start out fairly straightforward, and then gradually become more intense.&lt;/p&gt;
&lt;p&gt;The latter half of the book illustrates designs like decorator patterns, closures, accessor functions, and callback functions.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s always nice to read from a trustworthy source, and this book&amp;rsquo;s authors certainly fit that bill.  David Beazley is a frequent &lt;a href=&quot;https://www.dabeaz.com/talks.html&quot;&gt;keynote speaker at events such as PyCon&lt;/a&gt; and also the author of &lt;a href=&quot;https://realpython.com/asins/0672329786/&quot;&gt;&lt;em&gt;Python Essential Reference&lt;/em&gt;&lt;/a&gt;.  Similarly, Brian K. Jones is a CTO, the creator of a Python magazine, and founder of the &lt;a href=&quot;https://www.meetup.com/pug-ip/?_cookie-check=09STgWAF3KD4GDD6&quot;&gt;Python User Group in Princeton (PUG-IP)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This particular edition is written and tested with Python 3.3.
&lt;em&gt;(Reviewed by Brad Solomon.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/asins/1449340377/&quot;&gt;View On Amazon »&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920027072.do&quot;&gt;View On Publisher Website »&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;get-coding&quot;&gt;Get Coding!&lt;/h2&gt;
&lt;p&gt;One of the awesome things about Python is it has a relatively low barrier to entry, compared to many other languages.
Despite this, learning Python is a never-ending process.
The language is relevant for such a wide variety of tasks, and evolves so much that there will always be something new to discover and learn.
While you can pick up enough Python to do some fun things in a week or two, people who&amp;rsquo;ve been using Python for twenty years will tell you they&amp;rsquo;re still learning new things they can do with this flexible and evolving language.&lt;/p&gt;
&lt;p&gt;To ultimately be successful as a Python programmer, you need to begin with a solid foundation, then gain a deeper understanding of how the language works, and how to best put it to use.
To gain a solid foundation, you really can&amp;rsquo;t go wrong with any of the &lt;a href=&quot;#best-books-for-learning-python&quot;&gt;best books to learn Python&lt;/a&gt;.
If you want to learn Python with a child, or maybe teach a group of kids, check out the &lt;a href=&quot;#best-python-books-for-kids&quot;&gt;list of best Python books for kids&lt;/a&gt;.
After you&amp;rsquo;ve got your feet wet, check out some of the &lt;a href=&quot;#best-intermediate-and-advanced-python-books&quot;&gt;best intermediate and advanced Python books&lt;/a&gt; to dig in deeper to less obvious concepts that will improve the efficiency of your code.&lt;/p&gt;
&lt;p&gt;All of these books will teach you what you need to know to legitimately call yourself a Python coder.
The only ingredient missing is &lt;em&gt;you&lt;/em&gt;.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Conditional Statements in Python</title>
      <id>https://realpython.com/python-conditional-statements/</id>
      <link href="https://realpython.com/python-conditional-statements/"/>
      <updated>2018-09-05T14:00:00+00:00</updated>
      <summary>In this step-by-step tutorial you&#39;ll learn how to work with conditional statements in Python. Master if-statements and see how to write complex decision making code in your programs.</summary>
      <content type="html">
        &lt;p&gt;From the previous tutorials in this series, you now have quite a bit of Python code under your belt.  Everything you have seen so far has consisted of &lt;strong&gt;sequential execution&lt;/strong&gt;, in which statements are always performed one after the next, in exactly the order specified.&lt;/p&gt;
&lt;p&gt;But the world is often more complicated than that.  Frequently, a program needs to skip over some statements, execute a series of statements repetitively, or choose between alternate sets of statements to execute.&lt;/p&gt;
&lt;p&gt;That is where &lt;strong&gt;control structures&lt;/strong&gt; come in.  A control structure directs the order of execution of the statements in a program (referred to as the program&amp;rsquo;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_flow&quot;&gt;control flow&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;rsquo;s what you&amp;rsquo;ll learn in this tutorial:&lt;/strong&gt; You&amp;rsquo;ll encounter your first Python control structure, the &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;In the real world, we commonly must evaluate information around us and then choose one course of action or another based on what we observe:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the weather is nice, then I&amp;rsquo;ll mow the lawn. (It&amp;rsquo;s implied that if the weather isn&amp;rsquo;t nice, then I won&amp;rsquo;t mow the lawn.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a Python program, the &lt;code&gt;if&lt;/code&gt; statement is how you perform this sort of decision-making.  It allows for &lt;strong&gt;conditional&lt;/strong&gt; execution of a statement or group of statements based on the value of an expression.&lt;/p&gt;
&lt;p&gt;The outline of this tutorial is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, you&amp;rsquo;ll get a quick overview of the &lt;code&gt;if&lt;/code&gt; statement in its simplest form.&lt;/li&gt;
&lt;li&gt;Next, using the &lt;code&gt;if&lt;/code&gt; statement as a model, you&amp;rsquo;ll see why control structures require some mechanism for grouping statements together into &lt;strong&gt;compound statements&lt;/strong&gt; or &lt;strong&gt;blocks&lt;/strong&gt;.  You&amp;rsquo;ll learn how this is done in Python.&lt;/li&gt;
&lt;li&gt;Lastly, you&amp;rsquo;ll tie it all together and learn how to write complex decision-making code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ready? Here we go!&lt;/p&gt;
&lt;h2 id=&quot;introduction-to-the-if-statement&quot;&gt;Introduction to the &lt;code&gt;if&lt;/code&gt; Statement&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll start by looking at the most basic type of &lt;code&gt;if&lt;/code&gt; statement. In its simplest form, it looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the form shown above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is an expression evaluated in Boolean context, as discussed in the section on &lt;a href=&quot;https://realpython.com/python-operators-expressions/#logical-operators&quot;&gt;Logical Operators&lt;/a&gt; in the Operators and Expressions in Python tutorial.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt; is a valid Python statement, which must be indented.  (You will see why very soon.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true (evaluates to a value that is &amp;ldquo;truthy&amp;rdquo;), then &lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt; is executed. If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is false, then &lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt; is skipped over and not executed.&lt;/p&gt;
&lt;p&gt;Note that the colon (&lt;code&gt;:&lt;/code&gt;) following &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is required. Some programming languages require &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; to be enclosed in parentheses, but Python does not.&lt;/p&gt;
&lt;p&gt;Here are several examples of this type of &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;# Truthy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;# Falsy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;# Falsy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;# Truthy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;yes&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# Truthy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;# Falsy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aul&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;grault&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# Truthy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Falsy&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are trying these examples interactively in a REPL session, you&amp;rsquo;ll find that, when you hit &lt;span class=&quot;keys&quot;&gt;&lt;kbd class=&quot;key-enter&quot;&gt;Enter&lt;/kbd&gt;&lt;/span&gt; after typing in the &lt;code&gt;print(&#39;yes&#39;)&lt;/code&gt; statement, nothing happens.&lt;/p&gt;
&lt;p&gt;Because this is a multiline statement, you need to hit &lt;span class=&quot;keys&quot;&gt;&lt;kbd class=&quot;key-enter&quot;&gt;Enter&lt;/kbd&gt;&lt;/span&gt; a second time to tell the interpreter that you&amp;rsquo;re finished with it.  This extra newline is not necessary in code executed from a script file.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;grouping-statements-indentation-and-blocks&quot;&gt;Grouping Statements: Indentation and Blocks&lt;/h2&gt;
&lt;p&gt;So far, so good.&lt;/p&gt;
&lt;p&gt;But let&amp;rsquo;s say you want to evaluate a condition and then do more than one thing if it is true:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the weather is nice, then I will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mow the lawn&lt;/li&gt;
&lt;li&gt;Weed the garden&lt;/li&gt;
&lt;li&gt;Take the dog for a walk&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In all the examples shown above, each &lt;code&gt;if &amp;lt;expr&amp;gt;:&lt;/code&gt; has been followed by only a single &lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt;.  There needs to be some way to say &amp;ldquo;If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true, do all of the following things.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The usual approach taken by most programming languages is to define a syntactic device that groups multiple statements into one &lt;strong&gt;compound statement&lt;/strong&gt; or &lt;strong&gt;block&lt;/strong&gt;. A block is regarded syntactically as a single entity.  When it is the target of an &lt;code&gt;if&lt;/code&gt; statement, and &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true, then all the statements in the block are executed. If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is false, then none of them are.&lt;/p&gt;
&lt;p&gt;Virtually all programming languages provide the capability to define blocks, but they don&amp;rsquo;t all provide it in the same way.  Let&amp;rsquo;s see how Python does it.&lt;/p&gt;
&lt;h3 id=&quot;python-its-all-about-the-indentation&quot;&gt;Python: It&amp;rsquo;s All About the Indentation&lt;/h3&gt;
&lt;p&gt;Python follows a convention known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Off-side_rule&quot;&gt;off-side rule&lt;/a&gt;, a term coined by British computer scientist Peter J. Landin. (The term is taken from the offside law in association football.) Languages that adhere to the off-side rule define blocks by indentation. Python is one of a relatively small set of &lt;a href=&quot;https://en.wikipedia.org/wiki/Off-side_rule#Off-side_rule_languages&quot;&gt;off-side rule languages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recall from the previous tutorial on Python program structure that &lt;a href=&quot;https://realpython.com/python-program-structure/#whitespace-as-indentation&quot;&gt;indentation has special significance&lt;/a&gt; in a Python program.  Now you know why: indentation is used to define compound statements or blocks. In a Python program, contiguous statements that are indented to the same level are considered to be part of the same block.&lt;/p&gt;
&lt;p&gt;Thus, a compound &lt;code&gt;if&lt;/code&gt; statement in Python looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;following_statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, all the statements at the matching indentation level (lines 2 to 5) are considered part of the same block.  The entire block is executed if &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true, or skipped over if &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is false.  Either way, execution proceeds with &lt;code&gt;&amp;lt;following_statement&amp;gt;&lt;/code&gt; (line 6) afterward.&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.78f3bacaa261.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.78f3bacaa261.png&quot; width=&quot;1161&quot; height=&quot;567&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.78f3bacaa261.png&amp;amp;w=290&amp;amp;sig=8cfd4a010c0b867566355d37940094c80686b069 290w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.78f3bacaa261.png&amp;amp;w=580&amp;amp;sig=b46675ebe59aa643ef75226a12702cc1218d6a9a 580w, https://files.realpython.com/media/t.78f3bacaa261.png 1161w&quot; sizes=&quot;75vw&quot; alt=&quot;Python conditional statement&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Python Compound if Statement&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Notice that there is no token that denotes the end of the block.  Rather, the end of the block is indicated by a line that is indented less than the lines of the block itself.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the Python documentation, a group of statements defined by indentation is often referred to as a &lt;strong&gt;suite&lt;/strong&gt;. This tutorial series uses the terms block and suite interchangeably.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Consider this script file &lt;code&gt;foo.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Expression was true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Executing statement in suite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Done.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;After conditional&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code&gt;foo.py&lt;/code&gt; produces this output:&lt;/p&gt;
&lt;div class=&quot;highlight doscon&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;C:\Users\john\Documents&amp;gt;&lt;/span&gt;python foo.py
&lt;span class=&quot;go&quot;&gt;After conditional&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The four &lt;code&gt;print()&lt;/code&gt; statements on lines 2 to 5 are indented to the same level as one another.  They constitute the block that would be executed if the condition were true.  But it is false, so all the statements in the block are skipped. After the end of the compound &lt;code&gt;if&lt;/code&gt; statement has been reached (whether the statements in the block on lines 2 to 5 are executed or not), execution proceeds to the first statement having a lesser indentation level: the &lt;code&gt;print()&lt;/code&gt; statement on line 6.&lt;/p&gt;
&lt;p&gt;Blocks can be nested to arbitrary depth.  Each indent defines a new block, and each outdent ends the preceding block.  The resulting structure is straightforward, consistent, and intuitive.&lt;/p&gt;
&lt;p&gt;Here is a more complicated script file called &lt;code&gt;blocks.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Does line execute?                        Yes    No&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#                                           ---    --&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Outer condition is true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Inner condition 1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#        x&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Between inner conditions&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Inner condition 2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;End of outer condition&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;After outer condition&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;#  x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output generated when this script is run is shown below:&lt;/p&gt;
&lt;div class=&quot;highlight doscon&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;C:\Users\john\Documents&amp;gt;&lt;/span&gt;python blocks.py
&lt;span class=&quot;go&quot;&gt;Outer condition is true&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Between inner conditions&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Inner condition 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;End of outer condition&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;After outer condition&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In case you have been wondering, the off-side rule is the reason for the necessity of the extra newline when entering multiline statements in a REPL session.  The interpreter otherwise has no way to know that the last statement of the block has been entered.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;what-do-other-languages-do&quot;&gt;What Do Other Languages Do?&lt;/h3&gt;
&lt;p&gt;Perhaps you&amp;rsquo;re wondering what the alternatives are.  How are blocks defined in languages that don&amp;rsquo;t adhere to the off-side rule?&lt;/p&gt;
&lt;p&gt;The tactic used by most programming languages is to designate special tokens that mark the start and end of a block.  For example, in Perl blocks are defined with pairs of curly braces (&lt;code&gt;{}&lt;/code&gt;) like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# (This is Perl, not Python)
if (&amp;lt;expr&amp;gt;) {
    &amp;lt;statement&amp;gt;;
    &amp;lt;statement&amp;gt;;
    ...
    &amp;lt;statement&amp;gt;;
}
&amp;lt;following_statement&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C/C++, Java, and a whole host of &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Curly-bracket_languages&quot;&gt;other languages&lt;/a&gt; use curly braces in this way.&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.7dbd895afc69.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.7dbd895afc69.png&quot; width=&quot;1191&quot; height=&quot;642&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.7dbd895afc69.png&amp;amp;w=297&amp;amp;sig=c2333e37cc27411b60a871d2c2cd068822684cbd 297w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.7dbd895afc69.png&amp;amp;w=595&amp;amp;sig=c2c8d43d3e1a6265c6b2572510c67ff930aebb6a 595w, https://files.realpython.com/media/t.7dbd895afc69.png 1191w&quot; sizes=&quot;75vw&quot; alt=&quot;Perl conditional statement&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Compound if Statement in C/C++, Perl, and Java&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Other languages, such as Algol and Pascal, use keywords &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to enclose blocks.&lt;/p&gt;
&lt;h3 id=&quot;which-is-better&quot;&gt;Which Is Better?&lt;/h3&gt;
&lt;p&gt;Better is in the eye of the beholder. On the whole, programmers tend to feel rather strongly about how they do things. Debate about the merits of the off-side rule can run pretty hot.&lt;/p&gt;
&lt;p&gt;On the plus side:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&amp;rsquo;s use of indentation is clean, concise, and consistent.&lt;/li&gt;
&lt;li&gt;In programming languages that do not use the off-side rule, indentation of code is completely independent of block definition and code function.  It&amp;rsquo;s possible to write code that is indented in a manner that does not actually match how the code executes, thus creating a mistaken impression when a person just glances at it.  This sort of mistake is virtually impossible to make in Python.&lt;/li&gt;
&lt;li&gt;Use of indentation to define blocks forces you to maintain code formatting standards you probably should be using anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the negative side:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many programmers don&amp;rsquo;t like to be forced to do things a certain way.  They tend to have strong opinions about what looks good and what doesn&amp;rsquo;t, and they don&amp;rsquo;t like to be shoehorned into a specific choice.&lt;/li&gt;
&lt;li&gt;Some editors insert a mix of space and tab characters to the left of indented lines, which makes it difficult for the Python interpreter to determine indentation levels.  On the other hand, it is frequently possible to configure editors not to do this. It generally isn&amp;rsquo;t considered desirable to have a mix of tabs and spaces in source code anyhow, no matter the language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like it or not, if you&amp;rsquo;re programming in Python, you&amp;rsquo;re stuck with the off-side rule. All control structures in Python use it, as you will see in several future tutorials.&lt;/p&gt;
&lt;p&gt;For what it&amp;rsquo;s worth, many programmers who have been used to languages with more traditional means of block definition have initially recoiled at Python&amp;rsquo;s way but have gotten comfortable with it and have even grown to prefer it.&lt;/p&gt;
&lt;h2 id=&quot;the-else-and-elif-clauses&quot;&gt;The &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;elif&lt;/code&gt; Clauses&lt;/h2&gt;
&lt;p&gt;Now you know how to use an &lt;code&gt;if&lt;/code&gt; statement to conditionally execute a single statement or a block of several statements.  It&amp;rsquo;s time to find out what else you can do.&lt;/p&gt;
&lt;p&gt;Sometimes, you want to evaluate a condition and take one path if it is true but specify an alternative path if it is not.  This is accomplished with an &lt;code&gt;else&lt;/code&gt; clause:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true, the first suite is executed, and the second is skipped.  If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is false, the first suite is skipped and the second is executed.  Either way, execution then resumes after the second suite. Both suites are defined by indentation, as described above.&lt;/p&gt;
&lt;p&gt;In this example, &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;50&lt;/code&gt;, so the first suite (lines 4 to 5) are executed, and the second suite (lines 7 to 8) are skipped:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;(first suite)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x is small&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;(second suite)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x is large&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;&lt;span class=&quot;go&quot;&gt;(first suite)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;&lt;span class=&quot;go&quot;&gt;x is small&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, on the other hand, &lt;code&gt;x&lt;/code&gt; is greater than &lt;code&gt;50&lt;/code&gt;, so the first suite is passed over, and the second suite executed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;go&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;(first suite)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x is small&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;(second suite)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x is large&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;&lt;span class=&quot;go&quot;&gt;(second suite)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;&lt;span class=&quot;go&quot;&gt;x is large&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also syntax for branching execution based on several alternatives. For this, use one or more &lt;code&gt;elif&lt;/code&gt; (short for &lt;em&gt;else if&lt;/em&gt;) clauses.  Python evaluates each &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; in turn and executes the suite corresponding to the first that is true. If none of the expressions are true, and an &lt;code&gt;else&lt;/code&gt; clause is specified, then its suite is executed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An arbitrary number of &lt;code&gt;elif&lt;/code&gt; clauses can be specified.  The &lt;code&gt;else&lt;/code&gt; clause is optional.  If it is present, there can be only one, and it must be specified last:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Fred&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Fred&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Xander&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Xander&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Joe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Arnold&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Arnold&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know who you are!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Joe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At most, one of the code blocks specified will be executed. If an &lt;code&gt;else&lt;/code&gt; clause isn&amp;rsquo;t included, and all the conditions are false, then none of the blocks will be executed.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using a lengthy &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; series can be a little inelegant, especially when the actions are simple statements like &lt;code&gt;print()&lt;/code&gt;.  In many cases, there may be a more Pythonic way to accomplish the same thing.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s one possible alternative to the example above using the &lt;code&gt;dict.get()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Fred&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Fred&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Xander&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Xander&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Joe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Arnold&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Arnold&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know who you are!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Joe&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Rick&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know who you are!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;I don&amp;#39;t know who you are!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recall from the tutorial on Python dictionaries that the &lt;a href=&quot;https://realpython.com/python-dicts/#built-in-dictionary-methods&quot;&gt;&lt;code&gt;dict.get()&lt;/code&gt;&lt;/a&gt; method searches a dictionary for the specified key and returns the associated value if it is found, or the given default value if it isn&amp;rsquo;t.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;An &lt;code&gt;if&lt;/code&gt; statement with &lt;code&gt;elif&lt;/code&gt; clauses uses short-circuit evaluation, analogous to what you saw with the &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators.  Once one of the expressions is found to be true and its block is executed, none of the remaining expressions are tested.  This is demonstrated below:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Not defined&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#58&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;NameError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;name &amp;#39;var&amp;#39; is not defined&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;This won&amp;#39;t happen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;This won&amp;#39;t either&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second expression contains a division by zero, and the third references an undefined variable &lt;code&gt;var&lt;/code&gt;.  Either would raise an error, but neither is evaluated because the first condition specified is true.&lt;/p&gt;
&lt;h2 id=&quot;one-line-if-statements&quot;&gt;One-Line &lt;code&gt;if&lt;/code&gt; Statements&lt;/h2&gt;
&lt;p&gt;It is customary to write &lt;code&gt;if &amp;lt;expr&amp;gt;&lt;/code&gt; on one line and &lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt; indented on the following line like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But it is permissible to write an entire &lt;code&gt;if&lt;/code&gt; statement on one line.  The following is functionally equivalent to the example above:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There can even be more than one &lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt; on the same line, separated by semicolons:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But what does this mean?  There are two possible interpretations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true, execute &lt;code&gt;&amp;lt;statement_1&amp;gt;&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Then, execute &lt;code&gt;&amp;lt;statement_2&amp;gt; ... &amp;lt;statement_n&amp;gt;&lt;/code&gt; unconditionally, irrespective of whether &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is true, execute all of &lt;code&gt;&amp;lt;statement_1&amp;gt; ... &amp;lt;statement_n&amp;gt;&lt;/code&gt;. Otherwise, don&amp;rsquo;t execute any of them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python takes the latter interpretation.  The semicolon separating the &lt;code&gt;&amp;lt;statements&amp;gt;&lt;/code&gt; has higher precedence than the colon following &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt;&amp;mdash;in computer lingo, the semicolon is said to bind more tightly than the colon. Thus, the &lt;code&gt;&amp;lt;statements&amp;gt;&lt;/code&gt; are treated as a suite, and either all of them are executed, or none of them are:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Multiple statements may be specified on the same line as an &lt;code&gt;elif&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt; clause as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grault&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;qux&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;quux&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grault&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;corge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;grault&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While all of this works, and the interpreter allows it, it is generally discouraged on the grounds that it leads to poor readability, particularly for complex &lt;code&gt;if&lt;/code&gt; statements.  &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#other-recommendations&quot;&gt;PEP 8&lt;/a&gt; specifically recommends against it.&lt;/p&gt;
&lt;p&gt;As usual, it is somewhat a matter of taste. Most people would find the following more visually appealing and easier to understand at first glance than the example above:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grault&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;corge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;grault&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If an &lt;code&gt;if&lt;/code&gt; statement is simple enough, though, putting it all on one line may be reasonable.  Something like this probably wouldn&amp;rsquo;t raise anyone&amp;rsquo;s hackles too much:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debugging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Set to True to turn debugging on.&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debugging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;About to call function foo()&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conditional-expressions&quot;&gt;Conditional Expressions&lt;/h2&gt;
&lt;p&gt;Python supports one additional decision-making entity called a conditional expression. (It is also referred to as a conditional operator or ternary operator in various places in the Python documentation.) Conditional expressions were proposed for addition to the language in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0308&quot;&gt;PEP 308&lt;/a&gt; and green-lighted by Guido in 2005.&lt;/p&gt;
&lt;p&gt;In its simplest form, the syntax of the conditional expression is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conditional_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is different from the &lt;code&gt;if&lt;/code&gt; statement forms listed above because it is not a control structure that directs the flow of program execution.  It acts more like an operator that defines an expression.  In the above example, &lt;code&gt;&amp;lt;conditional_expr&amp;gt;&lt;/code&gt; is evaluated first.  If it is true, the expression evaluates to &lt;code&gt;&amp;lt;expr1&amp;gt;&lt;/code&gt;. If it is false, the expression evaluates to &lt;code&gt;&amp;lt;expr2&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notice the non-obvious order: the middle expression is evaluated first, and based on that result, one of the expressions on the ends is returned.  Here are some examples that will hopefully help clarify:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Let&amp;#39;s go to the&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;beach&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;library&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Let&amp;#39;s go to the beach&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Let&amp;#39;s go to the&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;beach&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;library&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Let&amp;#39;s go to the library&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;minor&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;adult&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;minor&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;no&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;no&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Python&amp;rsquo;s conditional expression is similar to the &lt;code&gt;&amp;lt;conditional_expr&amp;gt; ? &amp;lt;expr1&amp;gt; : &amp;lt;expr2&amp;gt;&lt;/code&gt; syntax used by many other languages&amp;mdash;C, Perl and Java to name a few.  In fact, the &lt;code&gt;?:&lt;/code&gt; operator is commonly called the ternary operator in those languages, which is probably the reason Python&amp;rsquo;s conditional expression is sometimes referred to as a ternary operator.&lt;/p&gt;
&lt;p&gt;You can see in PEP 308 that the &lt;code&gt;&amp;lt;conditional_expr&amp;gt; ? &amp;lt;expr1&amp;gt; : &amp;lt;expr2&amp;gt;&lt;/code&gt; syntax was considered for Python but ultimately rejected in favor of the syntax shown above.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A common use of the conditional expression is to select variable assignment.  For example, suppose you want to find the larger of two numbers.  Of course, there is a built-in function &lt;code&gt;max()&lt;/code&gt; that does just this (and more) that you could use. But suppose you want to write your own code from scratch.&lt;/p&gt;
&lt;p&gt;You could use a standard &lt;code&gt;if&lt;/code&gt; statement with an &lt;code&gt;else&lt;/code&gt; clause:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But a conditional expression is shorter and arguably more readable as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember that the conditional expression behaves like an expression syntactically. It can be used as part of a longer expression.  The conditional expression has lower precedence than virtually all the other operators, so parentheses are needed to group it by itself.&lt;/p&gt;
&lt;p&gt;In the following example, the &lt;code&gt;+&lt;/code&gt; operator binds more tightly than the conditional expression, so &lt;code&gt;1 + x&lt;/code&gt; and &lt;code&gt;y + 2&lt;/code&gt; are evaluated first, followed by the conditional expression.  The parentheses in the second case are unnecessary and do not change the result:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;42&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want the conditional expression to be evaluated first, you need to surround it with grouping parentheses.  In the next example, &lt;code&gt;(x if x &amp;gt; y else y)&lt;/code&gt; is evaluated first.  The result is &lt;code&gt;y&lt;/code&gt;, which is &lt;code&gt;40&lt;/code&gt;, so &lt;code&gt;z&lt;/code&gt; is assigned &lt;code&gt;1 + 40 + 2&lt;/code&gt; = &lt;code&gt;43&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;43&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are using a conditional expression as part of a larger expression, it probably is a good idea to use grouping parentheses for clarification even if they are not needed.&lt;/p&gt;
&lt;p&gt;Conditional expressions also use &lt;a href=&quot;https://realpython.com/python-operators-expressions/#compound-logical-expressions-and-short-circuit-evaluation&quot;&gt;short-circuit evaluation&lt;/a&gt; like compound logical expressions.  Portions of a conditional expression are not evaluated if they don&amp;rsquo;t need to be.&lt;/p&gt;
&lt;p&gt;In the expression &lt;code&gt;&amp;lt;expr1&amp;gt; if &amp;lt;conditional_expr&amp;gt; else &amp;lt;expr2&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;&amp;lt;conditional_expr&amp;gt;&lt;/code&gt; is true, &lt;code&gt;&amp;lt;expr1&amp;gt;&lt;/code&gt; is returned and &lt;code&gt;&amp;lt;expr2&amp;gt;&lt;/code&gt; is not evaluated.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;&amp;lt;conditional_expr&amp;gt;&lt;/code&gt; is false, &lt;code&gt;&amp;lt;expr2&amp;gt;&lt;/code&gt; is returned and &lt;code&gt;&amp;lt;expr1&amp;gt;&lt;/code&gt; is not evaluated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As before, you can verify this by using terms that would raise an error:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In both cases, the &lt;code&gt;1/0&lt;/code&gt; terms are not evaluated, so no exception is raised.&lt;/p&gt;
&lt;p&gt;Conditional expressions can also be chained together, as a sort of alternative &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; structure, as shown here:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s not clear that this has any significant advantage over the corresponding &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; statement, but it is syntactically correct Python.&lt;/p&gt;
&lt;h2 id=&quot;the-pass-statement&quot;&gt;The &lt;code&gt;pass&lt;/code&gt; Statement&lt;/h2&gt;
&lt;p&gt;Occasionally, you may find that you want to write what is called a code stub:  a placeholder for where you will eventually put a block of code that you haven&amp;rsquo;t implemented yet.&lt;/p&gt;
&lt;p&gt;In languages where token delimiters are used to define blocks, like the curly braces in Perl and C, empty delimiters can be used to define a code stub.  For example, the following is legitimate Perl or C code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# This is not Python
if (x)
{
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, the empty curly braces define an empty block.  Perl or C will evaluate the expression &lt;code&gt;x&lt;/code&gt;, and then even if it is true, quietly do nothing.&lt;/p&gt;
&lt;p&gt;Because Python uses indentation instead of delimiters, it is not possible to specify an empty block. If you introduce an &lt;code&gt;if&lt;/code&gt; statement with &lt;code&gt;if &amp;lt;expr&amp;gt;:&lt;/code&gt;, something has to come after it, either on the same line or indented on the following line.&lt;/p&gt;
&lt;p&gt;Consider this script &lt;code&gt;foo.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you try to run &lt;code&gt;foo.py&lt;/code&gt;, you&amp;rsquo;ll get this:&lt;/p&gt;
&lt;div class=&quot;highlight doscon&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;C:\Users\john\Documents\Python\doc&amp;gt;&lt;/span&gt;python foo.py
&lt;span class=&quot;go&quot;&gt;  File &amp;quot;foo.py&amp;quot;, line 3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    print(&amp;#39;foo&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        ^&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IndentationError: expected an indented block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;pass&lt;/code&gt; statement solves this problem in Python.  It doesn&amp;rsquo;t change program behavior at all.  It is used as a placeholder to keep the interpreter happy in any situation where a statement is syntactically required, but you don&amp;rsquo;t really want to do anything:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;foo.py&lt;/code&gt; runs without error:&lt;/p&gt;
&lt;div class=&quot;highlight doscon&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;C:\Users\john\Documents\Python\doc&amp;gt;&lt;/span&gt;python foo.py
&lt;span class=&quot;go&quot;&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With the completion of this tutorial, you are beginning to write Python code that goes beyond simple sequential execution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You were introduced to the concept of &lt;strong&gt;control structures&lt;/strong&gt;. These are compound statements that alter program &lt;strong&gt;control flow&lt;/strong&gt;&amp;mdash;the order of execution of program statements.&lt;/li&gt;
&lt;li&gt;You learned how to group individual statements together into a &lt;strong&gt;block&lt;/strong&gt; or &lt;strong&gt;suite&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You encountered your first control structure, the &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement, which makes it possible to &lt;strong&gt;conditionally&lt;/strong&gt; execute a statement or block based on evaluation of program data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these concepts are crucial to developing more complex Python code.&lt;/p&gt;
&lt;p&gt;The next two tutorials will present two new control structures:  the &lt;strong&gt;&lt;code&gt;while&lt;/code&gt;&lt;/strong&gt; statement and the &lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt; statement.  These structures facilitate &lt;strong&gt;iteration&lt;/strong&gt;, execution of a statement or block of statements repeatedly.&lt;/p&gt;
&lt;div class=&quot;container py-3 series-nav mb-3&quot;&gt;
  &lt;div class=&quot;row justify-content-between&quot;&gt;
    &lt;div class=&quot;col-12 col-md-3 text-left text-muted ml-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-program-structure/&quot;&gt; «&amp;nbsp;Python Program Structure&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-center text-muted&quot;&gt;&lt;a href=&quot;#&quot;&gt;Conditional Statements in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-right text-muted mr-1&quot;&gt;&lt;a &gt;Indefinite Iteration in Python&amp;nbsp;»&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Structuring Python Programs</title>
      <id>https://realpython.com/python-program-structure/</id>
      <link href="https://realpython.com/python-program-structure/"/>
      <updated>2018-09-03T14:00:00+00:00</updated>
      <summary>In this tutorial you&#39;ll dig deeper into Python&#39;s lexical structure and start arranging code into more complex groupings. You&#39;ll learn about the syntactic elements that comprise statements, the basic units that make up a Python program.</summary>
      <content type="html">
        &lt;p&gt;You have now covered Python variables, operators, and data types in depth, and you&amp;rsquo;ve seen quite a bit of example code. Up to now, the code has consisted of short individual statements, simply assigning objects to variables or displaying values.&lt;/p&gt;
&lt;p&gt;But you want to do more than just define data and display it!  Let&amp;rsquo;s start arranging code into more complex groupings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;rsquo;s what you&amp;rsquo;ll learn in this tutorial:&lt;/strong&gt; You&amp;rsquo;ll dig deeper into Python &lt;strong&gt;lexical structure&lt;/strong&gt;. You&amp;rsquo;ll learn about the syntactic elements that comprise &lt;strong&gt;statements&lt;/strong&gt;, the basic units that make up a Python program.  This will prepare you for the next few tutorials covering &lt;strong&gt;control structures&lt;/strong&gt;, constructs that direct program flow among different groups of code.&lt;/p&gt;
&lt;h2 id=&quot;python-statements&quot;&gt;Python Statements&lt;/h2&gt;
&lt;p&gt;Statements are the basic units of instruction that the Python interpreter parses and processes. In general, the interpreter executes statements sequentially, one after the next as it encounters them.  (You will see in the next tutorial on conditional statements that it is possible to alter this behavior.)&lt;/p&gt;
&lt;p&gt;In a REPL session, statements are executed as they are typed in, until the interpreter is terminated.  When you execute a script file, the interpreter reads statements from the file and executes them until end-of-file is encountered.&lt;/p&gt;
&lt;p&gt;Python programs are typically organized with one statement per line.  In other words, each statement occupies a single line, with the end of the statement delimited by the newline character that marks the end of the line.  The majority of the examples so far in this tutorial series have followed this pattern:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello, World!&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[2]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In many of the REPL examples you have seen, a statement has often simply consisted of an &lt;a href=&quot;https://realpython.com/python-operators-expressions/&quot;&gt;expression&lt;/a&gt; typed directly at the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; prompt, for which the interpreter dutifully displays the value:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;oba&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember that this only works interactively, not from a script file.  In a script file, a literal or expression that appears as a solitary statement like the above will not cause output to the console. In fact, it won&amp;rsquo;t do anything useful at all. Python will simply waste CPU time calculating the value of the expression, and then throw it away.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;line-continuation&quot;&gt;Line Continuation&lt;/h2&gt;
&lt;p&gt;Suppose a single statement in your Python code is especially long.  For example, you may have an assignment statement with many terms:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person1_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person2_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person3_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someone_is_of_working_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person1_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person1_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person2_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person2_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person3_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person3_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someone_is_of_working_age&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or perhaps you are defining a lengthy nested list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll notice that these statements are too long to fit in your browser window, and the browser is forced to render the code blocks with horizontal scroll bars. You may find that irritating. (You have our apologies&amp;mdash;these examples are presented that way to make the point. It won&amp;rsquo;t happen again.)&lt;/p&gt;
&lt;p&gt;It is equally frustrating when lengthy statements like these are contained in a script file.  Most editors can be configured to wrap text, so that the ends of long lines are at least visible and don&amp;rsquo;t disappear out the right edge of the editor window.  But the wrapping doesn&amp;rsquo;t necessarily occur in logical locations that enhance readability:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/line-wrap.d1637102a183.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block &quot; src=&quot;https://files.realpython.com/media/line-wrap.d1637102a183.png&quot; width=&quot;1346&quot; height=&quot;605&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/line-wrap.d1637102a183.png&amp;amp;w=336&amp;amp;sig=991a7eebfacd1e72df7cad204c263010bd5c85d6 336w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/line-wrap.d1637102a183.png&amp;amp;w=673&amp;amp;sig=1ebcd6ff10dffb8522ff2dee88bb14abcf163b67 673w, https://files.realpython.com/media/line-wrap.d1637102a183.png 1346w&quot; sizes=&quot;75vw&quot; alt=&quot;line-wrap&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Excessively long lines of code are generally considered poor practice.  In fact, there is an official &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008&quot;&gt;Style Guide for Python Code&lt;/a&gt; put forth by the Python Software Foundation, and one of its stipulations is that the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#maximum-line-length&quot;&gt;maximum line length&lt;/a&gt; in Python code should be 79 characters.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;strong&gt;Style Guide for Python Code&lt;/strong&gt; is also referred to as &lt;strong&gt;PEP 8&lt;/strong&gt;.  PEP stands for Python Enhancement Proposal.  PEPs are documents that contain details about features, standards, design issues, general guidelines, and information relating to Python. For more information, see the Python Software Foundation &lt;a href=&quot;https://www.python.org/dev/peps&quot;&gt;Index of PEPs&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As code becomes more complex, statements will on occasion unavoidably grow long. To maintain readability, you should break them up into parts across several lines. But you can&amp;rsquo;t just split a statement whenever and wherever you like. Unless told otherwise, the interpreter assumes that a newline character terminates a statement. If the statement isn&amp;rsquo;t syntactically correct at that point, an exception is raised:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someone_is_of_working_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person1_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person1_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;SyntaxError: invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Python code, a statement can be continued from one line to the next in two different ways:  implicit and explicit line continuation.&lt;/p&gt;
&lt;h3 id=&quot;implicit-line-continuation&quot;&gt;Implicit Line Continuation&lt;/h3&gt;
&lt;p&gt;This is the more straightforward technique for line continuation, and the one that is preferred according to PEP 8.&lt;/p&gt;
&lt;p&gt;Any statement containing opening parentheses (&lt;code&gt;&#39;(&#39;&lt;/code&gt;), brackets (&lt;code&gt;&#39;[&#39;&lt;/code&gt;), or curly braces (&lt;code&gt;&#39;{&#39;&lt;/code&gt;) is presumed to be incomplete until all matching parentheses, brackets, and braces have been encountered. Until then, the statement can be implicitly continued across lines without raising an error.&lt;/p&gt;
&lt;p&gt;For example, the nested list definition from above can be made much more readable using implicit line continuation because of the open brackets:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15],&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A long expression can also be continued across multiple lines by wrapping it in grouping parentheses.  PEP 8 explicitly advocates using parentheses in this manner when appropriate:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someone_is_of_working_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person1_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person1_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person2_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person2_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person3_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person3_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someone_is_of_working_age&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you need to continue a statement across multiple lines, it is usually possible to use implicit line continuation to do so.  This is because parentheses, brackets, and curly braces appear so frequently in Python syntax:&lt;/p&gt;
&lt;h4 id=&quot;parentheses&quot;&gt;Parentheses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Expression grouping&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Function call&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;foo bar baz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Method call&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;---abc---&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Tuple definition&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;curly-braces&quot;&gt;Curly Braces&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Dictionary definition&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Set definition&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;square-brackets&quot;&gt;Square Brackets&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;List definition&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Indexing&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Slicing&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bar&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Dictionary key reference&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Just because something is syntactically allowed, it doesn&amp;rsquo;t mean you should do it.  Some of the examples above would not typically be recommended.  Splitting indexing, slicing, or dictionary key reference across lines, in particular, would be unusual.  But you can consider it if you can make a good argument that it enhances readability.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Remember that if there are multiple parentheses, brackets, or curly braces, then implicit line continuation is in effect until they are all closed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[[[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;], [1, 2, 3]], {1, 3, 5}, {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note how line continuation and judicious use of indentation can be used to clarify the nested structure of the list.&lt;/p&gt;
&lt;h3 id=&quot;explicit-line-continuation&quot;&gt;Explicit Line Continuation&lt;/h3&gt;
&lt;p&gt;In cases where implicit line continuation is not readily available or practicable, there is another option.  This is referred to as explicit line continuation or explicit line joining.&lt;/p&gt;
&lt;p&gt;Ordinarily, a newline character (which you get when you press &lt;span class=&quot;keys&quot;&gt;&lt;kbd class=&quot;key-enter&quot;&gt;Enter&lt;/kbd&gt;&lt;/span&gt; on your keyboard) indicates the end of a line.  If the statement is not complete by that point, Python will raise a &lt;code&gt;SyntaxError&lt;/code&gt; exception:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;SyntaxError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;invalid syntax&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;SyntaxError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To indicate explicit line continuation, you can specify a backslash (&lt;code&gt;\&lt;/code&gt;) character as the final character on the line.  In that case, Python ignores the following newline, and the statement is effectively continued on next line:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; \
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; \
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; \
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the backslash character must be the last character on the line.  Not even whitespace is allowed after it:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# You can&amp;#39;t see it, but there is a space character following the \ here:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; \
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; \
         &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;SyntaxError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unexpected character after line continuation character&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, PEP 8 recommends using explicit line continuation only when implicit line continuation is not feasible.&lt;/p&gt;
&lt;h2 id=&quot;multiple-statements-per-line&quot;&gt;Multiple Statements Per Line&lt;/h2&gt;
&lt;p&gt;Multiple statements may occur on one line, if they are separated by a semicolon (&lt;code&gt;;&lt;/code&gt;) character:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Stylistically, this is generally frowned upon, and &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/?#other-recommendations&quot;&gt;PEP 8 expressly discourages it&lt;/a&gt;.  There might be situations where it improves readability, but it usually doesn&amp;rsquo;t.  In fact, it often isn&amp;rsquo;t necessary.  The following statements are functionally equivalent to the example above, but would be considered more typical Python code:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The term &lt;strong&gt;Pythonic&lt;/strong&gt; refers to code that adheres to generally accepted common guidelines for readability and &amp;ldquo;best&amp;rdquo; use of idiomatic Python.  When someone says code is not Pythonic, they are implying that it does not express the programmer&amp;rsquo;s intent as well as might otherwise be done in Python.  Thus, the code is probably not as readable as it could be to someone who is fluent in Python.&lt;/p&gt;
&lt;p&gt;If you find your code has multiple statements on a line, there is probably a more Pythonic way to write it. But again, if you think it&amp;rsquo;s appropriate or enhances readability, you should feel free to do it.&lt;/p&gt;
&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;
&lt;p&gt;In Python, the hash character (&lt;code&gt;#&lt;/code&gt;) signifies a comment.  The interpreter will ignore everything from the hash character through the end of that line:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# I am a comment.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the first non-whitespace character on the line is a hash, the entire line is effectively ignored:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# I am a comment.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# I am too.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Naturally, a hash character inside a string literal is protected, and does not indicate a comment:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foobar # I am *not* a comment.&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foobar # I am *not* a comment.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A comment is just ignored, so what purpose does it serve? Comments give you a way to attach explanatory detail to your code:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Calculate and display the area of a circle.&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1415926536&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.35&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;The area of a circle with radius&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;The area of a circle with radius 12.35 is 479.163565508706&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Up to now, your Python coding has consisted mostly of short, isolated REPL sessions.  In that setting, the need for comments is pretty minimal.  Eventually, you will develop larger applications contained across multiple script files, and comments will become increasingly important.&lt;/p&gt;
&lt;p&gt;Good commenting makes the intent of your code clear at a glance when someone else reads it, or even when you yourself read it.  Ideally, you should strive to write code that is as clear, concise, and self-explanatory as possible.  But there will be times that you will make design or implementation decisions that are not readily obvious from the code itself.  That is where commenting comes in.  Good code explains how; good comments explain why.&lt;/p&gt;
&lt;p&gt;Comments can be included within implicit line continuation:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# I am a comment.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Me too.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;21&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Me three.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But recall that explicit line continuation requires the backslash character to be the last character on the line.  Thus, a comment can&amp;rsquo;t follow afterward:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \   &lt;span class=&quot;c1&quot;&gt;# I wish to be comment, but I&amp;#39;m not.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;SyntaxError: unexpected character after line continuation character&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What if you want to add a comment that is several lines long?  Many programming languages provide a syntax for multiline comments (also called block comments). For example, in C and Java, comments are delimited by the tokens &lt;code&gt;/*&lt;/code&gt; and &lt;code&gt;*/&lt;/code&gt;.  The text contained within those delimiters can span multiple lines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/*
[This is not Python!]

Initialize the value for radius of circle.

Then calculate the area of the circle
and display the result to the console.
*/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python doesn&amp;rsquo;t explicitly provide anything analogous to this for creating multiline block comments.  To create a block comment, you would usually just begin each line with a hash character:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Initialize value for radius of circle.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Then calculate the area of the circle&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# and display the result to the console.&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1415926536&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.35&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;The area of a circle with radius&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;The area of a circle with radius 12.35 is 479.163565508706&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, for code in a script file, there is technically an alternative.&lt;/p&gt;
&lt;p&gt;You saw above that when the interpreter parses code in a script file, it ignores a string literal (or any literal, for that matter) if it appears as statement by itself.  More precisely, a literal isn&amp;rsquo;t ignored entirely: the interpreter sees it and parses it, but doesn&amp;rsquo;t do anything with it. Thus, a string literal on a line by itself can serve as a comment.  Since a triple-quoted string can span multiple lines, it can effectively function as a multiline comment.&lt;/p&gt;
&lt;p&gt;Consider this script file &lt;code&gt;foo.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Initialize value for radius of circle.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;Then calculate the area of the circle&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;and display the result to the console.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1415926536&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.35&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;The area of a circle with radius&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When this script is run, the output appears as follows:&lt;/p&gt;
&lt;div class=&quot;highlight doscon&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;C:\Users\john\Documents\Python\doc&amp;gt;&lt;/span&gt;python foo.py
&lt;span class=&quot;go&quot;&gt;The area of a circle with radius 12.35 is 479.163565508706&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The triple-quoted string is not displayed and doesn&amp;rsquo;t change the way the script executes in any way. It effectively constitutes a multiline block comment.&lt;/p&gt;
&lt;p&gt;Although this works (and was once put forth as a Python programming tip by Guido himself), PEP 8 actually recommends against it.  The reason for this appears to be because of a special Python construct called the &lt;strong&gt;docstring&lt;/strong&gt;.  A docstring is a special comment at the beginning of a user-defined function that documents the function&amp;rsquo;s behavior.  Docstrings are typically specified as triple-quoted string comments, so PEP 8 recommends that other &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/?#block-comments&quot;&gt;block comments&lt;/a&gt; in Python code be designated the usual way, with a hash character at the start of each line.&lt;/p&gt;
&lt;p&gt;However, as you are developing code, if you want a quick and dirty way to comment out as section of code temporarily for experimentation, you may find it convenient to wrap the code in triple quotes.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Further Reading:&lt;/strong&gt; You will learn more about docstrings in the upcoming tutorial on functions in Python.&lt;/p&gt;
&lt;p&gt;For more information on commenting and documenting Python code, including docstrings, see &lt;a href=&quot;https://realpython.com/documenting-python-code&quot;&gt;Documenting Python Code: A Complete Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;whitespace&quot;&gt;Whitespace&lt;/h2&gt;
&lt;p&gt;When parsing code, the Python interpreter breaks the input up into tokens.  Informally, tokens are just the language elements that you have seen so far:  identifiers, keywords, literals, and operators.&lt;/p&gt;
&lt;p&gt;Typically, what separates tokens from one another is whitespace: blank characters that provide empty space to improve readability.  The most common whitespace characters are the following:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;th&gt;ASCII Code&lt;/th&gt;
&lt;th&gt;Literal Expression&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;space&lt;/td&gt;
&lt;td&gt;&lt;code&gt;32&lt;/code&gt; (&lt;code&gt;0x20&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39; &#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab&lt;/td&gt;
&lt;td&gt;&lt;code&gt;9&lt;/code&gt; (&lt;code&gt;0x9&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;\t&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;newline&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt; (&lt;code&gt;0xa&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;\n&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;There are other somewhat outdated ASCII whitespace characters such as line feed and form feed, as well as some very esoteric Unicode characters that provide whitespace.  But for present purposes, whitespace usually means a space, tab, or newline.&lt;/p&gt;
&lt;p&gt;Whitespace is mostly ignored, and mostly not required, by the Python interpreter.  When it is clear where one token ends and the next one starts, whitespace can be omitted.  This is usually the case when special non-alphanumeric characters are involved:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;15&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;: 3, &amp;#39;bar&amp;#39;: 4}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;21.1&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;foo&amp;#39;, 14, 21.1)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#Comment&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foobarbaz&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every one of the statements above has no whitespace at all, and the interpreter handles them all fine.  That&amp;rsquo;s not to say that you should write them that way though.  Judicious use of whitespace almost always enhances readability, and your code should typically include some.  Compare the following code fragments:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most people would likely find that the added whitespace in the second example makes it easier to read.  On the other hand, you could probably find a few who would prefer the first example.  To some extent, it is a matter of personal preference.  But there are standards for &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/?#whitespace-in-expressions-and-statements&quot;&gt;whitespace in expressions and statements&lt;/a&gt; put forth in PEP 8, and you should strongly consider adhering to them as much as possible.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can juxtapose string literals, with or without whitespace:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&amp;#39;&amp;#39;&amp;#39;baz&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foobarbaz&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&amp;#39;baz&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foobarbaz&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The effect is concatenation, exactly as though you had used the &lt;code&gt;+&lt;/code&gt; operator.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In Python, whitespace is generally only required when it is necessary to distinguish one token from the next.  This is most common when one or both tokens are an identifier or keyword.&lt;/p&gt;
&lt;p&gt;For example, in the following case, whitespace is needed to separate the identifier &lt;code&gt;s&lt;/code&gt; from the keyword &lt;code&gt;in&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#25&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;NameError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;name &amp;#39;sin&amp;#39; is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an example where whitespace is required to distinguish between the identifier &lt;code&gt;y&lt;/code&gt; and the numeric constant &lt;code&gt;20&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is20&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;SyntaxError: invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, whitespace is needed between two keywords:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;SyntaxError: invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running identifiers or keywords together fools the interpreter into thinking you are referring to a different token than you intended: &lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;is20&lt;/code&gt;, and &lt;code&gt;notin&lt;/code&gt;, in the examples above.&lt;/p&gt;
&lt;p&gt;All this tends to be rather academic because it isn&amp;rsquo;t something you&amp;rsquo;ll likely need to think about much.  Instances where whitespace is necessary tend to be intuitive, and you&amp;rsquo;ll probably just do it by second nature.&lt;/p&gt;
&lt;p&gt;You should use whitespace where it isn&amp;rsquo;t strictly necessary as well to enhance readability.  Ideally, you should follow the guidelines in PEP 8.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class=&quot;h3&quot;&gt;Deep Dive: Fortran and Whitespace&lt;/p&gt;
&lt;p&gt;The earliest versions of &lt;strong&gt;Fortran&lt;/strong&gt;, one of the first programming languages created, were designed so that all whitespace was completely ignored. Whitespace characters could be optionally included or omitted virtually anywhere&amp;mdash;between identifiers and reserved words, and even in the middle of identifiers and reserved words.&lt;/p&gt;
&lt;p&gt;For example, if your Fortran code contained a variable named &lt;code&gt;total&lt;/code&gt;, any of the following would be a valid statement to assign it the value &lt;code&gt;50&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;total = 50
to tal = 50
t o t a l=5 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was meant as a convenience, but in retrospect it is widely regarded as overkill. It often resulted in code that was difficult to read. Worse yet, it potentially led to code that did not execute correctly.&lt;/p&gt;
&lt;p&gt;Consider this tale from NASA in the 1960s. A Mission Control Center orbit computation program written in Fortran was supposed to contain the following line of code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DO 10 I = 1,100
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the Fortran dialect used by NASA at that time, the code shown introduces a loop, a construct that executes a body of code repeatedly.  (You will learn about loops in Python in two future tutorials on definite and indefinite iteration).&lt;/p&gt;
&lt;p&gt;Unfortunately, this line of code ended up in the program instead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DO 10 I = 1.100
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have a difficult time seeing the difference, don&amp;rsquo;t feel too bad. It took the NASA programmer a couple weeks to notice that there is a period between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; instead of a comma.  Because the Fortran compiler ignored whitespace, &lt;code&gt;DO 10 I&lt;/code&gt; was taken to be a variable name, and the statement &lt;code&gt;DO 10 I = 1.100&lt;/code&gt; resulted in assigning &lt;code&gt;1.100&lt;/code&gt; to a variable called &lt;code&gt;DO10I&lt;/code&gt; instead of introducing a loop.&lt;/p&gt;
&lt;p&gt;Some versions of the story claim that a Mercury rocket was lost because of this error, but that is evidently a myth.  It did apparently cause inaccurate data for some time, though, before the programmer spotted the error.&lt;/p&gt;
&lt;p&gt;Virtually all modern programming languages have chosen not to go this far with ignoring whitespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;whitespace-as-indentation&quot;&gt;Whitespace as Indentation&lt;/h2&gt;
&lt;p&gt;There is one more important situation in which whitespace is significant in Python code.  Indentation&amp;mdash;whitespace that appears to the left of the first token on a line&amp;mdash;has very special meaning.&lt;/p&gt;
&lt;p&gt;In most interpreted languages, leading whitespace before statements is ignored.  For example, consider this Windows Command Prompt session:&lt;/p&gt;
&lt;div class=&quot;highlight doscon&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;C:\Users\john&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; foo
&lt;span class=&quot;go&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;C:\Users\john&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; foo
&lt;span class=&quot;go&quot;&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In a Command Prompt window, the &lt;code&gt;echo&lt;/code&gt; command displays its arguments to the console, like the &lt;code&gt;print()&lt;/code&gt; function in Python.  Similar behavior can be observed from a terminal window in macOS or Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the second statement, four space characters are inserted to the left of the &lt;code&gt;echo&lt;/code&gt; command.  But the result is the same. The interpreter ignores the leading whitespace and executes the same command, &lt;code&gt;echo foo&lt;/code&gt;, just as it does when the leading whitespace is absent.&lt;/p&gt;
&lt;p&gt;Now try more or less the same thing with the Python interpreter:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;SyntaxError: unexpected indent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Say what?  &lt;em&gt;Unexpected indent&lt;/em&gt;?  The leading whitespace before the second &lt;code&gt;print()&lt;/code&gt; statement causes a &lt;code&gt;SyntaxError&lt;/code&gt; exception!&lt;/p&gt;
&lt;p&gt;In Python, indentation is not ignored.  Leading whitespace is used to compute a line&amp;rsquo;s indentation level, which in turn is used to determine grouping of statements.  As yet, you have not needed to group statements, but that will change in the next tutorial with the introduction of control structures.&lt;/p&gt;
&lt;p&gt;Until then, be aware that leading whitespace matters.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This tutorial introduced you to Python program lexical structure.  You learned what constitutes a valid Python &lt;strong&gt;statement&lt;/strong&gt; and how to use &lt;strong&gt;implicit&lt;/strong&gt; and &lt;strong&gt;explicit line continuation&lt;/strong&gt; to write a statement that spans multiple lines.  You also learned about commenting Python code, and about use of whitespace to enhance readability.&lt;/p&gt;
&lt;p&gt;Next, you will learn how to group statements into more complex decision-making constructs using &lt;strong&gt;conditional statements&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;container py-3 series-nav mb-3&quot;&gt;
  &lt;div class=&quot;row justify-content-between&quot;&gt;
    &lt;div class=&quot;col-12 col-md-3 text-left text-muted ml-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-sets/&quot;&gt; «&amp;nbsp;Sets in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-center text-muted&quot;&gt;&lt;a href=&quot;#&quot;&gt;Python Program Structure&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-right text-muted mr-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-conditional-statements/&quot;&gt;Conditional Statements in Python&amp;nbsp;»&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>We&#39;re Celebrating 1 Million Page Views per Month!</title>
      <id>https://realpython.com/one-million-pageviews-celebration/</id>
      <link href="https://realpython.com/one-million-pageviews-celebration/"/>
      <updated>2018-09-01T15:31:08+00:00</updated>
      <summary>Today we&#39;re celebrating reaching 1,000,000 monthly page views on realpython.com. We are so thankful to you and the rest of the Python community for helping us reach this milestone!</summary>
      <content type="html">
        &lt;p&gt;They say people come to Python for the language and stay for the community. We couldn&amp;rsquo;t agree more! You mean the world to us, and we are honored to have you as a reader! &lt;/p&gt;
&lt;p&gt;Today, we&amp;rsquo;re celebrating reaching &lt;strong&gt;1,000,000 monthly page views&lt;/strong&gt; at realpython.com.&lt;/p&gt;
&lt;p&gt;We are so thankful to you and the rest of the Python community for helping us reach this milestone. More than one million views a month is a mind-blowing number to us&amp;mdash;and it means much more to us than the increase in server fees 😉&lt;/p&gt;
&lt;p&gt;Reaching this milestone shows us that we are providing you with the resources you need to grow as a developer, and that fills us with joy. &lt;/p&gt;
&lt;p&gt;We write comprehensive tutorials twice a week because we care about teaching. We are all passionate Pythonistas, and we want everyone to know that the Python community can be their home, too. &lt;/p&gt;
&lt;p&gt;To show our appreciation, we have decided to give away some of our paid Python courses and books as a big thank you to the community for your continued support. &lt;/p&gt;
&lt;h2 id=&quot;heres-how-its-going-to-work&quot;&gt;Here&amp;rsquo;s How It&amp;rsquo;s Going to Work&lt;/h2&gt;
&lt;p&gt;The contest will run from &lt;strong&gt;September 1st to September 30th&lt;/strong&gt;. At the end of the contest, a random entrant will be picked to receive the Grand Prize. Each week, throughout the contest, we will randomly pick winners for smaller prizes. &lt;/p&gt;
&lt;p&gt;To &lt;a href=&quot;https://realpython.com/giveaway&quot;&gt;enter the contest&lt;/a&gt;, you can do any of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Share the contest&lt;/li&gt;
&lt;li&gt;Follow us on Twitter&lt;/li&gt;
&lt;li&gt;Follow us on Facebook &lt;/li&gt;
&lt;li&gt;Follow us on Instagram&lt;/li&gt;
&lt;li&gt;Subscribe to our YouTube channel&lt;/li&gt;
&lt;li&gt;Subscribe to our newsletter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prizes-you-can-win&quot;&gt;Prizes You Can Win&lt;/h2&gt;
&lt;p&gt;Now for the part you&amp;rsquo;ve been waiting for&amp;mdash;the prizes!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what we are giving away each week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Week 1:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/products/managing-python-dependencies/&quot;&gt;Managing Python Dependencies Course&lt;/a&gt; &lt;em&gt;(worth $49)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Week 2:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/products/python-tricks-book/&quot;&gt;Python Tricks eBook + Videos Bundle&lt;/a&gt; &lt;em&gt;(worth $29)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Week 3:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/products/pythonic-wallpapers/&quot;&gt;The Pythonic Wallpapers Pack&lt;/a&gt; &lt;em&gt;(worth $9.99)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Week 4:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/products/real-python-course/&quot;&gt;All three Real Python Courses&lt;/a&gt; &lt;em&gt;(worth $60)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Grand Prize at the end of the month includes the following:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All three Real Python courses &lt;em&gt;(worth $60)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Python Tricks eBook + Videos Bundle &lt;em&gt;(worth $29)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Managing Python Dependencies Course &lt;em&gt;(worth $49)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The Pythonic Wallpapers Pack &lt;em&gt;(worth $9.99)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A Real Python mug and shirt from &lt;a href=&quot;https://nerdlettering.com/&quot;&gt;Nerdlettering.com&lt;/a&gt; &lt;em&gt;(worth $60)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;This adds up to a total value of over $200.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;how-to-enter-the-giveaway-contest&quot;&gt;How to Enter the Giveaway Contest&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s easy! Just click the link below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://realpython.com/giveaway&quot;&gt;Join the Real Python contest for a chance to win »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://realpython.com/team/&quot;&gt;all of us at Real Python&lt;/a&gt;, thank you! We truly appreciate all the shares, comments, and feedback you have taken the time to provide. It helps us to continually learn as teachers and ensures we are providing the best tutorials and content we can to help you grow as a developer.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the contest link again:&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;&lt;mark&gt;&lt;strong&gt;&lt;a href=&quot;https://realpython.com/giveaway&quot;&gt;Enter for your chance to walk away with over $200 of prizes »&lt;/a&gt;&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Python Pandas: Tricks &amp; Features You May Not Know</title>
      <id>https://realpython.com/python-pandas-tricks/</id>
      <link href="https://realpython.com/python-pandas-tricks/"/>
      <updated>2018-08-29T14:00:00+00:00</updated>
      <summary>Lesser-known but idiomatic Pandas features for those already comfortable with Pandas&#39; basic functionality and concepts.</summary>
      <content type="html">
        &lt;p&gt;Pandas is a foundational library for analytics, data processing, and data science.  It&amp;rsquo;s a huge project with tons of optionality and depth.&lt;/p&gt;
&lt;p&gt;This tutorial will cover some lesser-used but idiomatic Pandas capabilities that lend your code better readability, versatility, and speed, &lt;em&gt;à la&lt;/em&gt; the Buzzfeed listicle.&lt;/p&gt;
&lt;p&gt;If you feel comfortable with the core concepts of Python&amp;rsquo;s Pandas library, hopefully you&amp;rsquo;ll find a trick or two in this article that you haven&amp;rsquo;t stumbled across previously.  (If you&amp;rsquo;re just starting out with the library, &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/10min.html&quot;&gt;10 Minutes to Pandas&lt;/a&gt; is a good place to start.)&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The examples in this article are tested with Pandas version 0.23.2 and Python 3.6.6. However, they should also be valid in older versions.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;1-configure-options-settings-at-interpreter-startup&quot;&gt;1. Configure Options &amp;amp; Settings at Interpreter Startup&lt;/h2&gt;
&lt;p&gt;You may have run across Pandas&amp;rsquo; rich &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/options.html&quot;&gt;options and settings&lt;/a&gt; system before.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a huge productivity saver to set customized Pandas options at interpreter startup, especially if you work in a scripting environment.  You can use &lt;code&gt;pd.set_option()&lt;/code&gt; to configure to your heart&amp;rsquo;s content with a &lt;a href=&quot;https://docs.python.org/tutorial/appendix.html#the-interactive-startup-file&quot;&gt;Python&lt;/a&gt; or &lt;a href=&quot;https://ipython.readthedocs.io/en/stable/interactive/tutorial.html#startup-files&quot;&gt;IPython&lt;/a&gt; startup file.&lt;/p&gt;
&lt;p&gt;The options use a dot notation such as &lt;code&gt;pd.set_option(&#39;display.max_colwidth&#39;, 25)&lt;/code&gt;, which lends itself well to a nested dictionary of options:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;max_columns&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;max_colwidth&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;expand_frame_repr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Don&amp;#39;t wrap to multiple pages&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;max_rows&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;max_seq_items&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Max length of printed sequence&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;precision&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;show_dimensions&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;mode&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;chained_assignment&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Controls SettingWithCopyWarning&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{category}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{op}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Python 3.6+&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Clean up namespace in the interpreter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you launch an interpreter session, you&amp;rsquo;ll see that everything in the startup script has been executed, and Pandas is imported for you automatically with your suite of options:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;pandas&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;display.max_rows&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s use some data on &lt;a href=&quot;https://en.wikipedia.org/wiki/Abalone&quot;&gt;abalone&lt;/a&gt; hosted by the UCI Machine Learning Repository to demonstrate the formatting that was set in the startup file.  The data will truncate at 14 rows with 4 digits of precision for floats:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://archive.ics.uci.edu/ml/&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;       &lt;span class=&quot;s1&quot;&gt;&amp;#39;machine-learning-databases/abalone/abalone.data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;diam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rings&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abalone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usecols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abalone&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     sex  length   diam  height  weight  rings&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0      M   0.455  0.365   0.095  0.5140     15&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1      M   0.350  0.265   0.090  0.2255      7&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2      F   0.530  0.420   0.135  0.6770      9&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3      M   0.440  0.365   0.125  0.5160     10&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4      I   0.330  0.255   0.080  0.2050      7&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5      I   0.425  0.300   0.095  0.3515      8&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6      F   0.530  0.415   0.150  0.7775     20&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4170   M   0.550  0.430   0.130  0.8395     10&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4171   M   0.560  0.430   0.155  0.8675      8&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4172   F   0.565  0.450   0.165  0.8870     11&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4173   M   0.590  0.440   0.135  0.9660     10&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4174   M   0.600  0.475   0.205  1.1760      9&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4175   F   0.625  0.485   0.150  1.0945     10&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4176   M   0.710  0.555   0.195  1.9485     12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll see this dataset pop up in other examples later as well.&lt;/p&gt;
&lt;h2 id=&quot;2-make-toy-data-structures-with-pandas-testing-module&quot;&gt;2. Make Toy Data Structures With Pandas&amp;rsquo; Testing Module&lt;/h2&gt;
&lt;p&gt;Hidden way down in Pandas&amp;rsquo; &lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/master/pandas/util/testing.py&quot;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; module are a number of convenient functions for quickly building quasi-realistic Series and DataFrames:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas.util.testing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tm&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Module-level default rows/columns&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeTimeDataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                 A       B       C&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2000-01-31  0.3574 -0.8804  0.2669&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2000-02-29  0.3775  0.1526 -0.4803&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2000-03-31  1.3823  0.2503  0.3008&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2000-04-30  1.1755  0.0785 -0.1791&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2000-05-31 -0.9393 -0.9039  1.1837&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeDataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                 A       B       C&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nTLGGTiRHF -0.6228  0.6459  0.1251&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;WPBRn9jtsR -0.3187 -0.8091  1.1501&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7B3wWfvuDA -1.9872 -1.0795  0.2987&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;yJ0BTjehH1  0.8802  0.7403 -1.2154&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0luaYUYvy1 -0.9320  1.2912 -0.2907&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are around 30 of these, and you can see the full list by calling &lt;code&gt;dir()&lt;/code&gt; on the module object.  Here are a few:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;make&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;makeBoolIndex&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;makeCategoricalIndex&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;makeCustomDataframe&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;makeCustomIndex&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; # ...,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;makeTimeSeries&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;makeTimedeltaIndex&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;makeUIntIndex&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;makeUnicodeIndex&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These can be useful for benchmarking, testing assertions, and experimenting with Pandas methods that you are less familiar with.&lt;/p&gt;
&lt;h2 id=&quot;3-take-advantage-of-accessor-methods&quot;&gt;3. Take Advantage of Accessor Methods&lt;/h2&gt;
&lt;p&gt;Perhaps you&amp;rsquo;ve heard of the term &lt;strong&gt;accessor&lt;/strong&gt;, which is somewhat like a getter (although getters and setters are used infrequently in Python).  For our purposes here, you can think of a Pandas accessor as a property that serves as an interface to additional methods.&lt;/p&gt;
&lt;p&gt;Pandas Series have three of them:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_accessors&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;cat&amp;#39;, &amp;#39;str&amp;#39;, &amp;#39;dt&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, that definition above is a mouthful, so let&amp;rsquo;s take a look at a few examples before discussing the internals.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.cat&lt;/code&gt; is for categorical data, &lt;code&gt;.str&lt;/code&gt; is for string (object) data, and &lt;code&gt;.dt&lt;/code&gt; is for datetime-like data.  Let&amp;rsquo;s start off with &lt;code&gt;.str&lt;/code&gt;: imagine that you have some raw city/state/ZIP data as a single field within a Pandas Series.&lt;/p&gt;
&lt;p&gt;Pandas string methods are &lt;a href=&quot;https://realpython.com/numpy-array-programming/#what-is-vectorization&quot;&gt;vectorized&lt;/a&gt;, meaning that they operate on the entire array without an explicit for-loop:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Washington, D.C. 20003&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brooklyn, NY 11211-1755&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Omaha, NE 68154&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Pittsburgh, PA 15211&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0     WASHINGTON, D.C. 20003&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    BROOKLYN, NY 11211-1755&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2            OMAHA, NE 68154&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3       PITTSBURGH, PA 15211&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: object&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;\d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 5 or 9-digit zip?&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    5&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    9&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    5&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    5&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: int64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a more involved example, let&amp;rsquo;s say that you want to separate out the three city/state/ZIP components neatly into DataFrame fields.&lt;/p&gt;
&lt;p&gt;You can pass a &lt;a href=&quot;https://docs.python.org/howto/regex.html&quot;&gt;regular expression&lt;/a&gt; to &lt;code&gt;.str.extract()&lt;/code&gt; to &amp;ldquo;extract&amp;rdquo; parts of each cell in the Series.  In &lt;code&gt;.str.extract()&lt;/code&gt;, &lt;code&gt;.str&lt;/code&gt; is the accessor, and &lt;code&gt;.str.extract()&lt;/code&gt; is an accessor method:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;(?P&amp;lt;city&amp;gt;[A-Za-z ]+), &amp;#39;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# One or more letters&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;         &lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;(?P&amp;lt;state&amp;gt;[A-Z]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{2}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;) &amp;#39;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 2 capital letters&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;         &lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;(?P&amp;lt;zip&amp;gt;\d&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{5}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;(?:-\d&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{4}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;)?)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Optional 4-digit extension&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;         city state         zip&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0  Washington    DC       20003&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    Brooklyn    NY  11211-1755&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2       Omaha    NE       68154&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3  Pittsburgh    PA       15211&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This also illustrates what is known as method-chaining, where &lt;code&gt;.str.extract(regex)&lt;/code&gt; is called on the result of &lt;code&gt;addr.str.replace(&#39;.&#39;, &#39;&#39;)&lt;/code&gt;, which cleans up use of periods to get a nice 2-character state abbreviation.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s helpful to know a tiny bit about how these accessor methods work as a motivating reason for why you should use them in the first place, rather than something like &lt;code&gt;addr.apply(re.findall, ...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each accessor is itself a bona fide Python class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.str&lt;/code&gt; maps to &lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/3e4839301fc2927646889b194c9eb41c62b76bda/pandas/core/strings.py#L1766&quot;&gt;&lt;code&gt;StringMethods&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dt&lt;/code&gt; maps to &lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/3e4839301fc2927646889b194c9eb41c62b76bda/pandas/core/indexes/accessors.py#L306&quot;&gt;&lt;code&gt;CombinedDatetimelikeProperties&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.cat&lt;/code&gt; routes to &lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/3e4839301fc2927646889b194c9eb41c62b76bda/pandas/core/arrays/categorical.py#L2356&quot;&gt;&lt;code&gt;CategoricalAccessor&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These standalone classes are then &amp;ldquo;attached&amp;rdquo; to the Series class using a &lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py&quot;&gt;&lt;code&gt;CachedAccessor&lt;/code&gt;&lt;/a&gt;.  It is when the classes are wrapped in &lt;code&gt;CachedAccessor&lt;/code&gt; that a bit of magic happens.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CachedAccessor&lt;/code&gt; is inspired by a &amp;ldquo;cached property&amp;rdquo; design: a property is only computed once per instance and then replaced by an ordinary attribute.  It does this by overloading the &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__get__&quot;&gt;&lt;code&gt;.__get__()&lt;/code&gt; method&lt;/a&gt;, which is part of Python&amp;rsquo;s descriptor protocol.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&amp;rsquo;d like to read more about the internals of how this works, see the &lt;a href=&quot;https://docs.python.org/howto/descriptor.html&quot;&gt;Python Descriptor HOWTO&lt;/a&gt; and &lt;a href=&quot;https://www.pydanny.com/cached-property.html&quot;&gt;this post&lt;/a&gt; on the cached property design.  Python 3 also introduced &lt;a href=&quot;https://docs.python.org/library/functools.html#functools.lru_cache&quot;&gt;&lt;code&gt;functools.lru_cache()&lt;/code&gt;&lt;/a&gt;, which offers similar functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The second accessor, &lt;code&gt;.dt&lt;/code&gt;, is for datetime-like data.  It technically belongs to Pandas&amp;rsquo; &lt;code&gt;DatetimeIndex&lt;/code&gt;, and if called on a Series, it is converted to a &lt;code&gt;DatetimeIndex&lt;/code&gt; first:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daterng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2017&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daterng&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0   2017-03-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1   2017-06-30&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2   2017-09-30&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3   2017-12-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4   2018-03-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5   2018-06-30&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6   2018-09-30&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7   2018-12-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8   2019-03-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: datetime64[ns]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daterng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0      Friday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1      Friday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    Saturday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3      Sunday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4    Saturday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5    Saturday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6      Sunday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7      Monday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8      Sunday&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: object&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Second-half of year only&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daterng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daterng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quarter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2   2017-09-30&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3   2017-12-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6   2018-09-30&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7   2018-12-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: datetime64[ns]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daterng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daterng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_year_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3   2017-12-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7   2018-12-31&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: datetime64[ns]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The third accessor, &lt;code&gt;.cat&lt;/code&gt;, is for Categorical data only, which you&amp;rsquo;ll see shortly in its &lt;a href=&quot;#5-use-categorical-data-to-save-on-time-and-space&quot;&gt;own section&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;4-create-a-datetimeindex-from-component-columns&quot;&gt;4. Create a DatetimeIndex From Component Columns&lt;/h2&gt;
&lt;p&gt;Speaking of datetime-like data, as in &lt;code&gt;daterng&lt;/code&gt; above, it&amp;rsquo;s possible to create a Pandas &lt;code&gt;DatetimeIndex&lt;/code&gt; from multiple component columns that together form a date or datetime:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datecols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datecols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    year  month  day    data&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0   2017      1    1 -0.0767&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1   2017      1    2 -1.2798&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2   2017      1    3  0.4032&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3   2017      2    1  1.2377&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4   2017      2    2 -0.2060&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5   2017      2    3  0.6187&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6   2016      1    1  2.3786&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7   2016      1    2 -0.4730&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8   2016      1    3 -2.1505&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;9   2016      2    1 -0.6340&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;10  2016      2    2  0.7964&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;11  2016      2    3  0.0005&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datecols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;            year  month  day    data&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-01-01  2017      1    1 -0.0767&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-01-02  2017      1    2 -1.2798&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-01-03  2017      1    3  0.4032&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-02-01  2017      2    1  1.2377&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-02-02  2017      2    2 -0.2060&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, you can drop the old individual columns and convert to a Series:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datecols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squeeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-01-01   -0.0767&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-01-02   -1.2798&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-01-03    0.4032&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-02-01    1.2377&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2017-02-02   -0.2060&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Name: data, dtype: float64&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtype_str&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;datetime64[ns]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The intuition behind passing a DataFrame is that a DataFrame resembles a Python dictionary where the column names are keys, and the individual columns (Series) are the dictionary values.  That&amp;rsquo;s why &lt;code&gt;pd.to_datetime(df[datecols].to_dict(orient=&#39;list&#39;))&lt;/code&gt; would also work in this case.  This mirrors the construction of Python&amp;rsquo;s &lt;code&gt;datetime.datetime&lt;/code&gt;, where you pass keyword arguments such as &lt;code&gt;datetime.datetime(year=2000, month=1, day=15, hour=10)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;5-use-categorical-data-to-save-on-time-and-space&quot;&gt;5. Use Categorical Data to Save on Time and Space&lt;/h2&gt;
&lt;p&gt;One powerful Pandas feature is its &lt;code&gt;Categorical&lt;/code&gt; dtype.&lt;/p&gt;
&lt;p&gt;Even if you&amp;rsquo;re not always working with gigabytes of data in RAM, you&amp;rsquo;ve probably run into cases where straightforward operations on a large DataFrame seem to hang up for more than a few seconds.&lt;/p&gt;
&lt;p&gt;Pandas &lt;code&gt;object&lt;/code&gt; dtype is often a great candidate for conversion to category data.  (&lt;code&gt;object&lt;/code&gt; is a container for Python &lt;code&gt;str&lt;/code&gt;, heterogeneous data types, or &amp;ldquo;other&amp;rdquo; types.)  Strings occupy a significant amount of space in memory:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;periwinkle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;mint green&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;burnt orange&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;periwinkle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;burnt orange&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;rose&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;rose&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;mint green&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;rose&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;navy&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getsizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    59&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    59&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    61&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    59&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4    61&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5    53&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6    53&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7    59&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8    53&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;9    53&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: int64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I used &lt;code&gt;sys.getsizeof()&lt;/code&gt; to show the memory occupied by each individual value in the Series.  Keep in mind these are Python objects that have some overhead in the first place.  (&lt;code&gt;sys.getsizeof(&#39;&#39;)&lt;/code&gt; will return 49 bytes.)&lt;/p&gt;
&lt;p&gt;There is also &lt;code&gt;colors.memory_usage()&lt;/code&gt;, which sums up the memory usage and relies on the &lt;code&gt;.nbytes&lt;/code&gt; attribute of the underlying NumPy array.  Don&amp;rsquo;t get too bogged down in these details: what is important is relative memory usage that results from type conversion, as you&amp;rsquo;ll see next.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, what if we could take the unique colors above and map each to a less space-hogging integer?  Here is a naive implementation of that:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;periwinkle&amp;#39;: 0, &amp;#39;mint green&amp;#39;: 1, &amp;#39;burnt orange&amp;#39;: 2, &amp;#39;rose&amp;#39;: 3, &amp;#39;navy&amp;#39;: 4}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_int&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4    2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7    1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;9    4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: int64&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getsizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;9    28&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: int64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Another way to do this same thing is with Pandas&amp;rsquo; &lt;code&gt;pd.factorize(colors)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;array([0, 1, 2, 0, 2, 3, 3, 1, 3, 4])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Either way, you are encoding the object as an enumerated type (categorical variable).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll notice immediately that memory usage is just about cut in half compared to when the full strings are used with &lt;code&gt;object&lt;/code&gt; dtype.&lt;/p&gt;
&lt;p&gt;Earlier in the section on &lt;a href=&quot;#3-take-advantage-of-accessor-methods&quot;&gt;accessors&lt;/a&gt;, I mentioned the &lt;code&gt;.cat&lt;/code&gt; (categorical) accessor.  The above with &lt;code&gt;mapper&lt;/code&gt; is a rough illustration of what is happening internally with Pandas&amp;rsquo; &lt;code&gt;Categorical&lt;/code&gt; dtype:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The memory usage of a &lt;code&gt;Categorical&lt;/code&gt; is proportional to the number of categories plus the length of the data. In contrast, an &lt;code&gt;object&lt;/code&gt; dtype is a constant times the length of the data.&amp;rdquo; &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/categorical.html#memory-usage&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;code&gt;colors&lt;/code&gt; above, you have a ratio of 2 values for every unique value (category):&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nunique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result, the memory savings from converting to &lt;code&gt;Categorical&lt;/code&gt; is good, but not great:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Not a huge space-saver to encode as Categorical&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;650&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;495&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, if you blow out the proportion above, with a lot of data and few unique values (think about data on demographics or alphabetic test scores), the reduction in memory required is over 10 times:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manycolors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manycolors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manycolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nunique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Much greater than 2.0x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;20.0&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manycolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6500&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manycolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;585&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A bonus is that computational efficiency gets a boost too: for categorical &lt;code&gt;Series&lt;/code&gt;, the string operations &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/text.html&quot;&gt;are performed on the &lt;code&gt;.cat.categories&lt;/code&gt; attribute&lt;/a&gt; rather than on each original element of the &lt;code&gt;Series&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In other words, the operation is done once per unique category, and the results are mapped back to the values.  Categorical data has a &lt;code&gt;.cat&lt;/code&gt; accessor that is a window into attributes and methods for manipulating the categories:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Index([&amp;#39;burnt orange&amp;#39;, &amp;#39;mint green&amp;#39;, &amp;#39;navy&amp;#39;, &amp;#39;periwinkle&amp;#39;, &amp;#39;rose&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In fact, you can reproduce something similar to the example above that you did manually:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codes&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4    0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5    4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6    4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7    1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8    4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;9    2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: int8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All that you need to do to exactly mimic the earlier manual output is to reorder the codes:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reorder_categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codes&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4    2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7    1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8    3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;9    4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: int8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that the dtype is NumPy&amp;rsquo;s &lt;code&gt;int8&lt;/code&gt;, an &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.10.0/user/basics.types.html&quot;&gt;8-bit signed integer&lt;/a&gt; that can take on values from -127 to 128.  (Only a single byte is needed to represent a value in memory.  64-bit signed &lt;code&gt;ints&lt;/code&gt; would be overkill in terms of memory usage.)  Our rough-hewn example resulted in &lt;code&gt;int64&lt;/code&gt; data by default, whereas Pandas is smart enough to downcast categorical data to the smallest numerical dtype possible.&lt;/p&gt;
&lt;p&gt;Most of the attributes for &lt;code&gt;.cat&lt;/code&gt; are related to viewing and manipulating the underlying categories themselves:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;add_categories&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;as_ordered&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;as_unordered&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;categories&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;codes&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;ordered&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;remove_categories&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;remove_unused_categories&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;rename_categories&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;reorder_categories&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;set_categories&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a few caveats, though.  Categorical data is generally less flexible.  For instance, if inserting previously unseen values, you need to add this value to a &lt;code&gt;.categories&lt;/code&gt; container first:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a new color&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ValueError: Cannot setitem on a Categorical with a new category,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;set the categories first&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a new color&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccolors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a new color&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# No more ValueError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you plan to be setting values or reshaping data rather than deriving new computations, &lt;code&gt;Categorical&lt;/code&gt; types may be less nimble.&lt;/p&gt;
&lt;h2 id=&quot;6-introspect-groupby-objects-via-iteration&quot;&gt;6. Introspect Groupby Objects via Iteration&lt;/h2&gt;
&lt;p&gt;When you call &lt;code&gt;df.groupby(&#39;x&#39;)&lt;/code&gt;, the resulting Pandas &lt;code&gt;groupby&lt;/code&gt; objects can be a bit opaque.  This object is lazily instantiated and doesn&amp;rsquo;t have any meaningful representation on its own.&lt;/p&gt;
&lt;p&gt;You can demonstrate with the abalone dataset from &lt;a href=&quot;#1-configure-options-settings-at-interpreter-startup&quot;&gt;example 1&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abalone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ring_quartile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abalone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grouped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abalone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ring_quartile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grouped&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x11c1169b0&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alright, now you have a &lt;code&gt;groupby&lt;/code&gt; object, but what is this thing, and how do I see it?&lt;/p&gt;
&lt;p&gt;Before you call something like &lt;code&gt;grouped.apply(func)&lt;/code&gt;, you can take advantage of the fact that &lt;code&gt;groupby&lt;/code&gt; objects are iterable:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grouped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;        Groupby iterator&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;        Returns&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        -------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        Generator yielding sequence of (name, subsetted object)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        for each group&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each &amp;ldquo;thing&amp;rdquo; yielded by &lt;code&gt;grouped.__iter__()&lt;/code&gt; is a tuple of &lt;code&gt;(name, subsetted object)&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is the value of the column on which you&amp;rsquo;re grouping, and &lt;code&gt;subsetted object&lt;/code&gt; is a DataFrame that is a subset of the original DataFrame based on whatever grouping condition you specify.  That is, the data gets chunked by group:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grouped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Ring quartile: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{idx}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlargest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Ring quartile: 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;----------------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     sex  length   diam  height  weight  rings ring_quartile&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2619   M   0.690  0.540   0.185  1.7100      8             1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1044   M   0.690  0.525   0.175  1.7005      8             1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1026   M   0.645  0.520   0.175  1.5610      8             1&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Ring quartile: 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;----------------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     sex  length  diam  height  weight  rings ring_quartile&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2811   M   0.725  0.57   0.190  2.3305      9             2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1426   F   0.745  0.57   0.215  2.2500      9             2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1821   F   0.720  0.55   0.195  2.0730      9             2&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Ring quartile: 3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;----------------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     sex  length  diam  height  weight  rings ring_quartile&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1209   F   0.780  0.63   0.215   2.657     11             3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1051   F   0.735  0.60   0.220   2.555     11             3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3715   M   0.780  0.60   0.210   2.548     11             3&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Ring quartile: 4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;----------------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     sex  length   diam  height  weight  rings ring_quartile&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;891    M   0.730  0.595    0.23  2.8255     17             4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1763   M   0.775  0.630    0.25  2.7795     12             4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;165    M   0.725  0.570    0.19  2.5500     14             4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Relatedly, a &lt;code&gt;groupby&lt;/code&gt; object also has &lt;code&gt;.groups&lt;/code&gt; and a group-getter, &lt;code&gt;.get_group()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grouped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dict_keys([1, 2, 3, 4])&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grouped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   sex  length   diam  height  weight  rings ring_quartile&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    F   0.530  0.420   0.135  0.6770      9             2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8    M   0.475  0.370   0.125  0.5095      9             2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;19   M   0.450  0.320   0.100  0.3810      9             2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;23   F   0.550  0.415   0.135  0.7635      9             2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;39   M   0.355  0.290   0.090  0.3275      9             2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can help you be a little more confident that the operation you&amp;rsquo;re performing is the one you want:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grouped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;median&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;               height         weight&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                 mean median    mean  median&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ring_quartile&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1              0.1066  0.105  0.4324  0.3685&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2              0.1427  0.145  0.8520  0.8440&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3              0.1572  0.155  1.0669  1.0645&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4              0.1648  0.165  1.1149  1.0655&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No matter what calculation you perform on &lt;code&gt;grouped&lt;/code&gt;, be it a single Pandas method or custom-built function, each of these &amp;ldquo;sub-frames&amp;rdquo; is passed one-by-one as an argument to that callable.  This is where the term &amp;ldquo;split-apply-combine&amp;rdquo; comes from: break the data up by groups, perform a per-group calculation, and recombine in some aggregated fashion.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re having trouble visualizing exactly what the groups will actually look like, simply iterating over them and printing a few can be tremendously useful.&lt;/p&gt;
&lt;h2 id=&quot;7-use-this-mapping-trick-for-membership-binning&quot;&gt;7. Use This Mapping Trick for Membership Binning&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say that you have a Series and a corresponding &amp;ldquo;mapping table&amp;rdquo; where each value belongs to a multi-member group, or to no groups at all:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;United States&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Canada&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mexico&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Belgium&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;United Kingdom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Thailand&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;North America&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;United States&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Canada&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mexico&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Greenland&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Europe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;France&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Germany&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;United Kingdom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Belgium&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words, you need to map &lt;code&gt;countries&lt;/code&gt; to the following result:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;0    North America&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    North America&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    North America&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3           Europe&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4           Europe&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5            other&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What you need here is a function similar to Pandas&amp;rsquo; &lt;code&gt;pd.cut()&lt;/code&gt;, but for binning based on categorical membership.  You can use &lt;code&gt;pd.Series.map()&lt;/code&gt;, which you already saw in &lt;a href=&quot;#5-use-categorical-data-to-save-on-time-and-space&quot;&gt;example #5&lt;/a&gt;, to mimic this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;membership_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;fillvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Reverse &amp;amp; expand the dictionary key-value pairs&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should be significantly faster than a nested Python loop through &lt;code&gt;groups&lt;/code&gt; for each country in &lt;code&gt;countries&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a test drive:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;membership_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fillvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;other&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    North America&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    North America&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    North America&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3           Europe&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4           Europe&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5            other&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s break down what&amp;rsquo;s going on here.  (Sidenote: this is a great place to step into a function&amp;rsquo;s scope with Python&amp;rsquo;s debugger, &lt;a href=&quot;https://realpython.com/python-debugging-pdb/&quot;&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt;, to inspect what variables are local to the function.)&lt;/p&gt;
&lt;p&gt;The objective is to map each group in &lt;code&gt;groups&lt;/code&gt; to an integer.  However, &lt;code&gt;Series.map()&lt;/code&gt; will not recognize &lt;code&gt;&#39;ab&#39;&lt;/code&gt;&amp;mdash;it needs the broken-out version with each character from each group mapped to an integer.  This is what the &lt;a href=&quot;https://docs.python.org/tutorial/datastructures.html#dictionaries&quot;&gt;dictionary comprehension&lt;/a&gt; is doing:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 0, &amp;#39;b&amp;#39;: 0, &amp;#39;c&amp;#39;: 1, &amp;#39;d&amp;#39;: 1, &amp;#39;x&amp;#39;: 2, &amp;#39;y&amp;#39;: 2, &amp;#39;z&amp;#39;: 2}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This dictionary can be passed to &lt;code&gt;s.map()&lt;/code&gt; to map or &amp;ldquo;translate&amp;rdquo; its values to their corresponding group indices.&lt;/p&gt;
&lt;h2 id=&quot;8-understand-how-pandas-uses-boolean-operators&quot;&gt;8. Understand How Pandas Uses Boolean Operators&lt;/h2&gt;
&lt;p&gt;You may be familiar with Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/reference/expressions.html#operator-precedence&quot;&gt;operator precedence&lt;/a&gt;, where &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and &lt;code&gt;or&lt;/code&gt; have lower precedence than arithmetic operators such as &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;.  Consider the two statements below, where &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; have higher precedence than the &lt;code&gt;and&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Evaluates to &amp;quot;False and True&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Evaluates to 4 &amp;lt; 5 &amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It&amp;rsquo;s not specifically Pandas-related, but &lt;code&gt;3 and 5&lt;/code&gt; evaluates to &lt;code&gt;5&lt;/code&gt; because of short-circuit evaluation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The return value of a short-circuit operator is the last evaluated argument.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#more-on-conditions&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Pandas (and NumPy, on which Pandas is built) does not use &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, or &lt;code&gt;not&lt;/code&gt;.  Instead, it uses &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt;, respectively, which are normal, bona fide Python bitwise operators.&lt;/p&gt;
&lt;p&gt;These operators are not &amp;ldquo;invented&amp;rdquo; by Pandas.  Rather, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt; are valid Python built-in operators that have higher (rather than lower) precedence than arithmetic operators.  (Pandas overrides dunder methods like &lt;code&gt;.__ror__()&lt;/code&gt; that map to the &lt;code&gt;|&lt;/code&gt; operator.)  To sacrifice some detail, you can think of &amp;ldquo;bitwise&amp;rdquo; as &amp;ldquo;elementwise&amp;rdquo; as it relates to Pandas and NumPy:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0     True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: bool&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It pays to understand this concept in full.  Let&amp;rsquo;s say that you have a range-like Series:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would guess that you may have seen this exception raised at some point:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ValueError: The truth value of a Series is ambiguous.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Use a.empty, a.bool(), a.item(), a.any() or a.all().&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What&amp;rsquo;s happening here?  It&amp;rsquo;s helpful to incrementally bind the expression with parentheses, spelling out how Python expands this expression step by step:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# Same as above, original expression&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;# Modulo is most tightly binding here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# Bitwise-and is second-most-binding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Expand the statement&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# The `and` operator is least-binding&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The expression &lt;code&gt;s % 2 == 0 &amp;amp; s &amp;gt; 3&lt;/code&gt; is equivalent to (or gets treated as) &lt;code&gt;((s % 2) == (0 &amp;amp; s)) and ((0 &amp;amp; s) &amp;gt; 3)&lt;/code&gt;.  This is called &lt;a href=&quot;https://docs.python.org/reference/expressions.html#comparisons&quot;&gt;expansion&lt;/a&gt;: &lt;code&gt;x &amp;lt; y &amp;lt;= z&lt;/code&gt; is equivalent to &lt;code&gt;x &amp;lt; y and y &amp;lt;= z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Okay, now stop there, and let&amp;rsquo;s bring this back to Pandas-speak.  You have two Pandas Series that we&amp;rsquo;ll call &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# This will raise the same ValueError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You know that a statement of the form &lt;code&gt;left and right&lt;/code&gt; is truth-value testing both &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;, as in the following:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem is that Pandas developers intentionally don&amp;rsquo;t establish a truth-value (truthiness) for an entire Series.  Is a Series True or False?  Who knows?  The result is ambiguous:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ValueError: The truth value of a Series is ambiguous.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Use a.empty, a.bool(), a.item(), a.any() or a.all().&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only comparison that makes sense is an elementwise comparison.  That&amp;rsquo;s why, if an arithmetic operator is involved, &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing&quot;&gt;you&amp;rsquo;ll need parentheses&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4     True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6     True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8     True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;9    False&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: bool&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In short, if you see the &lt;code&gt;ValueError&lt;/code&gt; above pop up with boolean indexing, the first thing you should probably look to do is sprinkle in some needed parentheses.&lt;/p&gt;
&lt;h2 id=&quot;9-load-data-from-the-clipboard&quot;&gt;9. Load Data From the Clipboard&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a common situation to need to transfer data from a place like Excel or &lt;a href=&quot;https://realpython.com/setting-up-sublime-text-3-for-full-stack-python-development/&quot;&gt;Sublime Text&lt;/a&gt; to a Pandas data structure. Ideally, you want to do this without going through the intermediate step of saving the data to a file and afterwards reading in the file to Pandas.&lt;/p&gt;
&lt;p&gt;You can load in DataFrames from your computer&amp;rsquo;s clipboard data buffer with &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_clipboard.html&quot;&gt;&lt;code&gt;pd.read_clipboard()&lt;/code&gt;&lt;/a&gt;.  Its keyword arguments are passed on to &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_table.html&quot;&gt;&lt;code&gt;pd.read_table()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This allows you to copy structured text directly to a DataFrame or Series.  In Excel, the data would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/excel_data.5f5061328ba6.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/excel_data.5f5061328ba6.jpg&quot; width=&quot;576&quot; height=&quot;216&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/excel_data.5f5061328ba6.jpg&amp;amp;w=144&amp;amp;sig=8214bcbe5940bf96826c6541889af12e0583170c 144w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/excel_data.5f5061328ba6.jpg&amp;amp;w=288&amp;amp;sig=7562006cd05367a1db68afd4a812d0368075f9af 288w, https://files.realpython.com/media/excel_data.5f5061328ba6.jpg 576w&quot; sizes=&quot;75vw&quot; alt=&quot;Excel Clipboard Data&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Its plain-text representation (for example, in a text editor) would look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a   b           c       d
0   1           inf     1/1/00
2   7.389056099 N/A     5-Jan-13
4   54.59815003 nan     7/24/18
6   403.4287935 None    NaT
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simply highlight and copy the plain text above, and call &lt;code&gt;pd.read_clipboard()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_clipboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;na_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_dates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   a         b    c          d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0  0    1.0000  inf 2000-01-01&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1  2    7.3891  NaN 2013-01-05&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2  4   54.5982  NaN 2018-07-24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3  6  403.4288  NaN        NaT&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtypes&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;a             int64&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b           float64&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c           float64&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;d    datetime64[ns]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;10-write-pandas-objects-directly-to-compressed-format&quot;&gt;10. Write Pandas Objects Directly to Compressed Format&lt;/h2&gt;
&lt;p&gt;This one&amp;rsquo;s short and sweet to round out the list.  As of Pandas version 0.21.0, you can write Pandas objects directly to gzip, bz2, zip, or xz compression, rather than stashing the uncompressed file in memory and converting it.  Here&amp;rsquo;s an example using the &lt;code&gt;abalone&lt;/code&gt; data from &lt;a href=&quot;#1-configure-options-settings-at-interpreter-startup&quot;&gt;trick #1&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abalone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;df.json.gz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;records&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gzip&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, the size difference is 11.6x:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os.path&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abalone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;df.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;records&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;df.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;df.json.gz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;11.603035760226396&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;want-to-add-to-this-list-let-us-know&quot;&gt;Want to Add to This List? Let Us Know&lt;/h2&gt;
&lt;p&gt;Hopefully, you were able to pick up a couple of useful tricks from this list to lend your Pandas code better readability, versatility, and performance.&lt;/p&gt;
&lt;p&gt;If you have something up your sleeve that&amp;rsquo;s not covered here, please leave a suggestion in the comments or as a &lt;a href=&quot;https://gist.github.com/&quot;&gt;GitHub Gist&lt;/a&gt;.  We will gladly add to this list and give credit where it&amp;rsquo;s due.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Python Community Interview With Mariatta Wijaya</title>
      <id>https://realpython.com/interview-mariatta-wijaya/</id>
      <link href="https://realpython.com/interview-mariatta-wijaya/"/>
      <updated>2018-08-27T14:00:00+00:00</updated>
      <summary>Mariatta is a web developer at Zapier and volunteers much of her time to helping maintain Python as a core developer. In this interview we talk about her role as a Python core developer, as well as her love of GitHub bots and #icecreamselfies.</summary>
      <content type="html">
        &lt;p&gt;For this week&amp;rsquo;s community interview, I am joined by &lt;a href=&quot;https://twitter.com/mariatta&quot;&gt;Mariatta Wijaya&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mariatta is a web developer at Zapier. She also spends much of her time volunteering in the Python community: she is a core developer and contributes to conferences and Meetups. &lt;/p&gt;
&lt;p&gt;If you ever have the pleasure of meeting her, then you can join her in an &lt;a href=&quot;https://mariatta.ca/category/icecreamselfie.html&quot;&gt;#icecreamselfie&lt;/a&gt; or talk about her bots taking over GitHub. You can find Mariatta’s preferred contact links at the end of this interview.   &lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;Let’s start with an easy one. How’d you get into programming, and when did you start using Python?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-fluid w-25 float-right ml-3 rounded-circle&quot; src=&quot;https://files.realpython.com/media/WCS-d9_w_400x400.6db5e0896209.jpg&quot; width=&quot;400&quot; height=&quot;400&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/WCS-d9_w_400x400.6db5e0896209.jpg&amp;amp;w=100&amp;amp;sig=ddfb442e0c046be23f63b7f904f0663aa599ec3c 100w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/WCS-d9_w_400x400.6db5e0896209.jpg&amp;amp;w=200&amp;amp;sig=b89aa735b7e88fdaf3547d8387d6a7aa23b8d977 200w, https://files.realpython.com/media/WCS-d9_w_400x400.6db5e0896209.jpg 400w&quot; sizes=&quot;75vw&quot; alt=&quot;Mariatta Wijaya&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariatta:&lt;/strong&gt; I started around junior high school. We had extracurricular activities in my school, and one of them was &amp;ldquo;computer&amp;rdquo; class. At first, it was an introduction to MS-DOS and Windows. We were shown how to use WordStar and Lotus spreadsheets. (I&amp;rsquo;m really old.)&lt;/p&gt;
&lt;p&gt;Later on, we got introduced to programming with QBASIC. Sometime later, I got introduced to &amp;ldquo;the world wide web,&amp;rdquo; and I started learning HTML and how to build web pages on my own. After I finished high school, I moved to Canada and studied computer science.&lt;/p&gt;
&lt;p&gt;Before Python, I was a developer writing Windows and embedded apps, using the .NET Framework and C#. In 2008, I worked for a startup company working on a Windows project. When that project ended, they transferred me to a different team. &lt;/p&gt;
&lt;p&gt;This team was working on web-based apps using Python, &lt;a href=&quot;https://realpython.com/tutorials/django/&quot;&gt;Django&lt;/a&gt;, and &lt;a href=&quot;https://realpython.com/python-web-applications/#google-app-engine&quot;&gt;Google App Engine&lt;/a&gt;. I didn&amp;rsquo;t want to be looking for another job at the time. So I stayed around, started picking up Python, and began a new career path as a web developer.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;Most might know you for your work as a Python core developer. In fact, you did a talk at this year’s PyCon titled &lt;a href=&quot;https://www.youtube.com/watch?v=hhj7eb6TrtI&quot;&gt;What is a Python Core Developer?&lt;/a&gt; For those who haven’t seen your talk, what’s the TL;DR version, and what is your role as a core developer?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariatta:&lt;/strong&gt; The TL;DR version is that becoming a Python core developer comes with a lot of responsibilities, and it goes beyond just writing more code into CPython. In fact, writing code is the least we expect out of core developers nowadays. As a core dev, you&amp;rsquo;ll be expected to do more code reviews, mentoring, providing feedback, and making decisions, instead of writing more PRs yourself.&lt;/p&gt;
&lt;p&gt;The other point that I want to highlight is that &lt;strong&gt;we&amp;rsquo;re all volunteers&lt;/strong&gt;. I am not employed by any corporation or &lt;a href=&quot;https://www.python.org/psf-landing/&quot;&gt;The PSF&lt;/a&gt; as a Python Core Developer. A lot of people still don&amp;rsquo;t realize this. Often, people write to the bug tracker as if they&amp;rsquo;re writing to customer support, expecting an immediate response, not taking no for an answer, and blaming us for various problems. Not only are we just volunteers doing this in our limited free time, but there are really very few of us compared the hundreds and thousands of users and contributors.&lt;/p&gt;
&lt;p&gt;As a core dev myself, I&amp;rsquo;ve been focusing more on helping with the workflow, to make it easier for core devs and contributors to contribute and collaborate. I write utility tools and bots like &lt;a href=&quot;https://pypi.org/project/cherry-picker/&quot;&gt;cherry_picker&lt;/a&gt;, &lt;a href=&quot;https://github.com/python/miss-islington&quot;&gt;miss-islington&lt;/a&gt;, and recently the &lt;a href=&quot;https://check-python-cla.herokuapp.com/&quot;&gt;check_python_cla&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;I also focus on reviewing PRs from first-time contributors and documentation related issues. I like to make sure our devguide is up-to-date because that&amp;rsquo;s one of the first places we point contributors to when they have questions about our workflow.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also doing weekly Python office hours now, over at Zulipchat. It is every &lt;strong&gt;Thursday evening at 7 PM PST&lt;/strong&gt;. During that office hour, I&amp;rsquo;ll be available via DM, and I can respond and help in an almost real-time manner. During other times, I usually go to Zulip only once per day.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;As if you didn’t already do enough for the community, you also co-organize the PyLadies Vancouver Meetup and the PyCascades conference. Can you tell us a little bit about how you got involved with those, and what people can expect if they’re looking to attend?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariatta:&lt;/strong&gt; The story of how &lt;a href=&quot;https://2019.pycascades.com/&quot;&gt;PyCascades&lt;/a&gt; was founded was unclear, even to me. All I know is, one day I got an email from Seb, introducing me to the rest of the folks (Alan, Eric, Don, and Bryan), and it seems as if there&amp;rsquo;s an email thread that says, &amp;ldquo;Let&amp;rsquo;s do a Python conference in the Pacific-Northwest.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I replied to it almost immediately. I didn&amp;rsquo;t think too much about what the responsibilities were going to be, or even how much work I&amp;rsquo;d have to put into it. I just thought, “Why not?” Within a couple weeks, we started scouting venues in Vancouver, and everything else just fell into place.&lt;/p&gt;
&lt;p&gt;PyCascades is a one of a kind conference. We focus on highlighting first-time speakers and speakers from the Pacific-Northwest community. CFP for PyCascades 2019 is open from August 20 to the end of October. Please do submit a talk! I&amp;rsquo;m not involved in the program committee this year. Instead, I&amp;rsquo;m going to focus on mentoring speakers, especially first-time speakers and those from an underrepresented group.&lt;/p&gt;
&lt;p&gt;I only started helping out with &lt;a href=&quot;http://www.pyladies.com/locations/vancouver/&quot;&gt;PyLadies Vancouver&lt;/a&gt; about two years ago. At the time, there were two organizers—and one of them had just stepped down—and they put up a call for more organizers. By then, even though I hadn&amp;rsquo;t been attending many Meetups, I&amp;rsquo;d benefited from PyLadies enough in the form of receiving financial aid for PyCon. So I just felt like it was an opportunity for me to pay it forward and give back to the community by also actively participating and ensuring the continuity of the Vancouver PyLadies community, instead of just waiting for the next Meetup to happen.&lt;/p&gt;
&lt;p&gt;Our community has grown bigger now. I&amp;rsquo;ve looked back at our events over the past years, and we&amp;rsquo;ve put out so many great talks and workshops. We&amp;rsquo;ve had Python core developers and international PyCon speakers at our events. I&amp;rsquo;m quite proud of that!&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;Looking through your Github, I can see that you seem to have an affinity for bots. You maintain two for the Python core devs Github, but you have many more on your Github. I’m intrigued to find out what you find so alluring about them?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariatta:&lt;/strong&gt; My first introduction to GitHub bots was when I started contributing to coala two years ago. They have a GitHub bot that is very much like a personal assistant to all the maintainers. The bot was always up and running, replying and commenting. At the time, I didn&amp;rsquo;t even realize that bots could do all of those things, so I was quite impressed and fascinated with how it all worked. I always thought the bot was a very complicated system.&lt;/p&gt;
&lt;p&gt;As I started helping to create and maintain Python&amp;rsquo;s GitHub bots, I&amp;rsquo;ve gained a better understanding of the bot&amp;rsquo;s architecture, and I was able to satisfy my initial curiosity about how GitHub bots work.&lt;/p&gt;
&lt;p&gt;But then I started thinking differently. Now that I know how they work, and I know what GitHub APIs are available, I keep asking myself, &amp;ldquo;What else can be automated? What else can I delegate to the bots? Have we really reached peak automation?&amp;rdquo; Turns out there are a whole lot of tasks that I can automate, and all I need is Python. And now that I know which tasks can be done by bots, I get grumpy when I have to do some of those chores myself.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;I can’t have this interview with you without talking about ice cream selfies. It has become somewhat of a tradition of yours. There might be a few puzzled looks from our readers about now, so why don’t you explain all about the awesome &lt;a href=&quot;https://mariatta.ca/category/icecreamselfie.html&quot;&gt;#icecreamselfie&lt;/a&gt;?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariatta:&lt;/strong&gt; The first &lt;a href=&quot;https://mariatta.ca/category/icecreamselfie.html&quot;&gt;#icecreamselfie&lt;/a&gt; I did was right after DjangoCon in Philadelphia, July 2016. I had just given my first ever conference talk, and I was feeling fabulous and just wanted to celebrate. Plus, it was a hot summer day. So I went to an ice cream shop near my hotel. Somehow, I just decided to take a selfie with the ice cream. It was actually unusual for me. Normally I just take pictures of the food, not a selfie. &lt;/p&gt;
&lt;p&gt;My next talk was for PyCaribbean, in Puerto Rico. I wasn&amp;rsquo;t even planning for ice cream, we (myself and my roommate, and fellow speaker, Kim Crayton) were enjoying ourselves at the beach, and an ice cream cart showed up. &lt;/p&gt;
&lt;p&gt;After that, I went to Italy for DjangoCon Europe and PyCon Italy. Of course, I had to have some gelato. No trip to Italy was going to be complete without it. Even at that point, I didn&amp;rsquo;t think of the #icecreamselfie as a tradition. The selfies have been more of a coincidence.&lt;/p&gt;
&lt;p&gt;But after my talk at PyCon US, which was a pretty emotional talk, all I could think about was that I needed to go for ice cream. So my friend Jeff took me to this place he knew in Portland. And I felt really good after that ice cream! From then on, the #icecreamselfie became an official tradition for myself, and I go to great lengths researching the best ice cream right after I get a talk accepted.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;And now for my last question: what other hobbies and interests do you have, aside from Python? Any you’d like to share and/or plug?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariatta:&lt;/strong&gt; I like doing nature walks, traveling, and going camping. I have a strange hobby of taking pictures of my food, and I post them to Instagram. My other favorite pastime is playing Mahjong. Not Mahjong solitaire (a matching game), but Hong Kong style Mahjong. I still have trouble finding people who&amp;rsquo;d play this game with me.&lt;/p&gt;
&lt;p&gt;If people are looking for ways to support me, please do send me a &lt;a href=&quot;https://www.happinesspackets.io/&quot;&gt;happiness packet&lt;/a&gt;, support me on &lt;a href=&quot;https://www.patreon.com/Mariatta&quot;&gt;Patreon&lt;/a&gt;, or &lt;a href=&quot;https://saythanks.io/to/Mariatta&quot;&gt;just say thanks&lt;/a&gt;. &lt;/p&gt;
&lt;p class=&quot;mt-4&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Thank you Mariatta for the interview. You can find &lt;a href=&quot;https://twitter.com/mariatta&quot;&gt;Mariatta on Twitter&lt;/a&gt; or her on &lt;a href=&quot;https://mariatta.ca/&quot;&gt;her website&lt;/a&gt; if you would like to know more about her. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If there is someone you would like me to interview in the future, reach out to me in the comments below, or &lt;a href=&quot;https://twitter.com/endlesstrax&quot;&gt;send me a message on Twitter&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Primer on Python Decorators</title>
      <id>https://realpython.com/primer-on-python-decorators/</id>
      <link href="https://realpython.com/primer-on-python-decorators/"/>
      <updated>2018-08-22T16:00:00+00:00</updated>
      <summary>In this introductory tutorial, we&#39;ll look at what Python decorators are and how to create and use them.</summary>
      <content type="html">
        &lt;p&gt;In this tutorial on decorators, we&amp;rsquo;ll look at what they are and how to create and use them. Decorators provide a simple syntax for calling &lt;a href=&quot;http://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;higher-order functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By definition, a decorator is a function that takes another function and extends the behavior of the latter function without explicitly modifying it.&lt;/p&gt;
&lt;p&gt;This sounds confusing, but it&amp;rsquo;s really not, especially after you&amp;rsquo;ve seen a few examples of how decorators work. You can find all the examples from this article &lt;a href=&quot;https://github.com/realpython/materials/tree/master/primer-on-python-decorators&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;&quot; class=&quot;alert-link&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-power-of-decorators-fixed&quot; data-focus=&quot;false&quot;&gt;Click here to get access to a free &quot;The Power of Python Decorators&quot; guide&lt;/a&gt; that shows you 3 advanced decorator patterns and techniques you can use to write to cleaner and more Pythonic programs.&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;p&gt;&lt;strong&gt;Decorators Cheat Sheet:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/optins/view/decorators-cheatsheet/&quot; class=&quot;alert-link&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-decorators-cheatsheet&quot; data-focus=&quot;false&quot;&gt;Click here to get access to a free 3-page Python decorators cheat sheet&lt;/a&gt; that summarizes the techniques explained in this tutorial.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Updates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;08/22/2018:&lt;/em&gt; Major update adding more examples and more advanced decorators&lt;/li&gt;
&lt;li&gt;&lt;em&gt;01/12/2016:&lt;/em&gt; Updated examples to Python 3 (v3.5.1) syntax and added a new example&lt;/li&gt;
&lt;li&gt;&lt;em&gt;11/01/2015:&lt;/em&gt; Added a brief explanation on the &lt;code&gt;functools.wraps()&lt;/code&gt; decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;
&lt;p&gt;Before you can understand decorators, you must first understand how functions work. For our purposes, &lt;strong&gt;a function returns a value based on the given arguments&lt;/strong&gt;. Here is a very simple example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In general, functions in Python may also have side effects rather than just turning an input into an output. The &lt;code&gt;print()&lt;/code&gt; function is a basic example of this: it returns &lt;code&gt;None&lt;/code&gt; while having the side effect of outputting something to the console. However, to understand decorators, it is enough to think about functions as something that turns given arguments into a value.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;, you work (almost) only with pure functions without side effects. While not a purely functional language, Python supports many of the functional programming concepts, including functions as first-class objects.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;first-class-objects&quot;&gt;First-Class Objects&lt;/h3&gt;
&lt;p&gt;In Python, functions are &lt;a href=&quot;https://dbader.org/blog/python-first-class-functions&quot;&gt;first-class objects&lt;/a&gt;. This means that &lt;strong&gt;functions can be passed around and used as arguments&lt;/strong&gt;, just like &lt;a href=&quot;https://realpython.com/python-data-types/&quot;&gt;any other object (string, int, float, list, and so on)&lt;/a&gt;. Consider the following three functions:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;be_awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Yo &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, together we are the awesomest!&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet_bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;say_hello()&lt;/code&gt; and &lt;code&gt;be_awesome()&lt;/code&gt; are regular functions that expect a name given as a string. The &lt;code&gt;greet_bob()&lt;/code&gt; function however, expects a function as its argument. We can, for instance, pass it the &lt;code&gt;say_hello()&lt;/code&gt; or the &lt;code&gt;be_awesome()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet_bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Hello Bob&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet_bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be_awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Yo Bob, together we are the awesomest!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;greet_bob(say_hello)&lt;/code&gt; refers to two functions, but in different ways: &lt;code&gt;greet_bob()&lt;/code&gt; and &lt;code&gt;say_hello&lt;/code&gt;. The &lt;code&gt;say_hello&lt;/code&gt; function is named without parentheses. This means that only a reference to the function is passed. The function is not executed. The &lt;code&gt;greet_bob()&lt;/code&gt; function, on the other hand, is written with parentheses, so it will be called as usual.&lt;/p&gt;
&lt;h3 id=&quot;inner-functions&quot;&gt;Inner Functions&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s possible to &lt;strong&gt;define functions inside other functions&lt;/strong&gt;. Such functions are called &lt;a href=&quot;https://realpython.com/inner-functions-what-are-they-good-for/&quot;&gt;inner functions&lt;/a&gt;. Here&amp;rsquo;s an example of a function with two inner functions:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Printing from the parent() function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Printing from the first_child() function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Printing from the second_child() function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;second_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happens when you call the &lt;code&gt;parent()&lt;/code&gt; function? Think about this for a minute. The output will be as follows:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Printing from the parent() function&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Printing from the second_child() function&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Printing from the first_child() function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the order in which the inner functions are defined does not matter. Like with any other functions, the printing only happens when the inner functions are executed.&lt;/p&gt;
&lt;p&gt;Furthermore, the inner functions are not defined until the parent function is called. They are locally scoped to &lt;code&gt;parent()&lt;/code&gt;: they only exist inside the &lt;code&gt;parent()&lt;/code&gt; function as local variables. Try calling &lt;code&gt;first_child()&lt;/code&gt;. You should get an error:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;NameError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;name &amp;#39;first_child&amp;#39; is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whenever you call &lt;code&gt;parent()&lt;/code&gt;, the inner functions &lt;code&gt;first_child()&lt;/code&gt; and &lt;code&gt;second_child()&lt;/code&gt; are also called. But because of their local scope, they aren&amp;rsquo;t available outside of the &lt;code&gt;parent()&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id=&quot;returning-functions-from-functions&quot;&gt;Returning Functions From Functions&lt;/h3&gt;
&lt;p&gt;Python also allows you to use functions as return values. The following example returns one of the inner functions from the outer &lt;code&gt;parent()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, I am Emma&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Call me Liam&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_child&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_child&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that you are returning &lt;code&gt;first_child&lt;/code&gt; without the parentheses. Recall that this means that you are &lt;strong&gt;returning a reference to the function &lt;code&gt;first_child&lt;/code&gt;&lt;/strong&gt;. In contrast &lt;code&gt;first_child()&lt;/code&gt; with parentheses refers to the result of evaluating the function. This can be seen in the following example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;function parent.&amp;lt;locals&amp;gt;.first_child at 0x7f599f1e2e18&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;function parent.&amp;lt;locals&amp;gt;.second_child at 0x7f599dad5268&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The somewhat cryptic output simply means that the &lt;code&gt;first&lt;/code&gt; variable refers to the local &lt;code&gt;first_child()&lt;/code&gt; function inside of &lt;code&gt;parent()&lt;/code&gt;, while &lt;code&gt;second&lt;/code&gt; points to &lt;code&gt;second_child()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can now use &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; as if they are regular functions, even though the functions they point to can&amp;rsquo;t be accessed directly:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Hi, I am Emma&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Call me Liam&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, note that in the earlier example you executed the inner functions within the parent function, for instance &lt;code&gt;first_child()&lt;/code&gt;. However, in this last example, you did not add parentheses to the inner functions&amp;mdash;&lt;code&gt;first_child&lt;/code&gt;&amp;mdash;upon returning.  That way, you got a reference to each function that you could call in the future. Make sense?&lt;/p&gt;
&lt;h2 id=&quot;simple-decorators&quot;&gt;Simple Decorators&lt;/h2&gt;
&lt;p&gt;Now that you&amp;rsquo;ve seen that functions are just like any other object in Python, you&amp;rsquo;re ready to move on and see the magical beast that is the Python decorator. Let&amp;rsquo;s start with an example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Something is happening before the function is called.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Something is happening after the function is called.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whee!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Can you guess what happens when you call &lt;code&gt;say_whee()&lt;/code&gt;? Try it:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Something is happening before the function is called.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Something is happening after the function is called.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To understand what&amp;rsquo;s going on here, look back at the previous examples. We are literally just applying everything you have learned so far.&lt;/p&gt;
&lt;p&gt;The so-called decoration happens at the following line:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In effect, the name &lt;code&gt;say_whee&lt;/code&gt; now points to the &lt;code&gt;wrapper()&lt;/code&gt; inner function. Remember that you return &lt;code&gt;wrapper&lt;/code&gt; as a function when you call &lt;code&gt;my_decorator(say_whee)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;function my_decorator.&amp;lt;locals&amp;gt;.wrapper at 0x7f3c5dfd42f0&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, &lt;code&gt;wrapper()&lt;/code&gt; has a reference to the original &lt;code&gt;say_whee()&lt;/code&gt; as &lt;code&gt;func&lt;/code&gt;, and calls that function between the two calls to &lt;code&gt;print()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Put simply: &lt;strong&gt;decorators wrap a function, modifying its behavior.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before moving on, let&amp;rsquo;s have a look at a second example. Because &lt;code&gt;wrapper()&lt;/code&gt; is a regular Python function, the way a decorator modifies a function can change dynamically. So as not to disturb your neighbors, the following example will only run the decorated code during the day:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;not_during_the_night&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Hush, the neighbors are asleep&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whee!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_during_the_night&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you try to call &lt;code&gt;say_whee()&lt;/code&gt; after bedtime, nothing will happen:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;syntactic-sugar&quot;&gt;Syntactic Sugar!&lt;/h3&gt;
&lt;p&gt;The way you decorated &lt;code&gt;say_whee()&lt;/code&gt; above is a little clunky. First of all, you end up typing the name &lt;code&gt;say_whee&lt;/code&gt; three times. In addition, the decoration gets a bit hidden away below the definition of the function.&lt;/p&gt;
&lt;p&gt;Instead, Python allows you to &lt;strong&gt;use decorators in a simpler way with the &lt;code&gt;@&lt;/code&gt; symbol&lt;/strong&gt;, sometimes called the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318/#background&quot;&gt;&amp;ldquo;pie&amp;rdquo; syntax&lt;/a&gt;. The following example does the exact same thing as the first decorator example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Something is happening before the function is called.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Something is happening after the function is called.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@my_decorator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whee!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, &lt;code&gt;@my_decorator&lt;/code&gt; is just an easier way of saying &lt;code&gt;say_whee = my_decorator(say_whee)&lt;/code&gt;. It&amp;rsquo;s how you apply a decorator to a function.&lt;/p&gt;
&lt;h3 id=&quot;reusing-decorators&quot;&gt;Reusing Decorators&lt;/h3&gt;
&lt;p&gt;Recall that a decorator is just a regular Python function. All the usual tools for easy reusability are available. Let&amp;rsquo;s move the decorator to its own &lt;a href=&quot;https://realpython.com/python-modules-packages/&quot;&gt;module&lt;/a&gt; that can be used in many other functions.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;code&gt;decorators.py&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_do_twice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can name your inner function whatever you want, and a generic name like &lt;code&gt;wrapper()&lt;/code&gt; is usually okay. You&amp;rsquo;ll see a lot of decorators in this article. To keep them apart, we&amp;rsquo;ll name the inner function with the same name as the decorator but with a &lt;code&gt;wrapper_&lt;/code&gt; prefix.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can now use this new decorator in other files by doing a regular import:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_twice&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@do_twice&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whee!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run this example, you should see that the original &lt;code&gt;say_whee()&lt;/code&gt; is executed twice:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;&quot; class=&quot;alert-link&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-power-of-decorators-fixed&quot; data-focus=&quot;false&quot;&gt;Click here to get access to a free &quot;The Power of Python Decorators&quot; guide&lt;/a&gt; that shows you 3 advanced decorator patterns and techniques you can use to write to cleaner and more Pythonic programs.&lt;/p&gt;&lt;/div&gt;

&lt;h3 id=&quot;decorating-functions-with-arguments&quot;&gt;Decorating Functions With Arguments&lt;/h3&gt;
&lt;p&gt;Say that you have a function that accepts some arguments. Can you still decorate it? Let&amp;rsquo;s try:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_twice&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@do_twice&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, running this code raises an error:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;wrapper_do_twice() takes 0 positional arguments but 1 was given&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem is that the inner function &lt;code&gt;wrapper_do_twice()&lt;/code&gt; does not take any arguments, but &lt;code&gt;name=&quot;World&quot;&lt;/code&gt; was passed to it. You could fix this by letting &lt;code&gt;wrapper_do_twice()&lt;/code&gt; accept one argument, but then it would not work for the &lt;code&gt;say_whee()&lt;/code&gt; function you created earlier.&lt;/p&gt;
&lt;p&gt;The solution is to use &lt;a href=&quot;https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters&quot;&gt;&lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;&lt;/a&gt; in the inner wrapper function. Then it will accept an arbitrary number of positional and keyword arguments. Rewrite &lt;code&gt;decorators.py&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_do_twice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;wrapper_do_twice()&lt;/code&gt; inner function now accepts any number of arguments and passes them on to the function it decorates. Now both your &lt;code&gt;say_whee()&lt;/code&gt; and &lt;code&gt;greet()&lt;/code&gt; examples works:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;returning-values-from-decorated-functions&quot;&gt;Returning Values From Decorated Functions&lt;/h3&gt;
&lt;p&gt;What happens to the return value of decorated functions? Well, that&amp;rsquo;s up to the decorator to decide. Let&amp;rsquo;s say you decorate a simple function as follows:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_twice&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@do_twice&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return_greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Creating greeting&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Try to use it:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi_adam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating greeting&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating greeting&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi_adam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oops, your decorator ate the return value from the function.&lt;/p&gt;
&lt;p&gt;Because the &lt;code&gt;do_twice_wrapper()&lt;/code&gt; doesn&amp;rsquo;t explicitly return a value, the call &lt;code&gt;return_greeting(&quot;Adam&quot;)&lt;/code&gt; ended up returning &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To fix this, you need to &lt;strong&gt;make sure the wrapper function returns the return value of the decorated function&lt;/strong&gt;. Change your &lt;code&gt;decorators.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_do_twice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The return value from the last execution of the function is returned:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating greeting&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating greeting&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Hi Adam&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;who-are-you-really&quot;&gt;Who Are You, Really?&lt;/h3&gt;
&lt;p&gt;A great convenience when working with Python, especially in the interactive shell, is its powerful introspection ability. &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_introspection&quot;&gt;Introspection&lt;/a&gt; is the ability of an object to know about its own attributes at runtime. For instance, a function knows its own name and documentation:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;built-in function print&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;print&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Help on built-in function print in module builtins:&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;print(...)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    &amp;lt;full help message&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The introspection works for functions you define yourself as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;function do_twice.&amp;lt;locals&amp;gt;.wrapper_do_twice at 0x7f43700e52f0&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;wrapper_do_twice&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Help on function wrapper_do_twice in module decorators:&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;wrapper_do_twice()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, after being decorated, &lt;code&gt;say_whee()&lt;/code&gt; has gotten very confused about its identity. It now reports being the &lt;code&gt;wrapper_do_twice()&lt;/code&gt; inner function inside the &lt;code&gt;do_twice()&lt;/code&gt; decorator. Although technically true, this is not very useful information.&lt;/p&gt;
&lt;p&gt;To fix this, decorators should use the &lt;a href=&quot;https://docs.python.org/library/functools.html#functools.wraps&quot;&gt;&lt;code&gt;@functools.wraps&lt;/code&gt;&lt;/a&gt; decorator, which will preserve information about the original function. Update &lt;code&gt;decorators.py&lt;/code&gt; again:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_do_twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_do_twice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You do not need to change anything about the decorated &lt;code&gt;say_whee()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;function say_whee at 0x7ff79a60f2f0&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;say_whee&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Help on function say_whee in module whee:&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;say_whee()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much better! Now &lt;code&gt;say_whee()&lt;/code&gt; is still itself after decoration.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Detail:&lt;/strong&gt; The &lt;code&gt;@functools.wraps&lt;/code&gt; decorator &lt;a href=&quot;https://github.com/python/cpython/blob/5d4cb54800966947db2e86f65fb109c5067076be/Lib/functools.py#L34&quot;&gt;uses&lt;/a&gt; the function &lt;code&gt;functools.update_wrapper()&lt;/code&gt; to update special attributes like &lt;code&gt;__name__&lt;/code&gt; and &lt;code&gt;__doc__&lt;/code&gt; that are used in the introspection.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;a-few-real-world-examples&quot;&gt;A Few Real World Examples&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at a few more useful examples of decorators. You&amp;rsquo;ll notice that they&amp;rsquo;ll mainly follow the same pattern that you&amp;rsquo;ve learned so far:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Do something before&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Do something after&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_decorator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This formula is a good boilerplate template for building more complex decorators.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In later examples, we will assume that these decorators are saved in your &lt;code&gt;decorators.py&lt;/code&gt; file as well. Recall that you can download &lt;a href=&quot;https://github.com/realpython/materials/tree/master/primer-on-python-decorators&quot;&gt;all the examples in this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;timing-functions&quot;&gt;Timing Functions&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by creating a &lt;code&gt;@timer&lt;/code&gt; decorator. It will measure the time a function takes to execute and print the duration to the console. Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Print the runtime of the decorated function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perf_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perf_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# 2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;run_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 3&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Finished &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{func.__name__!r}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{run_time:.4f}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; secs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_timer&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@timer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waste_some_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This decorator works by storing the time just before the function starts running (at the line marked &lt;code&gt;# 1&lt;/code&gt;) and just after the function finishes (at &lt;code&gt;# 2&lt;/code&gt;). The time the function takes is then the difference between the two (at &lt;code&gt;# 3&lt;/code&gt;). We use the &lt;a href=&quot;https://docs.python.org/library/time.html#time.perf_counter&quot;&gt;&lt;code&gt;time.perf_counter()&lt;/code&gt;&lt;/a&gt; function, which does a good job of measuring time intervals. Here are some examples of timings:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waste_some_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Finished &amp;#39;waste_some_time&amp;#39; in 0.0010 secs&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waste_some_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Finished &amp;#39;waste_some_time&amp;#39; in 0.3260 secs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run it yourself. Work through the code line by line. Make sure you understand how it works. Don&amp;rsquo;t worry if you don&amp;rsquo;t get it, though. Decorators are advanced beings. Try to sleep on it or make a drawing of the program flow.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;@timer&lt;/code&gt; decorator is great if you just want to get an idea about the runtime of your functions. If you want to do more precise measurements of code, you should instead consider the &lt;a href=&quot;https://docs.python.org/library/timeit.html&quot;&gt;&lt;code&gt;timeit&lt;/code&gt; module&lt;/a&gt; in the standard library. It temporarily disables garbage collection and runs multiple trials to strip out noise from quick function calls.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;debugging-code&quot;&gt;Debugging Code&lt;/h3&gt;
&lt;p&gt;The following &lt;code&gt;@debug&lt;/code&gt; decorator will print the arguments a function is called with as well as its return value every time the function is called:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Print the function signature and return value&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;args_repr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kwargs_repr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{k}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{v!r}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args_repr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs_repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 3&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Calling &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{func.__name__}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{signature}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{func.__name__!r}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; returned &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{value!r}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_debug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The signature is created by joining the &lt;a href=&quot;https://dbader.org/blog/python-repr-vs-str&quot;&gt;string representations&lt;/a&gt; of all the arguments. The numbers in the following list correspond to the numbered comments in the code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a list of the positional arguments. Use &lt;code&gt;repr()&lt;/code&gt; to get a nice string representing each argument.&lt;/li&gt;
&lt;li&gt;Create a list of the keyword arguments. The &lt;a href=&quot;https://realpython.com/python-f-strings/&quot;&gt;f-string&lt;/a&gt; formats each argument as &lt;code&gt;key=value&lt;/code&gt; where the &lt;code&gt;!r&lt;/code&gt; specifier means that &lt;code&gt;repr()&lt;/code&gt; is used to represent the value.&lt;/li&gt;
&lt;li&gt;The lists of positional and keyword arguments is joined together to one signature string with each argument separated by a comma.&lt;/li&gt;
&lt;li&gt;The return value is printed after the function is executed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s see how the decorator works in practice by applying it to a simple function with one position and one keyword argument:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@debug&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Howdy &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whoa &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;! &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{age}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; already, you are growing up!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note how the &lt;code&gt;@debug&lt;/code&gt; decorator prints the signature and return value of the &lt;code&gt;make_greeting()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Benjamin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling make_greeting(&amp;#39;Benjamin&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;make_greeting&amp;#39; returned &amp;#39;Howdy Benjamin!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Howdy Benjamin!&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Richard&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling make_greeting(&amp;#39;Richard&amp;#39;, age=112)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;make_greeting&amp;#39; returned &amp;#39;Whoa Richard! 112 already, you are growing up!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Whoa Richard! 112 already, you are growing up!&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dorrisile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling make_greeting(name=&amp;#39;Dorrisile&amp;#39;, age=116)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;make_greeting&amp;#39; returned &amp;#39;Whoa Dorrisile! 116 already, you are growing up!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Whoa Dorrisile! 116 already, you are growing up!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example might not seem immediately useful since the &lt;code&gt;@debug&lt;/code&gt; decorator just repeats what you just wrote. It&amp;rsquo;s more powerful when applied to small convenience functions that you don&amp;rsquo;t call directly yourself.&lt;/p&gt;
&lt;p&gt;The following example calculates an approximation to the &lt;a href=&quot;https://en.wikipedia.org/wiki/E_(mathematical_constant)&quot;&gt;mathematical constant &lt;em&gt;e&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Apply a decorator to a standard library function&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;approximate_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example also shows how you can apply a decorator to a function that has already been defined. The approximation of &lt;em&gt;e&lt;/em&gt; is based on the following &lt;a href=&quot;https://en.wikipedia.org/wiki/E_(mathematical_constant)&quot;&gt;series expansion&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png&quot; width=&quot;1935&quot; height=&quot;228&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/e_series_long.7ce8d6492b4f.png&amp;amp;w=483&amp;amp;sig=78370c9bf4724332d985cae21d5c7ed5de9f5397 483w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/e_series_long.7ce8d6492b4f.png&amp;amp;w=967&amp;amp;sig=13a780a5e9682c6ac8ee58960d9d82bb0d01284e 967w, https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png 1935w&quot; sizes=&quot;75vw&quot; alt=&quot;Series for calculating mathematical constant e&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When calling the &lt;code&gt;approximate_e()&lt;/code&gt; function, you can see the &lt;code&gt;@debug&lt;/code&gt; decorator at work:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;approximate_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling factorial(0)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;factorial&amp;#39; returned 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling factorial(1)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;factorial&amp;#39; returned 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling factorial(2)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;factorial&amp;#39; returned 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling factorial(3)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;factorial&amp;#39; returned 6&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling factorial(4)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;factorial&amp;#39; returned 24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2.708333333333333&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, you get a decent approximation to the true value &lt;em&gt;e&lt;/em&gt; = 2.718281828, adding only 5 terms.&lt;/p&gt;
&lt;h3 id=&quot;slowing-down-code&quot;&gt;Slowing Down Code&lt;/h3&gt;
&lt;p&gt;This next example might not seem very useful. Why would you want to slow down your Python code? Probably the most common use case is that you want to rate-limit a function that continuously checks whether a resource&amp;mdash;like a web page&amp;mdash;has changed. The &lt;code&gt;@slow_down&lt;/code&gt; decorator will sleep one second before it calls the decorated function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;slow_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Sleep 1 second before calling the function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_slow_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_slow_down&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@slow_down&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Liftoff!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see the effect of the &lt;code&gt;@slow_down&lt;/code&gt; decorator, you really need to run the example yourself:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Liftoff!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;countdown()&lt;/code&gt; function is a recursive function. In other words, it&amp;rsquo;s a function calling itself. To learn more about recursive functions in Python, see our guide on &lt;a href=&quot;https://realpython.com/python-thinking-recursively/&quot;&gt;Thinking Recursively in Python&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;@slow_down&lt;/code&gt; decorator always sleeps for one second. &lt;a href=&quot;#slowing-down-code-revisited&quot;&gt;Later&lt;/a&gt;, you&amp;rsquo;ll see how to control the rate by passing an argument to the decorator.&lt;/p&gt;
&lt;h3 id=&quot;registering-plugins&quot;&gt;Registering Plugins&lt;/h3&gt;
&lt;p&gt;Decorators don&amp;rsquo;t have to wrap the function they&amp;rsquo;re decorating. They can also simply register that a function exists and return it unwrapped. This can be used, for instance, to create a light-weight plug-in architecture:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PLUGINS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Register a function as a plug-in&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PLUGINS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@register&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@register&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;be_awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Yo &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, together we are the awesomest!&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomly_greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLUGINS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Using &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{greeter!r}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;@register&lt;/code&gt; decorator simply stores a reference to the decorated function in the global &lt;code&gt;PLUGINS&lt;/code&gt; dict. Note that you do not have to write an inner function or use &lt;code&gt;@functools.wraps&lt;/code&gt; in this example because you are returning the original function unmodified.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;randomly_greet()&lt;/code&gt; function randomly chooses one of the registered functions to use. Note that the &lt;code&gt;PLUGINS&lt;/code&gt; dictionary already contains references to each function object that is registered as a plugin:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLUGINS&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;say_hello&amp;#39;: &amp;lt;function say_hello at 0x7f768eae6730&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;be_awesome&amp;#39;: &amp;lt;function be_awesome at 0x7f768eae67b8&amp;gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomly_greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Using &amp;#39;say_hello&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Hello Alice&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The main benefit of this simple plugin architecture is that you do not need to maintain a list of which plugins exist. That list is created when the plugins register themselves. This makes it trivial to add a new plugin: just define the function and decorate it with &lt;code&gt;@register&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are familiar with &lt;code&gt;globals()&lt;/code&gt; in Python, you might see some similarities to how the plugin architecture works. &lt;code&gt;globals()&lt;/code&gt; gives access to all global variables in the current scope, including your plugins:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{..., # Lots of variables not shown here.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;say_hello&amp;#39;: &amp;lt;function say_hello at 0x7f768eae6730&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;be_awesome&amp;#39;: &amp;lt;function be_awesome at 0x7f768eae67b8&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;#39;randomly_greet&amp;#39;: &amp;lt;function randomly_greet at 0x7f768eae6840&amp;gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the &lt;code&gt;@register&lt;/code&gt; decorator, you can create your own curated list of interesting variables, effectively hand-picking some functions from &lt;code&gt;globals()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;is-the-user-logged-in&quot;&gt;Is the User Logged In?&lt;/h3&gt;
&lt;p&gt;The final example before moving on to some fancier decorators is commonly used when working with a web framework. In this example, we are using &lt;a href=&quot;https://realpython.com/tutorials/flask/&quot;&gt;Flask&lt;/a&gt; to set up a &lt;code&gt;/secret&lt;/code&gt; web page that should only be visible to users that are logged in or otherwise authenticated:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Make sure user is logged in before proceeding&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_login_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_login_required&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/secret&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@login_required&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this gives an idea about how to add authentication to your web framework, you should usually not write these types of decorators yourself. For Flask, you can use &lt;a href=&quot;https://flask-login.readthedocs.io/en/latest/#flask_login.login_required&quot;&gt;the Flask-Login extension&lt;/a&gt; instead, which adds more security and functionality.&lt;/p&gt;
&lt;h2 id=&quot;fancy-decorators&quot;&gt;Fancy Decorators&lt;/h2&gt;
&lt;p&gt;So far, you&amp;rsquo;ve seen how to create simple decorators. You already have a pretty good understanding of what decorators are and how they work. Feel free to take a break from this article to practice everything you&amp;rsquo;ve learned.&lt;/p&gt;
&lt;p&gt;In the second part of this tutorial, we&amp;rsquo;ll explore more advanced features, including how to use the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#decorating-classes&quot;&gt;Decorators on classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nesting-decorators&quot;&gt;Several decorators on one function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#decorators-with-arguments&quot;&gt;Decorators with arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#both-please-but-never-mind-the-bread&quot;&gt;Decorators that can optionally take arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stateful-decorators&quot;&gt;Stateful decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#classes-as-decorators&quot;&gt;Classes as decorators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;decorating-classes&quot;&gt;Decorating Classes&lt;/h3&gt;
&lt;p&gt;There are two different ways you can use decorators on classes. The first one is very close to what you have already done with functions: you can &lt;strong&gt;decorate the methods of a class&lt;/strong&gt;. This was &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318/#motivation&quot;&gt;one of the motivations&lt;/a&gt; for introducing decorators back in the day.&lt;/p&gt;
&lt;p&gt;Some commonly used decorators that are even built-ins in Python are &lt;a href=&quot;https://realpython.com/instance-class-and-static-methods-demystified/&quot;&gt;&lt;code&gt;@classmethod&lt;/code&gt;, &lt;code&gt;@staticmethod&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/library/functions.html#property&quot;&gt;&lt;code&gt;@property&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;@classmethod&lt;/code&gt; and &lt;code&gt;@staticmethod&lt;/code&gt; decorators are used to define methods inside a class namespace that are not connected to a particular instance of that class. The &lt;code&gt;@property&lt;/code&gt; decorator is used to customize &lt;a href=&quot;https://docs.python.org/howto/descriptor.html#properties&quot;&gt;getters and setters&lt;/a&gt; for class attributes. Expand the box below for an example using these decorators.&lt;/p&gt;
&lt;div class=&quot;card mb-3&quot; id=&quot;collapse_card0584b0&quot;&gt;
&lt;div class=&quot;card-header border-0&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse0584b0&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse0584b0&quot;&gt;Example using built-in class decorators&lt;/button&gt; &lt;button class=&quot;btn btn-link float-right&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse0584b0&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse0584b0&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;collapse0584b0&quot; class=&quot;collapse&quot; data-parent=&quot;#collapse_card0584b0&quot;&gt;&lt;div class=&quot;card-body&quot; markdown=&quot;1&quot;&gt;

&lt;p&gt;The following definition of a &lt;code&gt;Circle&lt;/code&gt; class uses the &lt;code&gt;@classmethod&lt;/code&gt;, &lt;code&gt;@staticmethod&lt;/code&gt;, and &lt;code&gt;@property&lt;/code&gt; decorators:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Get value of radius&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_radius&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Set radius, raise error if negative&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Radius must be positive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Calculate area inside circle&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cylinder_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Calculate volume of cylinder with circle as base&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unit_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Factory method creating a circle with radius 1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Value of π, could use math.pi instead though&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1415926535&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.cylinder_volume()&lt;/code&gt; is a regular method.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.radius&lt;/code&gt; is a mutable property: it can be set to a different value. However, by defining a setter method, we can do some error testing to make sure it&amp;rsquo;s not set to a nonsensical negative number. Properties are accessed as attributes without parentheses.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.area&lt;/code&gt; is an immutable property: properties without &lt;code&gt;.setter()&lt;/code&gt; methods can&amp;rsquo;t be changed. Even though it is defined as a method, it can be retrieved as an attribute without parentheses.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.unit_circle()&lt;/code&gt; is a class method. It&amp;rsquo;s not bound to one particular instance of &lt;code&gt;Circle&lt;/code&gt;. Class methods are often used as factory methods that can create specific instances of the class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pi()&lt;/code&gt; is a static method. It&amp;rsquo;s not really dependent on the &lt;code&gt;Circle&lt;/code&gt; class, except that it is part of its namespace. Static methods can be called on either an instance or the class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;Circle&lt;/code&gt; class can for example be used as follows:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;78.5398163375&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;12.566370614&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;AttributeError: can&amp;#39;t set attribute&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cylinder_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;50.265482456&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ValueError: Radius must be positive&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3.1415926535&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3.1415926535&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s define a class where we decorate some of its methods using the &lt;a href=&quot;#debugging-code&quot;&gt;&lt;code&gt;@debug&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#timing-functions&quot;&gt;&lt;code&gt;@timer&lt;/code&gt;&lt;/a&gt; decorators from &lt;a href=&quot;#a-few-real-world-examples&quot;&gt;earlier&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeWaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@debug&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@timer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waste_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this class, you can see the effect of the decorators:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeWaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling __init__(&amp;lt;time_waster.TimeWaster object at 0x7efccce03908&amp;gt;, 1000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;__init__&amp;#39; returned None&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waste_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Finished &amp;#39;waste_time&amp;#39; in 0.3376 secs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The other way to use decorators on classes is to &lt;strong&gt;decorate the whole class&lt;/strong&gt;. This is, for example, done in the new &lt;a href=&quot;https://realpython.com/python-data-classes/&quot;&gt;&lt;code&gt;dataclasses&lt;/code&gt; module&lt;/a&gt; in &lt;a href=&quot;https://realpython.com/python37-new-features/&quot;&gt;Python 3.7&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dataclasses&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlayingCard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The meaning of the syntax is similar to the function decorators. In the example above, you could have done the decoration by writing &lt;code&gt;PlayingCard = dataclass(PlayingCard)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.python.org/dev/peps/pep-3129/#rationale&quot;&gt;common use of class decorators&lt;/a&gt; is to be a simpler alternative to some use-cases of &lt;a href=&quot;https://realpython.com/python-metaclasses/&quot;&gt;metaclasses&lt;/a&gt;. In both cases, you are changing the definition of a class dynamically.&lt;/p&gt;
&lt;p&gt;Writing a class decorator is very similar to writing a function decorator. The only difference is that the decorator will receive a class and not a function as an argument. In fact, all the decorators &lt;a href=&quot;#a-few-real-world-examples&quot;&gt;you saw above&lt;/a&gt; will work as class decorators. When you are using them on a class instead of a function, their effect might not be what you want. In the following example, the &lt;code&gt;@timer&lt;/code&gt; decorator is applied to a class:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@timer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeWaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waste_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Decorating a class does not decorate its methods. Recall that &lt;code&gt;@timer&lt;/code&gt; is just shorthand for &lt;code&gt;TimeWaster = timer(TimeWaster)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;@timer&lt;/code&gt; only measures the time it takes to instantiate the class:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeWaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Finished &amp;#39;TimeWaster&amp;#39; in 0.0000 secs&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waste_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#creating-singletons&quot;&gt;Later&lt;/a&gt;, you will see an example defining a proper class decorator, namely &lt;code&gt;@singleton&lt;/code&gt;, which ensures that there is only one instance of a class.&lt;/p&gt;
&lt;h3 id=&quot;nesting-decorators&quot;&gt;Nesting Decorators&lt;/h3&gt;
&lt;p&gt;You can &lt;strong&gt;apply several decorators&lt;/strong&gt; to a function by stacking them on top of each other:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_twice&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@debug&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@do_twice&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Think about this as the decorators being executed in the order they are listed. In other words, &lt;code&gt;@debug&lt;/code&gt; calls &lt;code&gt;@do_twice&lt;/code&gt;, which calls &lt;code&gt;greet()&lt;/code&gt;, or &lt;code&gt;debug(do_twice(greet()))&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Eva&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling greet(&amp;#39;Eva&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Eva&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Eva&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;greet&amp;#39; returned None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Observe the difference if we change the order of &lt;code&gt;@debug&lt;/code&gt; and &lt;code&gt;@do_twice&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_twice&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@do_twice&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@debug&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, &lt;code&gt;@do_twice&lt;/code&gt; will be applied to &lt;code&gt;@debug&lt;/code&gt; as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Eva&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling greet(&amp;#39;Eva&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Eva&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;greet&amp;#39; returned None&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling greet(&amp;#39;Eva&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Eva&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;greet&amp;#39; returned None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;decorators-with-arguments&quot;&gt;Decorators With Arguments&lt;/h3&gt;
&lt;p&gt;Sometimes, it&amp;rsquo;s useful to &lt;strong&gt;pass arguments to your decorators&lt;/strong&gt;. For instance, &lt;code&gt;@do_twice&lt;/code&gt; could be extended to a &lt;code&gt;@repeat(num_times)&lt;/code&gt; decorator. The number of times to execute the decorated function could then be given as an argument.&lt;/p&gt;
&lt;p&gt;This would allow you to do something like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Think about how you could achieve this.&lt;/p&gt;
&lt;p&gt;So far, the name written after the &lt;code&gt;@&lt;/code&gt; has referred to a function object that can be called with another function. To be consistent, you then need &lt;code&gt;repeat(num_times=4)&lt;/code&gt; to return a function object that can act as a decorator. Luckily, you &lt;a href=&quot;#returning-functions-from-functions&quot;&gt;already know how to return functions&lt;/a&gt;! In general, you want something like the following:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Create and return a wrapper function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_repeat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Typically, the decorator creates and returns an inner wrapper function, so writing the example out in full will give you an inner function within an inner function. While this might sound like the programming equivalent of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inception&quot;&gt;Inception movie&lt;/a&gt;, we&amp;rsquo;ll untangle it all in a moment:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_repeat&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_repeat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks a little messy, but we have only put the same decorator pattern you have seen many times by now inside one additional &lt;code&gt;def&lt;/code&gt; that handles the arguments to the decorator. Let&amp;rsquo;s start with the innermost function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;wrapper_repeat()&lt;/code&gt; function takes arbitrary arguments and returns the value of the decorated function, &lt;code&gt;func()&lt;/code&gt;. This wrapper function also contains the loop that calls the decorated function &lt;code&gt;num_times&lt;/code&gt; times. This is no different from the earlier wrapper functions you have seen, except that it is using the &lt;code&gt;num_times&lt;/code&gt; parameter that must be supplied from the outside.&lt;/p&gt;
&lt;p&gt;One step out, you&amp;rsquo;ll find the decorator function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_repeat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, &lt;code&gt;decorator_repeat()&lt;/code&gt; looks exactly like the decorator functions you have written earlier, except that it&amp;rsquo;s named differently. That&amp;rsquo;s because we reserve the base name&amp;mdash;&lt;code&gt;repeat()&lt;/code&gt;&amp;mdash;for the outermost function, which is the one the user will call.&lt;/p&gt;
&lt;p&gt;As you have already seen, the outermost function returns a reference to the decorator function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_repeat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a few subtle things happening in the &lt;code&gt;repeat()&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defining &lt;code&gt;decorator_repeat()&lt;/code&gt; as an inner function means that &lt;code&gt;repeat()&lt;/code&gt; will refer to a function object&amp;mdash;&lt;code&gt;decorator_repeat&lt;/code&gt;. Earlier, we used &lt;code&gt;repeat&lt;/code&gt; without parentheses to refer to the function object. The added parentheses are necessary when defining decorators that take arguments.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;num_times&lt;/code&gt; argument is seemingly not used in &lt;code&gt;repeat()&lt;/code&gt; itself. But by passing &lt;code&gt;num_times&lt;/code&gt; a &lt;a href=&quot;https://realpython.com/inner-functions-what-are-they-good-for/&quot;&gt;closure&lt;/a&gt; is created where the value of &lt;code&gt;num_times&lt;/code&gt; is stored until it will be used later by &lt;code&gt;wrapper_repeat()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With everything set up, let&amp;rsquo;s see if the results are as expected:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just the result we were aiming for.&lt;/p&gt;
&lt;h3 id=&quot;both-please-but-never-mind-the-bread&quot;&gt;Both Please, But Never Mind the Bread&lt;/h3&gt;
&lt;p&gt;With a little bit of care, you can also define &lt;strong&gt;decorators that can be used both with and without arguments&lt;/strong&gt;. Most likely, you don&amp;rsquo;t need this, but it is nice to have the flexibility.&lt;/p&gt;
&lt;p&gt;As you saw in the previous section, when a decorator uses arguments, you need to add an extra outer function. The challenge is for your code to figure out if the decorator has been called with or without arguments.&lt;/p&gt;
&lt;p&gt;Since the function to decorate is only passed in directly if the decorator is called without arguments, the function must be an optional argument. This means that the decorator arguments must all be specified by keyword. You can enforce this with the special &lt;code&gt;*&lt;/code&gt; syntax, which means that &lt;a href=&quot;https://www.python.org/dev/peps/pep-3102/&quot;&gt;all following parameters are keyword-only&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kw1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kw2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Create and return a wrapper function.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_name&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# 2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, the &lt;code&gt;_func&lt;/code&gt; argument acts as a marker, noting whether the decorator has been called with arguments or not:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;name&lt;/code&gt; has been called without arguments, the decorated function will be passed in as &lt;code&gt;_func&lt;/code&gt;. If it has been called with arguments, then &lt;code&gt;_func&lt;/code&gt; will be &lt;code&gt;None&lt;/code&gt;, and some of the keyword arguments may have been changed from their default values. The &lt;code&gt;*&lt;/code&gt; in the argument list means that the remaining arguments can&amp;rsquo;t be called as positional arguments.&lt;/li&gt;
&lt;li&gt;In this case, the decorator was called with arguments. Return a decorator function that can read and return a function.&lt;/li&gt;
&lt;li&gt;In this case, the decorator was called without arguments. Apply the decorator to the function immediately.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using this boilerplate on the &lt;code&gt;@repeat&lt;/code&gt; decorator in the previous section, you can write the following:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_repeat&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_repeat&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compare this with the original &lt;code&gt;@repeat&lt;/code&gt;. The only changes are the added &lt;code&gt;_func&lt;/code&gt; parameter and the &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; at the end.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dabeaz/python-cookbook/blob/master/src/9/defining_a_decorator_that_takes_an_optional_argument/example.py&quot;&gt;Recipe 9.6&lt;/a&gt; of the excellent &lt;a href=&quot;https://realpython.com/asins/1449340377/&quot;&gt;Python Cookbook&lt;/a&gt; shows an alternative solution using &lt;a href=&quot;https://docs.python.org/library/functools.html#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These examples show that &lt;code&gt;@repeat&lt;/code&gt; can now be used with or without arguments:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@repeat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whee!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recall that the default value of &lt;code&gt;num_times&lt;/code&gt; is 2:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Penny&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Penny&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Penny&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Penny&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;stateful-decorators&quot;&gt;Stateful Decorators&lt;/h3&gt;
&lt;p&gt;Sometimes, it&amp;rsquo;s useful to have &lt;strong&gt;a decorator that can keep track of state&lt;/strong&gt;. As a simple example, we will create a decorator that counts the number of times a function is called.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In &lt;a href=&quot;#functions&quot;&gt;the beginning of this guide&lt;/a&gt;, we talked about pure functions returning a value based on given arguments. Stateful decorators are quite the opposite, where the return value will depend on the current state, as well as the given arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the &lt;a href=&quot;#classes-as-decorators&quot;&gt;next section&lt;/a&gt;, you will see how to use classes to keep state. But in simple cases, you can also get away with using &lt;a href=&quot;https://www.python.org/dev/peps/pep-0232/&quot;&gt;function attributes&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_count_calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wrapper_count_calls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_calls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Call &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{wrapper_count_calls.num_calls}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{func.__name__!r}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wrapper_count_calls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_calls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_count_calls&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@count_calls&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whee!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The state&amp;mdash;the number of calls to the function&amp;mdash;is stored in the function attribute &lt;code&gt;.num_calls&lt;/code&gt; on the wrapper function. Here is the effect of using it:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Call 1 of &amp;#39;say_whee&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Call 2 of &amp;#39;say_whee&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_calls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;classes-as-decorators&quot;&gt;Classes as Decorators&lt;/h3&gt;
&lt;p&gt;The typical way to maintain state is by &lt;a href=&quot;https://realpython.com/python3-object-oriented-programming/&quot;&gt;using classes&lt;/a&gt;. In this section, you&amp;rsquo;ll see how to rewrite the &lt;code&gt;@count_calls&lt;/code&gt; example from the previous section &lt;strong&gt;using a class as a decorator&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Recall that the decorator syntax &lt;code&gt;@my_decorator&lt;/code&gt; is just an easier way of saying &lt;code&gt;func = my_decorator(func)&lt;/code&gt;. Therefore, if &lt;code&gt;my_decorator&lt;/code&gt; is a class, it needs to take &lt;code&gt;func&lt;/code&gt; as an argument in its &lt;code&gt;.__init__()&lt;/code&gt; method. Furthermore, the class needs to be &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#emulating-callable-objects&quot;&gt;callable&lt;/a&gt; so that it can stand in for the decorated function.&lt;/p&gt;
&lt;p&gt;For a class to be callable, you implement the special &lt;code&gt;.__call__()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Current count is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{self.count}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.__call__()&lt;/code&gt; method is executed each time you try to call an instance of the class:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Current count is 1&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Current count is 2&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Therefore, a typical implementation of a decorator class needs to implement &lt;code&gt;.__init__()&lt;/code&gt; and &lt;code&gt;.__call__()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountCalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_calls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_calls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Call &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{self.num_calls}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{self.func.__name__!r}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@CountCalls&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Whee!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.__init__()&lt;/code&gt; method must store a reference to the function and can do any other necessary initialization. The &lt;code&gt;.__call__()&lt;/code&gt; method will be called instead of the decorated function. It does essentially the same thing as the &lt;code&gt;wrapper()&lt;/code&gt; function in our earlier examples. Note that you need to use the &lt;a href=&quot;https://docs.python.org/library/functools.html#functools.update_wrapper&quot;&gt;&lt;code&gt;functools.update_wrapper()&lt;/code&gt;&lt;/a&gt; function instead of &lt;code&gt;@functools.wraps&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;@CountCalls&lt;/code&gt; decorator works the same as the one in the previous section:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Call 1 of &amp;#39;say_whee&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Call 2 of &amp;#39;say_whee&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Whee!&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_whee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_calls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;more-real-world-examples&quot;&gt;More Real World Examples&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve come a far way now, having figured out how to create all kinds of decorators. Let&amp;rsquo;s wrap it up, putting our newfound knowledge into creating a few more examples that might actually be useful in the real world.&lt;/p&gt;
&lt;h3 id=&quot;slowing-down-code-revisited&quot;&gt;Slowing Down Code, Revisited&lt;/h3&gt;
&lt;p&gt;As noted earlier, our &lt;a href=&quot;#slowing-down-code&quot;&gt;previous implementation of &lt;code&gt;@slow_down&lt;/code&gt;&lt;/a&gt; always sleeps for one second. Now you know how to add parameters to decorators, so let&amp;rsquo;s rewrite &lt;code&gt;@slow_down&lt;/code&gt; using an optional &lt;code&gt;rate&lt;/code&gt; argument that controls how long it sleeps:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;slow_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Sleep given amount of seconds before calling the function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_slow_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_slow_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_slow_down&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_slow_down&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_slow_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re using the boilerplate introduced in the &lt;a href=&quot;#both-please-but-never-mind-the-bread&quot;&gt;Both Please, But Never Mind the Bread&lt;/a&gt; section to make &lt;code&gt;@slow_down&lt;/code&gt; callable both with and without arguments. The same recursive &lt;code&gt;countdown()&lt;/code&gt; function &lt;a href=&quot;#slowing-down-code&quot;&gt;as earlier&lt;/a&gt; now sleeps two seconds between each count:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@slow_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Liftoff!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As before, you must run the example yourself to see the effect of the decorator:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Liftoff!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-singletons&quot;&gt;Creating Singletons&lt;/h3&gt;
&lt;p&gt;A singleton is a class with only one instance. There are several singletons in Python that you use frequently, including &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;False&lt;/code&gt;. It is the fact that &lt;code&gt;None&lt;/code&gt; is a singleton that allows you to compare for &lt;code&gt;None&lt;/code&gt; using the &lt;code&gt;is&lt;/code&gt; keyword, like you saw in the &lt;a href=&quot;#both-please-but-never-mind-the-bread&quot;&gt;Both Please&lt;/a&gt; section:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code&gt;is&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; only for objects that are the exact same instance. The following &lt;code&gt;@singleton&lt;/code&gt; decorator turns a class into a singleton by storing the first instance of the class as an attribute. Later attempts at creating an instance simply return the stored instance:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Make a class a Singleton class (only one instance)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_singleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;wrapper_singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wrapper_singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_singleton&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@singleton&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, this class decorator follows the same template as our function decorators. The only difference is that we are using &lt;code&gt;cls&lt;/code&gt; instead of &lt;code&gt;func&lt;/code&gt; as the parameter name to indicate that it is meant to be a class decorator.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see if it works:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TheOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TheOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;140094218762280&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;140094218762280&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another_one&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It seems clear that &lt;code&gt;first_one&lt;/code&gt; is indeed the exact same instance as &lt;code&gt;another_one&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Singleton classes are not really used as often in Python as in other languages. The effect of a singleton is usually better implemented as a global variable in a module.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;caching-return-values&quot;&gt;Caching Return Values&lt;/h3&gt;
&lt;p&gt;Decorators can provide a nice mechanism for caching and memoization. As an example, let&amp;rsquo;s look at a &lt;a href=&quot;https://realpython.com/python-thinking-recursively/&quot;&gt;recursive&lt;/a&gt; definition of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci sequence&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_calls&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@count_calls&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the implementation is simple, its runtime performance is terrible:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;Lots of output from count_calls&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;55&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_calls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;177&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To calculate the tenth Fibonacci number, you should really only need to calculate the preceding Fibonacci numbers, but this implementation somehow needs a whopping 177 calculations. It gets worse quickly: 21891 calculations are needed for &lt;code&gt;fibonacci(20)&lt;/code&gt; and almost 2.7 million calculations for the 30th number. This is because the code keeps recalculating Fibonacci numbers that are already known.&lt;/p&gt;
&lt;p&gt;The usual solution is to implement Fibonacci numbers using a &lt;code&gt;for&lt;/code&gt; loop and a lookup table. However, simple caching of the calculations will also do the trick:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_calls&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Keep a cache of previous function calls&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;wrapper_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wrapper_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_cache&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@cache&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@count_calls&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The cache works as a lookup table, so now &lt;code&gt;fibonacci()&lt;/code&gt; only does the necessary calculations once:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Call 1 of &amp;#39;fibonacci&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Call 11 of &amp;#39;fibonacci&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;55&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that in the final call to &lt;code&gt;fibonacci(8)&lt;/code&gt;, no new calculations were needed, since the eighth Fibonacci number had already been calculated for &lt;code&gt;fibonacci(10)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the standard library, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)&quot;&gt;Least Recently Used (LRU) cache&lt;/a&gt; is available as &lt;a href=&quot;https://docs.python.org/library/functools.html#functools.lru_cache&quot;&gt;&lt;code&gt;@functools.lru_cache&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This decorator has more features than the one you saw above. You should use &lt;code&gt;@functools.lru_cache&lt;/code&gt; instead of writing your own cache decorator:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lru_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Calculating fibonacci(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{num}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;maxsize&lt;/code&gt; parameter specifies how many recent calls are cached. The default value is 128, but you can specify &lt;code&gt;maxsize=None&lt;/code&gt; to cache all function calls. However, be aware that this can cause memory problems if you are caching many large objects.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;.cache_info()&lt;/code&gt; method to see how the cache performs, and you can tune it if needed. In our example, we used an artificially small &lt;code&gt;maxsize&lt;/code&gt; to see the effect of elements being removed from the cache:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(10)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(9)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(8)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(7)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(6)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(5)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(4)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(3)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(2)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(1)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(0)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;55&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;21&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(5)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(4)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(3)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(2)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(1)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(0)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(8)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(7)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calculating fibonacci(6)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;21&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;CacheInfo(hits=17, misses=20, maxsize=4, currsize=4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;adding-information-about-units&quot;&gt;Adding Information About Units&lt;/h3&gt;
&lt;p&gt;The following example is somewhat similar to the &lt;a href=&quot;#registering-plugins&quot;&gt;Registering Plugins&lt;/a&gt; example from earlier, in that it does not really change the behavior of the decorated function. Instead, it simply adds &lt;code&gt;unit&lt;/code&gt; as a function attribute:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Register a unit on a function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_set_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_set_unit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following example calculates the volume of a cylinder based on its radius and height in centimeters:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@set_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cm^3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;.unit&lt;/code&gt; function attribute can later be accessed when needed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;141.3716694115407&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;cm^3&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that you could have achieved something similar using &lt;a href=&quot;https://www.python.org/dev/peps/pep-3107/&quot;&gt;function annotations&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;

&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cm^3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, since annotations are &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484/&quot;&gt;used for type hints&lt;/a&gt;, it would be hard to combine such units as annotations with static type checking.&lt;/p&gt;
&lt;p&gt;Units become even more powerful and fun when connected with a library that can convert between units. One such library is &lt;a href=&quot;http://pint.readthedocs.io/&quot;&gt;&lt;code&gt;pint&lt;/code&gt;&lt;/a&gt;. With &lt;code&gt;pint&lt;/code&gt; installed (&lt;a href=&quot;https://pypi.org/project/Pint/&quot;&gt;&lt;code&gt;pip install Pint&lt;/code&gt;&lt;/a&gt;), you can for instance convert the volume to cubic inches or gallons:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pint&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ureg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnitRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ureg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;Quantity(141.3716694115407, &amp;#39;centimeter ** 3&amp;#39;)&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cubic inches&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;Quantity(8.627028576414954, &amp;#39;inch ** 3&amp;#39;)&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gallons&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Magnitude&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0.0373464440537444&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could also modify the decorator to return a &lt;code&gt;pint&lt;/code&gt; &lt;a href=&quot;https://pint.readthedocs.io/en/latest/tutorial.html&quot;&gt;&lt;code&gt;Quantity&lt;/code&gt;&lt;/a&gt; directly. Such a &lt;code&gt;Quantity&lt;/code&gt; is made by multiplying a value with the unit. In &lt;code&gt;pint&lt;/code&gt;, units must be looked up in a &lt;code&gt;UnitRegistry&lt;/code&gt;. The registry is stored as a function attribute to avoid cluttering the namespace:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Have a function return a Quantity with given unit&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ureg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnitRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_use_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_use_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ureg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_use_unit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_use_unit&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@use_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;meters per second&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;average_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the &lt;code&gt;@use_unit&lt;/code&gt; decorator, converting units is practically effortless:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bolt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bolt&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;Quantity(10.438413361169102, &amp;#39;meter / second&amp;#39;)&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;km per hour&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;Quantity(37.578288100208766, &amp;#39;kilometer / hour&amp;#39;)&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mph&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Magnitude&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;23.350065679064745&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;validating-json&quot;&gt;Validating JSON&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s look at one last use case. Take a quick look at the following &lt;a href=&quot;https://realpython.com/tutorials/flask/&quot;&gt;Flask&lt;/a&gt; route handler:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/grade&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;student_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Update database&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;success!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we ensure that the key &lt;code&gt;student_id&lt;/code&gt; is part of the request. Although this validation works, it really does not belong in the function itself. Plus, perhaps there are other routes that use the exact same validation. So, let&amp;rsquo;s keep it &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt; and abstract out any unnecessary logic with a decorator. The following &lt;code&gt;@validate_json&lt;/code&gt; decorator will do the job:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_validate_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper_validate_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;json_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# 2&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper_validate_json&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_validate_json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code, the decorator takes a variable length list as an argument so that we can pass in as many string arguments as necessary, each representing a key used to validate the &lt;a href=&quot;https://realpython.com/python-json/&quot;&gt;JSON&lt;/a&gt; data:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The list of keys that must be present in the JSON is given as arguments to the decorator.&lt;/li&gt;
&lt;li&gt;The wrapper function validates that each expected key is present in the JSON data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The route handler can then focus on its real job&amp;mdash;updating grades&amp;mdash;as it can safely assume that JSON data are valid:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/grade&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@validate_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;student_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Update database.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;success!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This has been quite a journey! You started this tutorial by looking a little closer at functions, particularly how they can be defined inside other functions and passed around just like any other Python object. Then you learned about decorators and how to write them such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can be reused.&lt;/li&gt;
&lt;li&gt;They can decorate functions with arguments and return values.&lt;/li&gt;
&lt;li&gt;They can use &lt;code&gt;@functools.wraps&lt;/code&gt; to look more like the decorated function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the second part of the tutorial, you saw more advanced decorators and learned how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decorate classes&lt;/li&gt;
&lt;li&gt;Nest decorators&lt;/li&gt;
&lt;li&gt;Add arguments to decorators&lt;/li&gt;
&lt;li&gt;Keep state within decorators&lt;/li&gt;
&lt;li&gt;Use classes as decorators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You saw that, to define a decorator, you typically define a function returning a wrapper function. The wrapper function uses &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; to pass on arguments to the decorated function. If you want your decorator to also take arguments, you need to nest the wrapper function inside another function. In this case, you usually end up with three &lt;code&gt;return&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/realpython/materials/tree/master/primer-on-python-decorators&quot;&gt;code from this tutorial online&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;If you are still looking for more, our book &lt;a href=&quot;https://realpython.com/products/python-tricks-book/&quot;&gt;Python Tricks&lt;/a&gt; has a section on decorators, as does the &lt;a href=&quot;https://realpython.com/asins/1449340377/&quot;&gt;Python Cookbook&lt;/a&gt; by David Beazley and Brian K. Jones.&lt;/p&gt;
&lt;p&gt;For a deep dive into the historical discussion on how decorators should be implemented in Python, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318/&quot;&gt;PEP 318&lt;/a&gt; as well as the &lt;a href=&quot;https://wiki.python.org/moin/PythonDecorators&quot;&gt;Python Decorator Wiki&lt;/a&gt;. More examples of decorators can be found in the &lt;a href=&quot;https://wiki.python.org/moin/PythonDecoratorLibrary&quot;&gt;Python Decorator Library&lt;/a&gt;. The &lt;a href=&quot;https://github.com/micheles/decorator&quot;&gt;&lt;code&gt;decorator&lt;/code&gt; module&lt;/a&gt; can simplify creating your own decorators, and its &lt;a href=&quot;https://decorator.readthedocs.io&quot;&gt;documentation&lt;/a&gt; contains further decorator examples.&lt;/p&gt;
&lt;p&gt;Also, we&amp;rsquo;ve put together a short &amp;amp; sweet Python decorators cheat sheet for you:&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;p&gt;&lt;strong&gt;Decorators Cheat Sheet:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/optins/view/decorators-cheatsheet/&quot; class=&quot;alert-link&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-decorators-cheatsheet&quot; data-focus=&quot;false&quot;&gt;Click here to get access to a free 3-page Python decorators cheat sheet&lt;/a&gt; that summarizes the techniques explained in this tutorial.&lt;/p&gt;&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Sets in Python</title>
      <id>https://realpython.com/python-sets/</id>
      <link href="https://realpython.com/python-sets/"/>
      <updated>2018-08-20T14:00:00+00:00</updated>
      <summary>In this tutorial you&#39;ll learn how to work effectively with Python&#39;s set data type. You&#39;ll see how to define set objects in Python and discover the operations that they support and by the end of the tutorial you&#39;ll have a good feel for when a set is an appropriate choice in your own programs.</summary>
      <content type="html">
        &lt;p&gt;Perhaps you recall learning about &lt;strong&gt;sets&lt;/strong&gt; and &lt;strong&gt;set theory&lt;/strong&gt; at some point in your mathematical education. Maybe you even remember Venn diagrams:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/t.8b7abb515ae8.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/t.8b7abb515ae8.png&quot; width=&quot;992&quot; height=&quot;599&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.8b7abb515ae8.png&amp;amp;w=248&amp;amp;sig=8b44f616088daa1d4eb40d181c54a8c6b1f0192a 248w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.8b7abb515ae8.png&amp;amp;w=496&amp;amp;sig=72175d174b66501db94ab04ba265b0f44654b3a1 496w, https://files.realpython.com/media/t.8b7abb515ae8.png 992w&quot; sizes=&quot;75vw&quot; alt=&quot;Venn diagram&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If this doesn&amp;rsquo;t ring a bell, don&amp;rsquo;t worry!  This tutorial should still be easily accessible for you.&lt;/p&gt;
&lt;p&gt;In mathematics, a rigorous definition of a set can be abstract and difficult to grasp.  Practically though, a set can be thought of simply as a well-defined collection of distinct objects, typically called &lt;strong&gt;elements&lt;/strong&gt; or &lt;strong&gt;members&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Grouping objects into a set can be useful in programming as well, and Python provides a built-in set type to do so. Sets are distinguished from other object types by the unique operations that can be performed on them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;rsquo;s what you&amp;rsquo;ll learn in this tutorial:&lt;/strong&gt; You&amp;rsquo;ll see how to define &lt;strong&gt;set&lt;/strong&gt; objects in Python and discover the operations that they support.  As with the earlier tutorials on lists and dictionaries, when you are finished with this tutorial, you should have a good feel for when a set is an appropriate choice. You will also learn about &lt;strong&gt;frozen sets&lt;/strong&gt;, which are similar to sets except for one important detail.&lt;/p&gt;
&lt;h2 id=&quot;defining-a-set&quot;&gt;Defining a Set&lt;/h2&gt;
&lt;p&gt;Python&amp;rsquo;s built-in &lt;code&gt;set&lt;/code&gt; type has the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sets are unordered.&lt;/li&gt;
&lt;li&gt;Set elements are unique. Duplicate elements are not allowed.&lt;/li&gt;
&lt;li&gt;A set itself may be modified, but the elements contained in the set must be of an immutable type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s see what all that means, and how you can work with sets in Python.&lt;/p&gt;
&lt;p&gt;A set can be created in two ways.  First, you can define a set with the built-in &lt;code&gt;set()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, the argument &lt;code&gt;&amp;lt;iter&amp;gt;&lt;/code&gt; is an iterable&amp;mdash;again, for the moment, think list or tuple&amp;mdash;that generates the list of objects to be included in the set.  This is analogous to the &lt;code&gt;&amp;lt;iter&amp;gt;&lt;/code&gt; argument given to the &lt;code&gt;.extend()&lt;/code&gt; list method:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;qux&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;qux&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Strings are also iterable, so a string can be passed to &lt;code&gt;set()&lt;/code&gt; as well. You have already seen that &lt;code&gt;list(s)&lt;/code&gt; generates a list of the characters in the string &lt;code&gt;s&lt;/code&gt;. Similarly, &lt;code&gt;set(s)&lt;/code&gt; generates a set of the characters in &lt;code&gt;s&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;q&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;x&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;x&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;q&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that the resulting sets are unordered: the original order, as specified in the definition, is not necessarily preserved.  Additionally, duplicate values are only represented in the set once, as with the string &lt;code&gt;&#39;foo&#39;&lt;/code&gt; in the first two examples and the letter &lt;code&gt;&#39;u&#39;&lt;/code&gt; in the third.&lt;/p&gt;
&lt;p&gt;Alternately, a set can be defined with curly braces (&lt;code&gt;{}&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a set is defined this way, each &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; becomes a distinct element of the set, even if it is an iterable.  This behavior is similar to that of the &lt;code&gt;.append()&lt;/code&gt; list method.&lt;/p&gt;
&lt;p&gt;Thus, the sets shown above can also be defined like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;qux&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;x&amp;#39;, &amp;#39;q&amp;#39;, &amp;#39;u&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To recap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The argument to &lt;code&gt;set()&lt;/code&gt; is an iterable.  It generates a list of elements to be placed into the set.&lt;/li&gt;
&lt;li&gt;The objects in curly braces are placed into the set intact, even if they are iterable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observe the difference between these two set definitions:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;o&amp;#39;, &amp;#39;f&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A set can be empty.  However, recall that Python interprets empty curly braces (&lt;code&gt;{}&lt;/code&gt;) as an empty dictionary, so the only way to define an empty set is with the &lt;code&gt;set()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;set&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;set()&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An empty set is falsy in Boolean context:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;set()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might think the most intuitive sets would contain similar objects&amp;mdash;for example, even numbers or surnames:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;McArthur&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Wilson&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Johansson&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python does not require this, though. The elements in a set can be objects of different types:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{None, &amp;#39;foo&amp;#39;, 42, 3.14159}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;rsquo;t forget that set elements must be immutable.  For example, a tuple may be included in a set:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{42, &amp;#39;foo&amp;#39;, 3.14159, (1, 2, 3)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But lists and dictionaries are mutable, so they can&amp;rsquo;t be set elements:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#70&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unhashable type: &amp;#39;list&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#72&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unhashable type: &amp;#39;dict&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-size-and-membership&quot;&gt;Set Size and Membership&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;len()&lt;/code&gt; function returns the number of elements in a set, and the &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators can be used to test for membership:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;operating-on-a-set&quot;&gt;Operating on a Set&lt;/h2&gt;
&lt;p&gt;Many of the operations that can be used for Python&amp;rsquo;s other composite data types don&amp;rsquo;t make sense for sets.  For example, sets can&amp;rsquo;t be indexed or sliced.  However, Python provides a whole host of operations on set objects that generally mimic the &lt;a href=&quot;https://en.wikipedia.org/wiki/Set_(mathematics)#Basic_operations&quot;&gt;operations&lt;/a&gt; that are defined for mathematical sets.&lt;/p&gt;
&lt;h3 id=&quot;operators-vs-methods&quot;&gt;Operators vs. Methods&lt;/h3&gt;
&lt;p&gt;Most, though not quite all, set operations in Python can be performed in two different ways:  by operator or by method.  Let&amp;rsquo;s take a look at how these operators and methods work, using set union as an example.&lt;/p&gt;
&lt;p&gt;Given two sets, &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;, the union of &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; is a set consisting of all elements in either set.&lt;/p&gt;
&lt;p&gt;Consider these two sets:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The union of &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; is &lt;code&gt;{&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, &#39;qux&#39;, &#39;quux&#39;}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Notice that the element &lt;code&gt;&#39;baz&#39;&lt;/code&gt;, which appears in both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;, appears only once in the union.  Sets never contain duplicate values.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In Python, set union can be performed with the &lt;code&gt;|&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;baz&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Set union can also be obtained with the &lt;code&gt;.union()&lt;/code&gt; method. The method is invoked on one of the sets, and the other is passed as an argument:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;baz&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The way they are used in the examples above, the operator and method behave identically.  But there is a subtle difference between them.  When you use the &lt;code&gt;|&lt;/code&gt; operator, both operands must be sets.  The &lt;code&gt;.union()&lt;/code&gt; method, on the other hand, will take any iterable as an argument, convert it to a set, and then perform the union.  &lt;/p&gt;
&lt;p&gt;Observe the difference between these two statements:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#43&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unsupported operand type(s) for |: &amp;#39;set&amp;#39; and &amp;#39;tuple&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;baz&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both attempt to compute the union of &lt;code&gt;x1&lt;/code&gt; and the tuple &lt;code&gt;(&#39;baz&#39;, &#39;qux&#39;, &#39;quux&#39;)&lt;/code&gt;.  This fails with the &lt;code&gt;|&lt;/code&gt; operator but succeeds with the &lt;code&gt;.union()&lt;/code&gt; method.&lt;/p&gt;
&lt;h3 id=&quot;available-operators-and-methods&quot;&gt;Available Operators and Methods&lt;/h3&gt;
&lt;p&gt;Below is a list of the set operations available in Python.  Some are performed by operator, some by method, and some by both. The principle outlined above generally applies:  where a set is expected, methods will typically accept any iterable as an argument, but operators require actual sets as operands.&lt;/p&gt;
&lt;!-- union --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.union(x2[, x3 ...])&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 | x2 [| x3 ...]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compute the union of two or more sets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.ca57b915cec6.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.ca57b915cec6.png&quot; width=&quot;823&quot; height=&quot;560&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.ca57b915cec6.png&amp;amp;w=205&amp;amp;sig=28381987b190c76c0ecf4cb5083c853cdc39682e 205w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.ca57b915cec6.png&amp;amp;w=411&amp;amp;sig=cc769e7765aed3ac1e33b804d332696fc1af0b96 411w, https://files.realpython.com/media/t.ca57b915cec6.png 823w&quot; sizes=&quot;75vw&quot; alt=&quot;Set union&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Set Union&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;x1.union(x2)&lt;/code&gt; and &lt;code&gt;x1 | x2&lt;/code&gt; both return the set of all elements in either &lt;code&gt;x1&lt;/code&gt; or &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;bar&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;bar&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More than two sets may be specified with either the operator or the method:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{1, 2, 3, 4, 5, 6, 7}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{1, 2, 3, 4, 5, 6, 7}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The resulting set contains all elements that are present in any of the specified sets.&lt;/p&gt;
&lt;!-- intersection --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.intersection(x2[, x3 ...])&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 &amp;amp; x2 [&amp;amp; x3 ...]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compute the intersection of two or more sets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.9c6d33717cdc.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.9c6d33717cdc.png&quot; width=&quot;823&quot; height=&quot;560&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.9c6d33717cdc.png&amp;amp;w=205&amp;amp;sig=5e6cb2f89f3f835d7a681a37dfc716bc800f65e4 205w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.9c6d33717cdc.png&amp;amp;w=411&amp;amp;sig=d7e6f871ca7d81a31fe64a0cda47b55b3b336deb 411w, https://files.realpython.com/media/t.9c6d33717cdc.png 823w&quot; sizes=&quot;75vw&quot; alt=&quot;Set intersection&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Set Intersection&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;x1.intersection(x2)&lt;/code&gt; and &lt;code&gt;x1 &amp;amp; x2&lt;/code&gt; return the set of elements common to both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;baz&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;baz&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can specify multiple sets with the intersection method and operator, just like you can with set union:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{4}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{4}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The resulting set contains only elements that are present in all of the specified sets.&lt;/p&gt;
&lt;!-- difference --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.difference(x2[, x3 ...])&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 - x2 [- x3 ...]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compute the difference between two or more sets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.a90b4c323d99.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.a90b4c323d99.png&quot; width=&quot;823&quot; height=&quot;560&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.a90b4c323d99.png&amp;amp;w=205&amp;amp;sig=3e33dde1e1a6d9cfc3bc4095fc8050efd22568d6 205w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.a90b4c323d99.png&amp;amp;w=411&amp;amp;sig=eb0eb5d040b77eff6d4999dd1e01e4ce4fa77eb8 411w, https://files.realpython.com/media/t.a90b4c323d99.png 823w&quot; sizes=&quot;75vw&quot; alt=&quot;Set difference&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Set Difference&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;x1.difference(x2)&lt;/code&gt; and &lt;code&gt;x1 - x2&lt;/code&gt; return the set of all elements that are in &lt;code&gt;x1&lt;/code&gt; but not in &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another way to think of this is that &lt;code&gt;x1.difference(x2)&lt;/code&gt; and &lt;code&gt;x1 - x2&lt;/code&gt; return the set that results when any elements in &lt;code&gt;x2&lt;/code&gt; are removed or subtracted from &lt;code&gt;x1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once again, you can specify more than two sets:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{1, 2, 3}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{1, 2, 3}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When multiple sets are specified, the operation is performed from left to right.  In the example above, &lt;code&gt;a - b&lt;/code&gt; is computed first, resulting in &lt;code&gt;{1, 2, 3, 300}&lt;/code&gt;.  Then &lt;code&gt;c&lt;/code&gt; is subtracted from that set, leaving &lt;code&gt;{1, 2, 3}&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/t.b37d6f78f99a.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/t.b37d6f78f99a.png&quot; width=&quot;2307&quot; height=&quot;993&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.b37d6f78f99a.png&amp;amp;w=576&amp;amp;sig=d641a77f00bfde6732fd3e774cd5a0fc92ff9de6 576w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.b37d6f78f99a.png&amp;amp;w=1153&amp;amp;sig=43b3c03ccbeea1cf89d8152472b81c118a065c67 1153w, https://files.realpython.com/media/t.b37d6f78f99a.png 2307w&quot; sizes=&quot;75vw&quot; alt=&quot;set difference, multiple sets&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- symmetric difference --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.symmetric_difference(x2)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 ^ x2 [^ x3 ...]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compute the &lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric_difference&quot;&gt;symmetric difference&lt;/a&gt; between sets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.604de51646cc.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.604de51646cc.png&quot; width=&quot;823&quot; height=&quot;560&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.604de51646cc.png&amp;amp;w=205&amp;amp;sig=b807beb3a50ab6d671d7c8399771bf3f72e25b81 205w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.604de51646cc.png&amp;amp;w=411&amp;amp;sig=535a505e73f3ae621f25ca42d97f3c674c3596f7 411w, https://files.realpython.com/media/t.604de51646cc.png 823w&quot; sizes=&quot;75vw&quot; alt=&quot;Set symmetric difference&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Set Symmetric Difference&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;x1.symmetric_difference(x2)&lt;/code&gt; and &lt;code&gt;x1 ^ x2&lt;/code&gt; return the set of all elements in either &lt;code&gt;x1&lt;/code&gt; or &lt;code&gt;x2&lt;/code&gt;, but not both:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric_difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;bar&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;bar&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;^&lt;/code&gt; operator also allows more than two sets:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{100, 5, 10}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As with the difference operator, when multiple sets are specified, the operation is performed from left to right.&lt;/p&gt;
&lt;p&gt;Curiously, although the &lt;code&gt;^&lt;/code&gt; operator allows multiple sets, the &lt;code&gt;.symmetric_difference()&lt;/code&gt; method doesn&amp;rsquo;t:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric_difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#11&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric_difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;symmetric_difference() takes exactly one argument (2 given)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;!-- disjoint --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.isdisjoint(x2)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Determines whether or not two sets have any elements in common.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x1.isdisjoint(x2)&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; have no elements in common:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdisjoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;quux&amp;#39;, &amp;#39;qux&amp;#39;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdisjoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code&gt;x1.isdisjoint(x2)&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, then &lt;code&gt;x1 &amp;amp; x2&lt;/code&gt; is the empty set:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdisjoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;set()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is no operator that corresponds to the &lt;code&gt;.isdisjoint()&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- subset --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.issubset(x2)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 &amp;lt;= x2&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Determine whether one set is a subset of the other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In set theory, a set &lt;code&gt;x1&lt;/code&gt; is considered a subset of another set &lt;code&gt;x2&lt;/code&gt; if every element of &lt;code&gt;x1&lt;/code&gt; is in &lt;code&gt;x2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x1.issubset(x2)&lt;/code&gt; and &lt;code&gt;x1 &amp;lt;= x2&lt;/code&gt; return &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;x1&lt;/code&gt; is a subset of &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;issubset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A set is considered to be a subset of itself:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;issubset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It seems strange, perhaps.  But it fits the definition&amp;mdash;every element of &lt;code&gt;x&lt;/code&gt; is in &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;!-- proper subset --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1 &amp;lt; x2&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Determines whether one set is a proper subset of the other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A proper subset is the same as a subset, except that the sets can&amp;rsquo;t be identical. A set &lt;code&gt;x1&lt;/code&gt; is considered a proper subset of another set &lt;code&gt;x2&lt;/code&gt; if every element of &lt;code&gt;x1&lt;/code&gt; is in &lt;code&gt;x2&lt;/code&gt;, and &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are not equal.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x1 &amp;lt; x2&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;x1&lt;/code&gt; is a proper subset of &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While a set is considered a subset of itself, it is not a proper subset of itself:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;&amp;lt;&lt;/code&gt; operator is the only way to test whether a set is a proper subset.  There is no corresponding method.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- superset --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.issuperset(x2)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 &amp;gt;= x2&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Determine whether one set is a superset of the other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A superset is the reverse of a subset. A set &lt;code&gt;x1&lt;/code&gt; is considered a superset of another set &lt;code&gt;x2&lt;/code&gt; if &lt;code&gt;x1&lt;/code&gt; contains every element of &lt;code&gt;x2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x1.issuperset(x2)&lt;/code&gt; and &lt;code&gt;x1 &amp;gt;= x2&lt;/code&gt; return &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;x1&lt;/code&gt; is a superset of &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;issuperset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You have already seen that a set is considered a subset of itself.  A set is also considered a superset of itself:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;issuperset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;!-- proper superset --&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1 &amp;gt; x2&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Determines whether one set is a proper superset of the other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A proper superset is the same as a superset, except that the sets can&amp;rsquo;t be identical. A set &lt;code&gt;x1&lt;/code&gt; is considered a proper superset of another set &lt;code&gt;x2&lt;/code&gt; if &lt;code&gt;x1&lt;/code&gt; contains every element of &lt;code&gt;x2&lt;/code&gt;, and &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are not equal.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x1 &amp;gt; x2&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;x1&lt;/code&gt; is a proper superset of &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A set is not a proper superset of itself:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;&amp;gt;&lt;/code&gt; operator is the only way to test whether a set is a proper superset.  There is no corresponding method.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;modifying-a-set&quot;&gt;Modifying a Set&lt;/h2&gt;
&lt;p&gt;Although the elements contained in a set must be of immutable type, sets themselves can be modified.  Like the operations above, there are a mix of operators and methods that can be used to change the contents of a set.&lt;/p&gt;
&lt;h3 id=&quot;augmented-assignment-operators-and-methods&quot;&gt;Augmented Assignment Operators and Methods&lt;/h3&gt;
&lt;p&gt;Each of the union, intersection, difference, and symmetric difference operators listed above has an augmented assignment form that can be used to modify a set.  For each, there is a corresponding method as well.&lt;/p&gt;
&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.update(x2[, x3 ...])&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 |= x2 [| x3 ...]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modify a set by union.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x1.update(x2)&lt;/code&gt; and &lt;code&gt;x1 |= x2&lt;/code&gt; add to &lt;code&gt;x1&lt;/code&gt; any elements in &lt;code&gt;x2&lt;/code&gt; that &lt;code&gt;x1&lt;/code&gt; does not already have:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;qux&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;garply&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;qux&amp;#39;, &amp;#39;corge&amp;#39;, &amp;#39;garply&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.intersection_update(x2[, x3 ...])&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 &amp;amp;= x2 [&amp;amp; x3 ...]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modify a set by intersection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x1.intersection_update(x2)&lt;/code&gt; and &lt;code&gt;x1 &amp;amp;= x2&lt;/code&gt; update &lt;code&gt;x1&lt;/code&gt;, retaining only elements found in both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;baz&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersection_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;baz&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.difference_update(x2[, x3 ...])&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 -= x2 [| x3 ...]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modify a set by difference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x1.difference_update(x2)&lt;/code&gt; and &lt;code&gt;x1 -= x2&lt;/code&gt; update &lt;code&gt;x1&lt;/code&gt;, removing elements found in &lt;code&gt;x2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;bar&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;set()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x1.symmetric_difference_update(x2)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;h4&quot;&gt;&lt;code&gt;x1 ^= x2&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modify a set by symmetric difference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x1.symmetric_difference_update(x2)&lt;/code&gt; and &lt;code&gt;x1 ^= x2&lt;/code&gt; update &lt;code&gt;x1&lt;/code&gt;, retaining elements found in either &lt;code&gt;x1&lt;/code&gt; or &lt;code&gt;x2&lt;/code&gt;, but not both:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;bar&amp;#39;, &amp;#39;qux&amp;#39;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric_difference_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;bar&amp;#39;, &amp;#39;corge&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;other-methods-for-modifying-sets&quot;&gt;Other Methods For Modifying Sets&lt;/h3&gt;
&lt;p&gt;Aside from the augmented operators above, Python supports several additional methods that modify sets.&lt;/p&gt;
&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x.add(&amp;lt;elem&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Adds an element to a set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x.add(&amp;lt;elem&amp;gt;)&lt;/code&gt; adds &lt;code&gt;&amp;lt;elem&amp;gt;&lt;/code&gt;, which must be a single immutable object, to &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;qux&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x.remove(&amp;lt;elem&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Removes an element from a set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x.remove(&amp;lt;elem&amp;gt;)&lt;/code&gt; removes &lt;code&gt;&amp;lt;elem&amp;gt;&lt;/code&gt; from &lt;code&gt;x&lt;/code&gt;.  Python raises an exception if &lt;code&gt;&amp;lt;elem&amp;gt;&lt;/code&gt; is not in &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#58&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x.discard(&amp;lt;elem&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Removes an element from a set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x.discard(&amp;lt;elem&amp;gt;)&lt;/code&gt; also removes &lt;code&gt;&amp;lt;elem&amp;gt;&lt;/code&gt; from &lt;code&gt;x&lt;/code&gt;.  However, if &lt;code&gt;&amp;lt;elem&amp;gt;&lt;/code&gt; is not in &lt;code&gt;x&lt;/code&gt;, this method quietly does nothing instead of raising an exception:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x.pop()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Removes a random element from a set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x.pop()&lt;/code&gt; removes and returns an arbitrarily chosen element from &lt;code&gt;x&lt;/code&gt;.  If &lt;code&gt;x&lt;/code&gt; is empty, &lt;code&gt;x.pop()&lt;/code&gt; raises an exception:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;baz&amp;#39;, &amp;#39;foo&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;set()&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#82&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;pop from an empty set&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;x.clear()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clears a set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;x.clear()&lt;/code&gt; removes all elements from &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;set()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;frozen-sets&quot;&gt;Frozen Sets&lt;/h2&gt;
&lt;p&gt;Python provides another built-in type called a &lt;strong&gt;frozenset&lt;/strong&gt;, which is in all respects exactly like a set, except that a frozenset is immutable.  You can perform non-modifying operations on a frozenset:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;frozenset({&amp;#39;foo&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;bar&amp;#39;})&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;frozenset({&amp;#39;baz&amp;#39;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But methods that attempt to modify a frozenset fail:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#127&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;frozenset&amp;#39; object has no attribute &amp;#39;add&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#129&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;frozenset&amp;#39; object has no attribute &amp;#39;pop&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#131&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;frozenset&amp;#39; object has no attribute &amp;#39;clear&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;frozenset({&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p class=&quot;h3&quot;&gt;Deep Dive: Frozensets and Augmented Assignment&lt;/p&gt;
&lt;p&gt;Since a frozenset is immutable, you might think it can&amp;rsquo;t be the target of an augmented assignment operator.  But observe:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;frozenset({&amp;#39;baz&amp;#39;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What gives?&lt;/p&gt;
&lt;p&gt;Python does not perform augmented assignments on frozensets in place.  The statement &lt;code&gt;x &amp;amp;= s&lt;/code&gt; is effectively equivalent to &lt;code&gt;x = x &amp;amp; s&lt;/code&gt;.  It isn&amp;rsquo;t modifying the original &lt;code&gt;x&lt;/code&gt;.  It is reassigning &lt;code&gt;x&lt;/code&gt; to a new object, and the object &lt;code&gt;x&lt;/code&gt; originally referenced is gone.&lt;/p&gt;
&lt;p&gt;You can verify this with the &lt;code&gt;id()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;56992872&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;frozenset({&amp;#39;baz&amp;#39;})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;56992152&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;f&lt;/code&gt; has a different integer identifier following the augmented assignment.  It has been reassigned, not modified in place.&lt;/p&gt;
&lt;p&gt;Some objects in Python are modified in place when they are the target of an augmented assignment operator.  But frozensets aren&amp;rsquo;t.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Frozensets are useful in situations where you want to use a set, but you need an immutable object.  For example, you can&amp;rsquo;t define a set whose elements are also sets, because set elements must be immutable:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#38&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unhashable type: &amp;#39;set&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you really feel compelled to define a set of sets (hey, it could happen), you can do it if the elements are frozensets, because they are immutable:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{frozenset({&amp;#39;bar&amp;#39;}), frozenset({&amp;#39;baz&amp;#39;}), frozenset({&amp;#39;foo&amp;#39;})}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, recall from the previous tutorial on &lt;a href=&quot;https://realpython.com/python-dicts&quot;&gt;dictionaries&lt;/a&gt; that a dictionary key must be immutable.  You can&amp;rsquo;t use the built-in set type as a dictionary key:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#3&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unhashable type: &amp;#39;set&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you find yourself needing to use sets as dictionary keys, you can use frozensets:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{frozenset({1, 2, 3}): &amp;#39;foo&amp;#39;, frozenset({&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;}): &amp;#39;bar&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, you learned how to define &lt;strong&gt;set&lt;/strong&gt; objects in Python, and you became familiar with the functions, operators, and methods that can be used to work with sets.&lt;/p&gt;
&lt;p&gt;You should now be comfortable with the basic built-in data types that Python provides.&lt;/p&gt;
&lt;p&gt;Next, you will begin to explore how the code that operates on those objects is organized and structured in a Python program.&lt;/p&gt;
&lt;div class=&quot;container py-3 series-nav mb-3&quot;&gt;
  &lt;div class=&quot;row justify-content-between&quot;&gt;
    &lt;div class=&quot;col-12 col-md-3 text-left text-muted ml-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-dicts/&quot;&gt; «&amp;nbsp;Dictionaries in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-center text-muted&quot;&gt;&lt;a href=&quot;#&quot;&gt;Sets in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-right text-muted mr-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-program-structure/&quot;&gt;Python Program Structure&amp;nbsp;»&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>The Ultimate Guide to Django Redirects</title>
      <id>https://realpython.com/django-redirects/</id>
      <link href="https://realpython.com/django-redirects/"/>
      <updated>2018-08-15T14:00:00+00:00</updated>
      <summary>In this detailed guide, you&#39;ll learn everything you need to know about HTTP redirects in Django. All the way from the low-level details of the HTTP protocol to the high-level way of dealing with them in Django.</summary>
      <content type="html">
        &lt;p&gt;When you build a Python web application with the &lt;a href=&quot;https://realpython.com/tutorials/django/&quot;&gt;Django framework&lt;/a&gt;, you&amp;rsquo;ll at some point have to redirect the user from one URL to another.&lt;/p&gt;
&lt;p&gt;In this guide, you&amp;rsquo;ll learn everything you need to know about HTTP redirects and how to deal with them in Django. At the end of this tutorial, you&amp;rsquo;ll:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be able to redirect a user from one URL to another URL&lt;/li&gt;
&lt;li&gt;Know the difference between temporary and permanent redirects&lt;/li&gt;
&lt;li&gt;Avoid common pitfalls when working with redirects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial assumes that you&amp;rsquo;re familiar with the basic building blocks of a Django application, like &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/topics/http/views/&quot;&gt;views&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/topics/http/urls/&quot;&gt;URL patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;django-redirects-a-super-simple-example&quot;&gt;Django Redirects: A Super Simple Example&lt;/h2&gt;
&lt;p&gt;In Django, you redirect the user to another URL by returning an instance of &lt;code&gt;HttpResponseRedirect&lt;/code&gt; or &lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt; from your view. The simplest way to do this is to use the function &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/topics/http/shortcuts/#redirect&quot;&gt;&lt;code&gt;redirect()&lt;/code&gt;&lt;/a&gt; from the module &lt;code&gt;django.shortcuts&lt;/code&gt;. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redirect_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/redirect-success/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just call &lt;code&gt;redirect()&lt;/code&gt; with a URL in your view. It will return a &lt;code&gt;HttpResponseRedirect&lt;/code&gt; class, which you then return from your view.&lt;/p&gt;
&lt;p&gt;A view returning a redirect has to be added to your &lt;code&gt;urls.py&lt;/code&gt;, like any other view:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.views&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_view&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/redirect/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... more URL patterns here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assuming this is the main &lt;code&gt;urls.py&lt;/code&gt; of your Django project, the URL &lt;code&gt;/redirect/&lt;/code&gt; now redirects to &lt;code&gt;/redirect-success/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To avoid hard-coding the URL, you can call &lt;code&gt;redirect()&lt;/code&gt; with the name of a view or URL pattern or a model to avoid hard-coding the redirect URL. You can also create a permanent redirect by passing the keyword argument &lt;code&gt;permanent=True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This article could end here, but then it could hardly be called &amp;ldquo;The Ultimate Guide to Django Redirects.&amp;rdquo; We will take a closer look at the &lt;code&gt;redirect()&lt;/code&gt; function in a minute and also get into the nitty-gritty details of HTTP status codes and different &lt;code&gt;HttpRedirectResponse&lt;/code&gt; classes, but let&amp;rsquo;s take a step back and start with a fundamental question.&lt;/p&gt;
&lt;h2 id=&quot;why-redirect&quot;&gt;Why Redirect&lt;/h2&gt;
&lt;p&gt;You might wonder why you&amp;rsquo;d ever want to redirect a user to a different URL in the first place. To get an idea where redirects make sense, have a look at how Django itself incorporates redirects into features that the framework provides by default:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you are not logged-in and request a URL that requires authentication, like the Django admin, Django redirects you to the login page.&lt;/li&gt;
&lt;li&gt;When you log in successfully, Django redirects you to the URL you requested originally.&lt;/li&gt;
&lt;li&gt;When you change your password using the Django admin, you are redirected to a page that indicates that the change was successful.&lt;/li&gt;
&lt;li&gt;When you create an object in the Django admin, Django redirects you to the object list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What would an alternative implementation without redirects look like? If a user has to log in to view a page, you could simply display a page that says something like &amp;ldquo;Click here to log in.&amp;rdquo; This would work, but it would be inconvenient for the user.&lt;/p&gt;
&lt;p&gt;URL shorteners like &lt;a href=&quot;http://bit.ly&quot;&gt;http://bit.ly&lt;/a&gt; are another example of where redirects come in handy: you type a short URL into the address bar of your browser and are then redirected to a page with a long, unwieldy URL.&lt;/p&gt;
&lt;p&gt;In other cases, redirects are not just a matter of convenience. Redirects are an essential instrument to guide the user through a web application. After performing some kind of operation with side effects, like creating or deleting an object, it&amp;rsquo;s a best practice to redirect to another URL to prevent accidentally performing the operation twice.&lt;/p&gt;
&lt;p&gt;One example of this use of redirects is form handling, where a user is redirected to another URL after successfully submitting a form. Here&amp;rsquo;s a code sample that illustrates how you&amp;rsquo;d typically handle a form:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Code for actually sending the message goes here&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Textarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contact_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13 &lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# The request method &amp;#39;POST&amp;#39; indicates&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14 &lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# that the form was submitted&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15 &lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;16 &lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Create a form instance with the submitted data&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17 &lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;18 &lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Validate the form&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19 &lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;20 &lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# If the form is valid, perform some kind of&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21 &lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# operation, for example sending a message&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22 &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23 &lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleaned_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24 &lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleaned_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25 &lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26 &lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# After the operation was successful,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27 &lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# redirect to some other page&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28 &lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/success/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;29 &lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 5&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;30 &lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Create an empty form instance&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contact_form.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The purpose of this view is to display and handle a contact form that allows the user to send a message. Let&amp;rsquo;s follow it step by step:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First the view looks at the request method. When the user visits the URL connected to this view, the browser performs a &lt;code&gt;GET&lt;/code&gt; request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the view is called with a &lt;code&gt;POST&lt;/code&gt; request, the &lt;code&gt;POST&lt;/code&gt; data is used to instantiate a &lt;code&gt;ContactForm&lt;/code&gt; object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the form is valid, the form data is passed to &lt;code&gt;send_message()&lt;/code&gt;. This function is not relevant in this context and therefore not shown here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After sending the message, the view returns a redirect to the URL &lt;code&gt;/success/&lt;/code&gt;. This is the step we are interested in. For simplicity, the URL is hard-coded here. You&amp;rsquo;ll see later how you can avoid that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the view receives a &lt;code&gt;GET&lt;/code&gt; request (or, to be precise, any kind of request that is not a &lt;code&gt;POST&lt;/code&gt; request), it creates an instance of &lt;code&gt;ContactForm&lt;/code&gt; and uses &lt;code&gt;django.shortcuts.render()&lt;/code&gt; to render the &lt;code&gt;contact_form.html&lt;/code&gt; template.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the user now hits reload, only the &lt;code&gt;/success/&lt;/code&gt; URL is reloaded. Without the redirect, reloading the page would re-submit the form and send another message.&lt;/p&gt;
&lt;h2 id=&quot;behind-the-scenes-how-an-http-redirect-works&quot;&gt;Behind the Scenes: How an HTTP Redirect Works&lt;/h2&gt;
&lt;p&gt;Now you know why redirects make sense, but how do they work? Let&amp;rsquo;s have a quick recap of what happens when you enter a URL in the address bar of your web browser.&lt;/p&gt;
&lt;h3 id=&quot;a-quick-primer-on-http&quot;&gt;A Quick Primer on HTTP&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s assume you&amp;rsquo;ve created a Django application with a &amp;ldquo;Hello World&amp;rdquo; view that handles the path &lt;code&gt;/hello/&lt;/code&gt;. You are running your application with the Django development server, so the complete URL is &lt;code&gt;http://127.0.0.1:8000/hello/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you enter that URL in your browser, it connects to port &lt;code&gt;8000&lt;/code&gt; on the server with the IP address &lt;code&gt;127.0.0.1&lt;/code&gt; and sends an HTTP &lt;code&gt;GET&lt;/code&gt; request for the path &lt;code&gt;/hello/&lt;/code&gt;. The server replies with an HTTP response.&lt;/p&gt;
&lt;p&gt;HTTP is text-based, so it&amp;rsquo;s relatively easy to look at the back and forth between the client and the server. You can use the command line tool &lt;a href=&quot;https://curl.haxx.se/docs/manpage.html&quot;&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/a&gt; with the option &lt;code&gt;--include&lt;/code&gt; to have a look at the complete HTTP response including the headers, like this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl --include http://127.0.0.1:8000/hello/
&lt;span class=&quot;go&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Date: Sun, 01 Jul 2018 20:32:55 GMT&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Server: WSGIServer/0.2 CPython/3.6.3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Content-Type: text/html; charset=utf-8&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;X-Frame-Options: SAMEORIGIN&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Content-Length: 11&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, an HTTP response starts with a status line that contains a status code and a status message. The status line is followed by an arbitrary number of HTTP headers. An empty line indicates the end of the headers and the start of the response body, which contains the actual data the server wants to send.&lt;/p&gt;
&lt;h3 id=&quot;http-redirects-status-codes&quot;&gt;HTTP Redirects Status Codes&lt;/h3&gt;
&lt;p&gt;What does a redirect response look like? Let&amp;rsquo;s assume the path &lt;code&gt;/redirect/&lt;/code&gt; is handled by &lt;code&gt;redirect_view()&lt;/code&gt;, shown earlier. If you access &lt;code&gt;http://127.0.0.1:8000/redirect/&lt;/code&gt; with &lt;code&gt;curl&lt;/code&gt;, your console looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl --include http://127.0.0.1:8000/redirect/
&lt;span class=&quot;go&quot;&gt;HTTP/1.1 302 Found&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Date: Sun, 01 Jul 2018 20:35:34 GMT&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Server: WSGIServer/0.2 CPython/3.6.3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Content-Type: text/html; charset=utf-8&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Location: /redirect-success/&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;X-Frame-Options: SAMEORIGIN&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Content-Length: 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two responses might look similar, but there are some key differences. The redirect:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Returns a different status code (&lt;code&gt;302&lt;/code&gt; versus &lt;code&gt;200&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Contains a &lt;code&gt;Location&lt;/code&gt; header with a relative URL&lt;/li&gt;
&lt;li&gt;Ends with an empty line because the body of the redirect response is empty&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The primary differentiator is the status code. The specification of the HTTP standard says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The 302 (Found) status code indicates that the target resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client ought to continue to use the effective request URI for future requests. The server SHOULD generate a Location header field in the response containing a URI reference for the different URI. The user agent MAY use the Location field value for automatic redirection. (&lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.4&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, whenever the server sends a status code of &lt;code&gt;302&lt;/code&gt;, it says to the client, &amp;ldquo;Hey, at the moment, the thing you are looking for can be found at this other location.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;A key phrase in the specification is &amp;ldquo;MAY use the Location field value for automatic redirection.&amp;rdquo; It means that you can&amp;rsquo;t force the client to load another URL. The client can choose to wait for user confirmation or decide not to load the URL at all.&lt;/p&gt;
&lt;p&gt;Now you know that a redirect is just an HTTP response with a &lt;code&gt;3xx&lt;/code&gt; status code and a &lt;code&gt;Location&lt;/code&gt; header. The key takeaway here is that an HTTP redirect is like any old HTTP response, but with an empty body, 3xx status code, and a &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. We&amp;rsquo;ll tie this back into Django momentarily, but first let&amp;rsquo;s take a look at two types of redirects in that &lt;code&gt;3xx&lt;/code&gt; status code range and see why they matter when it comes to web development.&lt;/p&gt;
&lt;h3 id=&quot;temporary-vs-permanent-redirects&quot;&gt;Temporary vs. Permanent Redirects&lt;/h3&gt;
&lt;p&gt;The HTTP standard specifies several redirect status codes, all in the &lt;code&gt;3xx&lt;/code&gt; range. The two most common status codes are &lt;code&gt;301 Permanent Redirect&lt;/code&gt; and &lt;code&gt;302 Found&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A status code &lt;code&gt;302 Found&lt;/code&gt; indicates a temporary redirect. A temporary redirect says, &amp;ldquo;At the moment, the thing you&amp;rsquo;re looking for can be found at this other address.&amp;rdquo; Think of it like a store sign that reads, &amp;ldquo;Our store is currently closed for renovation. Please go to our other store around the corner.&amp;rdquo; As this is only temporary, you&amp;rsquo;d check the original address the next time you go shopping.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In HTTP 1.0, the message for status code 302 was &lt;code&gt;Temporary Redirect&lt;/code&gt;. The message was changed to &lt;code&gt;Found&lt;/code&gt; in HTTP 1.1.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As the name implies, permanent redirects are supposed to be permanent. A permanent redirect tells the browser, &amp;ldquo;The thing you&amp;rsquo;re looking for is no longer at this address. It&amp;rsquo;s now at this new address, and it will never be at the old address again.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;A permanent redirect is like a store sign that reads, &amp;ldquo;We moved. Our new store is just around the corner.&amp;rdquo; This change is permanent, so the next time you want to go to the store, you&amp;rsquo;d go straight to the new address.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Permanent redirects can have unintended consequences. Finish this guide before using a permanent redirect or jump straight to the section &amp;ldquo;Permanent redirects are permanent.&amp;rdquo;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Browsers behave similarly when handling redirects: when a URL returns a permanent redirect response, this response is cached. The next time the browser encounters the old URL, it remembers the redirect and directly requests the new address.&lt;/p&gt;
&lt;p&gt;Caching a redirect saves an unnecessary request and makes for a better and faster user experience.&lt;/p&gt;
&lt;p&gt;Furthermore, the distinction between temporary and permanent redirects is relevant for Search Engine Optimization.&lt;/p&gt;
&lt;h2 id=&quot;redirects-in-django&quot;&gt;Redirects in Django&lt;/h2&gt;
&lt;p&gt;Now you know that a redirect is just an HTTP response with a &lt;code&gt;3xx&lt;/code&gt; status code and a &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;You could build such a response yourself from a regular &lt;code&gt;HttpResponse&lt;/code&gt; object:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hand_crafted_redirect_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;302&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/redirect/success/&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This solution is technically correct, but it involves quite a bit of typing.&lt;/p&gt;
&lt;h3 id=&quot;the-httpresponseredirect-class&quot;&gt;The &lt;code&gt;HTTPResponseRedirect&lt;/code&gt; Class&lt;/h3&gt;
&lt;p&gt;You can save yourself some typing with the class &lt;code&gt;HttpResponseRedirect&lt;/code&gt;, a subclass of &lt;code&gt;HttpResponse&lt;/code&gt;. Just instantiate the class with the URL you want to redirect to as the first argument, and the class will set the correct status and Location header:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redirect_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/redirect/success/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can play with the &lt;code&gt;HttpResponseRedirect&lt;/code&gt; class in the Python shell to see what you&amp;rsquo;re getting:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/redirect/success/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;302&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;/redirect/success/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also a class for permanent redirects, which is aptly named &lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt;. It works the same as &lt;code&gt;HttpResponseRedirect&lt;/code&gt;, the only difference is that it has a status code of &lt;code&gt;301 (Moved Permanently)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the examples above, the redirect URLs are hard-coded. Hard-coding URLs is bad practice: if the URL ever changes, you have to search through all your code and change any occurrences. Let&amp;rsquo;s fix that!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You could use &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/ref/urlresolvers/#reverse&quot;&gt;&lt;code&gt;django.urls.reverse()&lt;/code&gt;&lt;/a&gt; to build a URL, but there is a more convenient way as you will see in the next section.&lt;/p&gt;
&lt;h3 id=&quot;the-redirect-function&quot;&gt;The &lt;code&gt;redirect()&lt;/code&gt; Function&lt;/h3&gt;
&lt;p&gt;To make your life easier, Django provides the versatile shortcut function you&amp;rsquo;ve already seen in the introduction: &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/topics/http/shortcuts/#redirect&quot;&gt;&lt;code&gt;django.shortcuts.redirect()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can call this function with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A model instance, or any other object, with a &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/ref/models/instances/#get-absolute-url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method&lt;/li&gt;
&lt;li&gt;A URL or view name and positional and/or keyword arguments&lt;/li&gt;
&lt;li&gt;A URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It will take the appropriate steps to turn the arguments into a URL and return an &lt;code&gt;HTTPResponseRedirect&lt;/code&gt;.
If you pass &lt;code&gt;permanent=True&lt;/code&gt;, it will return an instance of &lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt;, resulting in a permanent redirect.&lt;/p&gt;
&lt;p&gt;Here are three examples to illustrate the different use cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Passing a model:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;model_redirect_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;featured&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;redirect()&lt;/code&gt; will call &lt;code&gt;product.get_absolute_url()&lt;/code&gt; and use the result as redirect target. If the given class, in this case &lt;code&gt;Product&lt;/code&gt;, doesn&amp;rsquo;t have a &lt;code&gt;get_absolute_url()&lt;/code&gt; method, this will fail with a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passing a URL name and arguments:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixed_featured_product_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FEATURED_PRODUCT_ID&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product_detail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;redirect()&lt;/code&gt; will try to use its given arguments to reverse a URL. This example assumes your URL patterns contain a pattern like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path(&amp;#39;/product/&amp;lt;product_id&amp;gt;/&amp;#39;, &amp;#39;product_detail_view&amp;#39;, name=&amp;#39;product_detail&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passing a URL:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;featured_product_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/products/42/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;redirect()&lt;/code&gt; will treat any string containing a &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; as a URL and use it as redirect target.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-redirectview-class-based-view&quot;&gt;The &lt;code&gt;RedirectView&lt;/code&gt; Class-Based View&lt;/h3&gt;
&lt;p&gt;If you have a view that does nothing but returning a redirect, you could use the class-based view &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/ref/class-based-views/base/#redirectview&quot;&gt;&lt;code&gt;django.views.generic.base.RedirectView&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can tailor &lt;code&gt;RedirectView&lt;/code&gt; to your needs through various attributes.&lt;/p&gt;
&lt;p&gt;If the class has a &lt;code&gt;.url&lt;/code&gt; attribute, it will be used as a redirect URL. String formatting placeholders are replaced with named arguments from the URL:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.views&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchRedirectView&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/search/&amp;lt;term&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchRedirectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic.base&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedirectView&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SearchRedirectView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedirectView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://google.com/?q=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(term)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The URL pattern defines an argument &lt;code&gt;term&lt;/code&gt;, which is used in &lt;code&gt;SearchRedirectView&lt;/code&gt; to build the redirect URL. The path &lt;code&gt;/search/kittens/&lt;/code&gt; in your application will redirect you to &lt;code&gt;https://google.com/?q=kittens&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead of subclassing &lt;code&gt;RedirectView&lt;/code&gt; to overwrite the &lt;code&gt;url&lt;/code&gt; attribute, you can also pass the keyword argument &lt;code&gt;url&lt;/code&gt; to &lt;code&gt;as_view()&lt;/code&gt; in your &lt;code&gt;urlpatterns&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic.base&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedirectView&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/search/&amp;lt;term&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;RedirectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://google.com/?q=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(term)s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also overwrite &lt;code&gt;get_redirect_url()&lt;/code&gt; to get a completely custom behavior:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic.base&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedirectView&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomAnimalView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedirectView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

     &lt;span class=&quot;n&quot;&gt;animal_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/dog/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/cat/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/parrot/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;is_permanent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_redirect_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal_urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This class-based view redirects to a URL picked randomly from &lt;code&gt;.animal_urls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django.views.generic.base.RedirectView&lt;/code&gt; offers a few more hooks for customization. Here is the complete list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.url&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this attribute is set, it should be a string with a URL to redirect to. If it contains string formatting placeholders like &lt;code&gt;%(name)s&lt;/code&gt;, they are expanded using the keyword arguments passed to the view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.pattern_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this attribute is set, it should be the name of a URL pattern to redirect to. Any positional and keyword arguments passed to the view are used to reverse the URL pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.permanent&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this attribute is &lt;code&gt;True&lt;/code&gt;, the view returns a permanent redirect. It defaults to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.query_string&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this attribute is &lt;code&gt;True&lt;/code&gt;, the view appends any provided query string to the redirect URL. If it is &lt;code&gt;False&lt;/code&gt;, which is the default, the query string is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get_redirect_url(*args, **kwargs)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This method is responsible for building the redirect URL. If this method returns &lt;code&gt;None&lt;/code&gt;, the view returns a &lt;code&gt;410 Gone&lt;/code&gt; status.&lt;/p&gt;
&lt;p&gt;The default implementation first checks &lt;code&gt;.url&lt;/code&gt;. It treats &lt;code&gt;.url&lt;/code&gt; as an &amp;ldquo;old-style&amp;rdquo; &lt;a href=&quot;https://realpython.com/python-string-formatting/&quot;&gt;format string&lt;/a&gt;, using any named URL parameters passed to the view to expand any named format specifiers.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;.url&lt;/code&gt; is not set, it checks if &lt;code&gt;.pattern_name&lt;/code&gt; is set. If it is, it uses it to reverse a URL with any positional and keyword arguments it received.&lt;/p&gt;
&lt;p&gt;You can change that behavior in any way you want by overwriting this method. Just make sure it returns a string containing a URL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Class-based views are a powerful concept but can be a bit difficult to wrap your head around. Unlike regular function-based views, where it&amp;rsquo;s relatively straightforward to follow the flow of the code, class-based views are made up of a complex hierarchy of mixins and base classes.&lt;/p&gt;
&lt;p&gt;A great tool to make sense of a class-based view class is the website &lt;a href=&quot;http://ccbv.co.uk/&quot;&gt;Classy Class-Based Views&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You could implement the functionality of &lt;code&gt;RandomAnimalView&lt;/code&gt; from the example above with this simple function-based view:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_animal_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animal_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/dog/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/cat/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/parrot/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal_urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the class-based approach does not provide any obvious benefit while adding some hidden complexity. That raises the question: when should you use &lt;code&gt;RedirectView&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If you want to add a redirect directly in your &lt;code&gt;urls.py&lt;/code&gt;, using &lt;code&gt;RedirectView&lt;/code&gt; makes sense. But if you find yourself overwriting &lt;code&gt;get_redirect_url&lt;/code&gt;, a function-based view might be easier to understand and more flexible for future enhancements.&lt;/p&gt;
&lt;h2 id=&quot;advanced-usage&quot;&gt;Advanced Usage&lt;/h2&gt;
&lt;p&gt;Once you know that you probably want to use &lt;code&gt;django.shortcuts.redirect()&lt;/code&gt;,  redirecting to a different URL is quite straight-forward. But there are a couple of advanced use cases that are not so obvious.&lt;/p&gt;
&lt;h3 id=&quot;passing-parameters-with-redirects&quot;&gt;Passing Parameters with Redirects&lt;/h3&gt;
&lt;p&gt;Sometimes, you want to pass some parameters to the view you&amp;rsquo;re redirecting to. Your best option is to pass the data in the query string of your redirect URL, which means redirecting to a URL like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://example.com/redirect-path/?parameter=value
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s assume you want to redirect from &lt;code&gt;some_view()&lt;/code&gt; to &lt;code&gt;product_view()&lt;/code&gt;, but pass an optional parameter &lt;code&gt;category&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.parse&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlencode&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product_view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1 /products/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;urlencode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2 category=42&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 3 /products/?category=42&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 4&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;product_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;category_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 5&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Do something with category_id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code in this example is quite dense, so let&amp;rsquo;s follow it step by step:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, you use &lt;code&gt;django.urls.reverse()&lt;/code&gt; to get the URL mapping to &lt;code&gt;product_view()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, you have to build the query string. That&amp;rsquo;s the part after the question mark. It&amp;rsquo;s advisable to use &lt;code&gt;urllib.urlparse.urlencode()&lt;/code&gt; for that, as it will take care of properly encoding any special characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you have to join &lt;code&gt;base_url&lt;/code&gt; and &lt;code&gt;query_string&lt;/code&gt; with a question mark. A format string works fine for that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, you pass &lt;code&gt;url&lt;/code&gt; to &lt;code&gt;django.shortcuts.redirect()&lt;/code&gt; or to a redirect response class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;product_view()&lt;/code&gt;, your redirect target, the parameter will be available in the &lt;code&gt;request.GET&lt;/code&gt; dictionary. The parameter might be missing, so you should use &lt;code&gt;requests.GET.get(&#39;category&#39;)&lt;/code&gt; instead of &lt;code&gt;requests.GET[&#39;category&#39;]&lt;/code&gt;. The former returns &lt;code&gt;None&lt;/code&gt; when the parameter does not exist, while the latter would raise an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure to validate any data you read from query strings. It might seem like this data is under your control because you created the redirect URL.&lt;/p&gt;
&lt;p&gt;In reality, the redirect could be manipulated by the user and must not be trusted, like any other user input. Without proper validation, &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control&quot;&gt;an attacker might be able gain unauthorized access&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;special-redirect-codes&quot;&gt;Special Redirect Codes&lt;/h3&gt;
&lt;p&gt;Django provides HTTP response classes for the status codes &lt;code&gt;301&lt;/code&gt; and &lt;code&gt;302&lt;/code&gt;. Those should cover most use cases, but if you ever have to return status codes &lt;code&gt;303&lt;/code&gt;, &lt;code&gt;307&lt;/code&gt;, or &lt;code&gt;308&lt;/code&gt;, you can quite easily create your own response class. Simply subclass &lt;code&gt;HttpResponseRedirectBase&lt;/code&gt; and overwrite the &lt;code&gt;status_code&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpResponseTemporaryRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseRedirectBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;307&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can use the &lt;code&gt;django.shortcuts.redirect()&lt;/code&gt; method to create a response object and change the return value. This approach makes sense when you have the name of a view or URL or a model you want to redirect to:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;temporary_redirect_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;success_view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;307&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is actually a third class with a status code in the &lt;code&gt;3xx&lt;/code&gt; range: &lt;code&gt;HttpResponseNotModified&lt;/code&gt;, with the status code &lt;code&gt;304&lt;/code&gt;. It indicates that the content URL has not changed and that the client can use a cached version.&lt;/p&gt;
&lt;p&gt;One could argue that &lt;code&gt;304 Not Modified&lt;/code&gt; response redirects to the cached version of a URL, but that&amp;rsquo;s a bit of a stretch. Consequently, it is no longer listed in the &lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.4&quot;&gt;&amp;ldquo;Redirection 3xx&amp;rdquo; section&lt;/a&gt; of the HTTP standard.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;pitfalls&quot;&gt;Pitfalls&lt;/h2&gt;
&lt;h3 id=&quot;redirects-that-just-wont-redirect&quot;&gt;Redirects That Just Won&amp;rsquo;t Redirect&lt;/h3&gt;
&lt;p&gt;The simplicity of &lt;code&gt;django.shortcuts.redirect()&lt;/code&gt; can be deceiving. The function itself doesn&amp;rsquo;t perform a redirect: it just returns a redirect response object. You must return this response object from your view (or in a middleware). Otherwise, no redirect will happen.&lt;/p&gt;
&lt;p&gt;But even if you know that just calling &lt;code&gt;redirect()&lt;/code&gt; is not enough, it&amp;rsquo;s easy to introduce this bug into a working application through a simple refactoring. Here&amp;rsquo;s an example to illustrate that.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume you are building a shop and have a view that is responsible for displaying a product. If the product does not exist, you redirect to the homepage:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;product_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;product_detail.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you want to add a second view to display customer reviews for a product. It should also redirect to the homepage for non-existing products, so as a first step, you extract this functionality from &lt;code&gt;product_view()&lt;/code&gt; into a helper function &lt;code&gt;get_product_or_redirect()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_product_or_redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;product_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_product_or_redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;product_detail.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, after the refactoring, the redirect does not work anymore.&lt;/p&gt;
&lt;div class=&quot;card mb-3&quot; id=&quot;collapse_card36fa14&quot;&gt;
&lt;div class=&quot;card-header border-0&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse36fa14&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse36fa14&quot;&gt;Can you spot the error?&lt;/button&gt; &lt;button class=&quot;btn btn-link float-right&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse36fa14&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse36fa14&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;collapse36fa14&quot; class=&quot;collapse&quot; data-parent=&quot;#collapse_card36fa14&quot;&gt;&lt;div class=&quot;card-body&quot; markdown=&quot;1&quot;&gt;

&lt;p&gt;The result of &lt;code&gt;redirect()&lt;/code&gt; is returned from &lt;code&gt;get_product_or_redirect()&lt;/code&gt;, but &lt;code&gt;product_view()&lt;/code&gt; does not return it. Instead, it is passed to the template.&lt;/p&gt;
&lt;p&gt;Depending on how you use the &lt;code&gt;product&lt;/code&gt; variable in the &lt;code&gt;product_detail.html&lt;/code&gt; template, this might not result in an error message and just display empty values.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h3 id=&quot;redirects-that-just-wont-stop-redirecting&quot;&gt;Redirects That Just Won&amp;rsquo;t Stop Redirecting&lt;/h3&gt;
&lt;p&gt;When dealing with redirects, you might accidentally create a redirect loop, by having URL A return a redirect that points to URL B which returns a redirect to URL A, and so on. Most HTTP clients detect this kind of redirect loop and will display an error message after a number of requests.&lt;/p&gt;
&lt;p&gt;Unfortunately, this kind of bug can be tricky to spot because everything looks fine on the server side. Unless your users complain about the issue, the only indication that something might be wrong is that you&amp;rsquo;ve got a number of requests from one client that all result in a redirect response in quick succession, but no response with a &lt;code&gt;200 OK&lt;/code&gt; status.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a simple example of a redirect loop:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;another_view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;another_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a_view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example illustrates the principle, but it&amp;rsquo;s overly simplistic. The redirect loops you&amp;rsquo;ll encounter in real-life are probably going to be harder to spot. Let&amp;rsquo;s look at a more elaborate example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;featured_products_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;featured_products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;featured&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;featured_products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product_view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;featured_products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;featured_products.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;featured_products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;product_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_stock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;featured_products_view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;product_detail.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;product&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;featured_products_view()&lt;/code&gt; fetches all featured products, in other words &lt;code&gt;Product&lt;/code&gt; instances with &lt;code&gt;.featured&lt;/code&gt; set to &lt;code&gt;True&lt;/code&gt;. If only one featured product exists, it redirects directly to &lt;code&gt;product_view()&lt;/code&gt;. Otherwise, it renders a template with the &lt;code&gt;featured_products&lt;/code&gt; queryset.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;product_view&lt;/code&gt; looks familiar from the previous section, but it has two minor differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The view tries to fetch a &lt;code&gt;Product&lt;/code&gt; that is in stock, indicated by having &lt;code&gt;.in_stock&lt;/code&gt; set to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The view redirects to &lt;code&gt;featured_products_view()&lt;/code&gt; if no product is in stock.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This logic works fine until your shop becomes a victim of its own success and the one featured product you currently have goes out of stock. If you set &lt;code&gt;.in_stock&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; but forget to set &lt;code&gt;.featured&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; as well, then any visitor to your &lt;code&gt;feature_product_view()&lt;/code&gt; will now be stuck in a redirect loop.&lt;/p&gt;
&lt;p&gt;There is no bullet-proof way to prevent this kind of bug, but a good starting point is to check if the view you are redirecting to uses redirects itself.&lt;/p&gt;
&lt;h3 id=&quot;permanent-redirects-are-permanent&quot;&gt;Permanent Redirects Are Permanent&lt;/h3&gt;
&lt;p&gt;Permanent redirects can be like bad tattoos: they might seem like a good idea at the time, but once you realize they were a mistake, it can be quite hard to get rid of them.&lt;/p&gt;
&lt;p&gt;When a browser receives a permanent redirect response for a URL, it caches this response indefinitely. Any time you request the old URL in the future, the browser doesn&amp;rsquo;t bother loading it and directly loads the new URL.&lt;/p&gt;
&lt;p&gt;It can be quite tricky to convince a browser to load a URL that once returned a permanent redirect. Google Chrome is especially aggressive when it comes to caching redirects.&lt;/p&gt;
&lt;p&gt;Why can this be a problem?&lt;/p&gt;
&lt;p&gt;Imagine you want to build a web application with Django. You register your domain at &lt;code&gt;myawesomedjangowebapp.com&lt;/code&gt;. As a first step, you install a blog app at &lt;code&gt;https://myawesomedjangowebapp.com/blog/&lt;/code&gt; to build a launch mailing list.&lt;/p&gt;
&lt;p&gt;Your site&amp;rsquo;s homepage at &lt;code&gt;https://myawesomedjangowebapp.com/&lt;/code&gt; is still under construction, so you redirect to &lt;code&gt;https://myawesomedjangowebapp.com/blog/&lt;/code&gt;. You decide to use a permanent redirect because you heard that permanent redirects are cached and caching make things faster, and faster is better because speed is a factor for ranking in Google search results.&lt;/p&gt;
&lt;p&gt;As it turns out, you&amp;rsquo;re not only a great developer, but also a talented writer. Your blog becomes popular, and your launch mailing list grows. After a couple of months, your app is ready. It now has a shiny homepage, and you finally remove the redirect.&lt;/p&gt;
&lt;p&gt;You send out an announcement email with a special discount code to your sizeable launch mailing list. You lean back and wait for the sign-up notifications to roll in.&lt;/p&gt;
&lt;p&gt;To your horror, your mailbox fills with messages from confused visitors who want to visit your app but are always being redirected to your blog.&lt;/p&gt;
&lt;p&gt;What has happened? Your blog readers had visited &lt;code&gt;https://myawesomedjangowebapp.com/&lt;/code&gt; when the redirect to &lt;code&gt;https://myawesomedjangowebapp.com/blog/&lt;/code&gt; was still active. Because it was a permanent redirect, it was cached in their browsers.&lt;/p&gt;
&lt;p&gt;When they clicked on the link in your launch announcement mail, their browsers never bothered to check your new homepage and went straight to your blog. Instead of celebrating your successful launch, you&amp;rsquo;re busy instructing your users how to fiddle with &lt;code&gt;chrome://net-internals&lt;/code&gt; to reset the cache of their browsers.&lt;/p&gt;
&lt;p&gt;The permanent nature of permanent redirects can also bite you while developing on your local machine. Let&amp;rsquo;s rewind to the moment when you implemented that fateful permanent redirect for myawesomedjangowebapp.com.&lt;/p&gt;
&lt;p&gt;You start the development server and open &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt;. As intended, your app redirects your browser to &lt;code&gt;http://127.0.0.1:8000/blog/&lt;/code&gt;. Satisfied with your work, you stop the development server and go to lunch.&lt;/p&gt;
&lt;p&gt;You return with a full belly, ready to tackle some client work. The client wants some simple changes to their homepage, so you load the client&amp;rsquo;s project and start the development server.&lt;/p&gt;
&lt;p&gt;But wait, what is going on here? The homepage is broken, it now returns a 404! Due to the afternoon slump, it takes you a while to notice that you&amp;rsquo;re being redirected to &lt;code&gt;http://127.0.0.1:8000/blog/&lt;/code&gt;, which doesn&amp;rsquo;t exist in the client&amp;rsquo;s project.&lt;/p&gt;
&lt;p&gt;To the browser, it doesn&amp;rsquo;t matter that the URL &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt; now serves a completely different application. All that matters to the browser is that this URL once in the past returned a permanent redirect to &lt;code&gt;http://127.0.0.1:8000/blog/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The takeaway from this story is that you should only use permanent redirects on URLs that you&amp;rsquo;ve no intention of ever using again. There is a place for permanent redirects, but you must be aware of their consequences.&lt;/p&gt;
&lt;p&gt;Even if you&amp;rsquo;re confident that you really need a permanent redirect, it&amp;rsquo;s a good idea to implement a temporary redirect first and only switch to its permanent cousin once you&amp;rsquo;re 100% sure everything works as intended.&lt;/p&gt;
&lt;h3 id=&quot;unvalidated-redirects-can-compromise-security&quot;&gt;Unvalidated Redirects Can Compromise Security&lt;/h3&gt;
&lt;p&gt;From a security perspective, redirects are a relatively safe technique. An attacker cannot hack a website with a redirect. After all, a redirect just redirects to a URL that an attacker could just type in the address bar of their browser.&lt;/p&gt;
&lt;p&gt;However, if you use some kind of user input, like a URL parameter, without proper validation as a redirect URL, this could be abused by an attacker for a phishing attack. This kind of redirect is called an &lt;a href=&quot;https://cwe.mitre.org/data/definitions/601.html&quot;&gt;open or unvalidated redirect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are legitimate use cases for redirecting to URL that is read from user input. A prime example is Django&amp;rsquo;s login view. It accepts a URL parameter &lt;code&gt;next&lt;/code&gt; that contains the URL of the page the user is redirected to after login. To redirect the user to their profile after login, the URL might look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://myawesomedjangowebapp.com/login/?next=/profile/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Django does validate the &lt;code&gt;next&lt;/code&gt; parameter, but let&amp;rsquo;s assume for a second that it doesn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Without validation, an attacker could craft a URL that redirects the user to a website under their control, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://myawesomedjangowebapp.com/login/?next=https://myawesomedjangowebapp.co/profile/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The website &lt;code&gt;myawesomedjangowebapp.co&lt;/code&gt; might then display an error message and trick the user into entering their credentials again.&lt;/p&gt;
&lt;p&gt;The best way to avoid open redirects is to not use any user input when building a redirect URL.&lt;/p&gt;
&lt;p&gt;If you cannot be sure that a URL is safe for redirection, you can use the function &lt;code&gt;django.utils.http.is_safe_url()&lt;/code&gt; to validate it. The docstring explains its usage quite well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;is_safe_url(url, host=None, allowed_hosts=None, require_https=False)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;True&lt;/code&gt; if the url is a safe redirection (i.e. it doesn&amp;rsquo;t point to a different host and uses a safe scheme).
Always return &lt;code&gt;False&lt;/code&gt; on an empty url.
If &lt;code&gt;require_https&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, only &amp;lsquo;https&amp;rsquo; will be considered a valid scheme, as opposed to &amp;lsquo;http&amp;rsquo; and &amp;lsquo;https&amp;rsquo; with the default, &lt;code&gt;False&lt;/code&gt;. (&lt;a href=&quot;https://github.com/django/django/blob/53a3d2b2454ff9a612a376f58bb7c61733f82d12/django/utils/http.py#L280&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s look at some examples.&lt;/p&gt;
&lt;p&gt;A relative URL is considered safe:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Import the function first.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.utils.http&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_safe_url&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_safe_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/profile/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A URL pointing to another host is generally not considered safe:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_safe_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://myawesomedjangowebapp.com/profile/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A URL pointing to another host is considered safe if its host is provided in &lt;code&gt;allowed_hosts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_safe_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://myawesomedjangowebapp.com/profile/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;allowed_hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myawesomedjangowebapp.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the argument &lt;code&gt;require_https&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, a URL using the &lt;code&gt;http&lt;/code&gt; scheme is not considered safe:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_safe_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://myawesomedjangowebapp.com/profile/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;allowed_hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myawesomedjangowebapp.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;require_https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This wraps up this guide on HTTP redirects with Django. Congratulations: you have now touched on every aspect of redirects all the way from the low-level details of the HTTP protocol to the high-level way of dealing with them in Django.&lt;/p&gt;
&lt;p&gt;You learned how an HTTP redirect looks under the hood, what the different status codes are, and how permanent and temporary redirects differ. This knowledge is not specific to Django and is valuable for web development in any language.&lt;/p&gt;
&lt;p&gt;You can now perform a redirect with Django, either by using the redirect response classes &lt;code&gt;HttpResponseRedirect&lt;/code&gt; and &lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt;, or with the convenience function &lt;code&gt;django.shortcuts.redirect()&lt;/code&gt;. You saw solutions for a couple of advanced use cases and know how to steer clear of common pitfalls.&lt;/p&gt;
&lt;p&gt;If you have any further question about HTTP redirects leave a comment below and in the meantime, happy redirecting!&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/ref/request-response/#django.http.HttpResponseRedirect&quot;&gt;Django documentation: &lt;code&gt;django.http.HttpResponseRedirect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/topics/http/shortcuts/#redirect&quot;&gt;Django documentation: &lt;code&gt;django.shortcuts.render()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/ref/class-based-views/base/#redirectview&quot;&gt;Django documentation: &lt;code&gt;django.views.generic.base.RedirectView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.4&quot;&gt;RFC 7231: Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content - 6.4 Redirection 3xx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;CWE-601: URL Redirection to Untrusted Site (&amp;lsquo;Open Redirect&amp;rsquo;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Advanced Git Tips for Python Developers</title>
      <id>https://realpython.com/advanced-git-for-pythonistas/</id>
      <link href="https://realpython.com/advanced-git-for-pythonistas/"/>
      <updated>2018-08-13T14:00:00+00:00</updated>
      <summary>In this Git tutorial for Python developers, we&#39;ll talk about how to address specific commits and entire ranges of commits, using the stash to save temporary work, comparing different commits, changing history, and how to clean up the mess if something doesn&#39;t work out.</summary>
      <content type="html">
        &lt;p&gt;If you&amp;rsquo;ve done a little work in Git and are starting to understand the basics we covered in &lt;a href=&quot;https://realpython.com/python-git-github-intro/&quot;&gt;our introduction to Git&lt;/a&gt;, but you want to learn to be more efficient and have more control, then this is the place for you!&lt;/p&gt;
&lt;p&gt;In this tutorial, we&amp;rsquo;ll talk about how to address specific commits and entire ranges of commits, using the stash to save temporary work, comparing different commits, changing history, and how to clean up the mess if something doesn&amp;rsquo;t work out.&lt;/p&gt;
&lt;p&gt;This article assumes you&amp;rsquo;ve worked through our first Git tutorial or at a minimum understand the basics of what Git is and how it works.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a lot of ground to cover, so let&amp;rsquo;s get going.&lt;/p&gt;
&lt;h2 id=&quot;revision-selection&quot;&gt;Revision Selection&lt;/h2&gt;
&lt;p&gt;There are several options to tell Git which revision (or commit) you want to use. We&amp;rsquo;ve already seen that we can use a full SHA (&lt;code&gt;25b09b9ccfe9110aed2d09444f1b50fa2b4c979c&lt;/code&gt;) and a short SHA (&lt;code&gt;25b09b9cc&lt;/code&gt;) to indicate a revision.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve also seen how you can use &lt;code&gt;HEAD&lt;/code&gt; or a branch name to specify a particular commit as well. There are a few other tricks that Git has up its sleeve, however.&lt;/p&gt;
&lt;h3 id=&quot;relative-referencing&quot;&gt;Relative Referencing&lt;/h3&gt;
&lt;p&gt;Sometimes it&amp;rsquo;s useful to be able to indicate a revision relative to a known position, like &lt;code&gt;HEAD&lt;/code&gt; or a branch name. Git provides two operators that, while similar, behave slightly differently.&lt;/p&gt;
&lt;p&gt;The first of these is the tilde (&lt;code&gt;~&lt;/code&gt;) operator. Git uses tilde to point to a parent of a commit, so &lt;code&gt;HEAD~&lt;/code&gt; indicates the revision before the last one committed. To move back further, you use a number after the tilde: &lt;code&gt;HEAD~3&lt;/code&gt; takes you back three levels.&lt;/p&gt;
&lt;p&gt;This works great until we run into merges. Merge commits have two parents, so the &lt;code&gt;~&lt;/code&gt; just selects the first one. While that works sometimes, there are times when you want to specify the second or later parent. That&amp;rsquo;s why Git has the caret (&lt;code&gt;^&lt;/code&gt;) operator.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;^&lt;/code&gt; operator moves to a specific parent of the specified revision. You use a number to indicate which parent. So &lt;code&gt;HEAD^2&lt;/code&gt; tells Git to select the second parent of the last one committed, &lt;strong&gt;not&lt;/strong&gt; the &amp;ldquo;grandparent.&amp;rdquo; It can be repeated to move back further: &lt;code&gt;HEAD^2^^&lt;/code&gt; takes you back three levels, selecting the second parent on the first step. If you don&amp;rsquo;t give a number, Git assumes &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Those of you using Windows will need to escape the &lt;code&gt;^&lt;/code&gt; character on the DOS command line by using a second &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To make life even more fun and less readable, I&amp;rsquo;ll admit, Git allows you to combine these methods, so &lt;code&gt;25b09b9cc^2~3^3&lt;/code&gt; is a valid way to indicate a revision if you&amp;rsquo;re walking back a tree structure with merges. It takes you to the second parent, then back three revisions from that, and then to the third parent.&lt;/p&gt;
&lt;h3 id=&quot;revision-ranges&quot;&gt;Revision Ranges&lt;/h3&gt;
&lt;p&gt;There are a couple of different ways to specify ranges of commits for commands like &lt;code&gt;git log&lt;/code&gt;. These don&amp;rsquo;t work exactly like slices in Python, however, so be careful!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Double Dot Notation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;double dot&amp;rdquo; method for specifying ranges looks like it sounds: &lt;code&gt;git log b05022238cdf08..60f89368787f0e&lt;/code&gt;. It&amp;rsquo;s tempting to think of this as saying &amp;ldquo;show me all commits after &lt;code&gt;b05022238cdf08&lt;/code&gt; up to and including &lt;code&gt;60f89368787f0e&lt;/code&gt;&amp;rdquo; and, if &lt;code&gt;b05022238cdf08&lt;/code&gt; is a direct ancestor of &lt;code&gt;60f89368787f0e&lt;/code&gt;, that&amp;rsquo;s exactly what it does.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For the rest of this section, I will be replacing the SHAs of individual commits with capital letters as I think that makes the diagrams a little easier to follow. We&amp;rsquo;ll use this &amp;ldquo;fake&amp;rdquo; notation later as well.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s a bit more powerful than that, however. The double dot notation actually is showing you all commits that are included in the second commit that are not included in the first commit. Let&amp;rsquo;s look at a few diagrams to clarify:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/drawio-git-diff-example-big.95fa2c7990ad.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/drawio-git-diff-example-big.95fa2c7990ad.png&quot; width=&quot;1458&quot; height=&quot;1287&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-diff-example-big.95fa2c7990ad.png&amp;amp;w=364&amp;amp;sig=c3256d0155bc470aa2ed120ac5af8faa0d17e5c3 364w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-diff-example-big.95fa2c7990ad.png&amp;amp;w=729&amp;amp;sig=9134445339598409ff25591972909087eb0f1c54 729w, https://files.realpython.com/media/drawio-git-diff-example-big.95fa2c7990ad.png 1458w&quot; sizes=&quot;75vw&quot; alt=&quot;Branch1-A-&amp;gt;B-&amp;gt;C, Branch2 A-&amp;gt;D-&amp;gt;E-&amp;gt;F&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we have two branches in our example repo, &lt;code&gt;branch1&lt;/code&gt; and &lt;code&gt;branch2&lt;/code&gt;, which diverged after commit &lt;code&gt;A&lt;/code&gt;. For starters, let&amp;rsquo;s look at the simple situation. I&amp;rsquo;ve modified the log output so that it matches the diagram:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline D..F
&lt;span class=&quot;go&quot;&gt;E &amp;quot;Commit message for E&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;F &amp;quot;Commit message for F&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;D..F&lt;/code&gt; gives you all of the commits on &lt;code&gt;branch2&lt;/code&gt; &lt;strong&gt;after&lt;/strong&gt; commit &lt;code&gt;D&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A more interesting example, and one I learned about while writing this tutorial, is the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline C..F
&lt;span class=&quot;go&quot;&gt;D &amp;quot;Commit message for D&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;E &amp;quot;Commit message for E&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;F &amp;quot;Commit message for F&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows the commits that are part of commit &lt;code&gt;F&lt;/code&gt; that are not part of commit &lt;code&gt;C&lt;/code&gt;. Because of the structure here, there is not a before/after relationship to these commits because they are on different branches.&lt;/p&gt;
&lt;div class=&quot;card mb-3&quot; id=&quot;collapse_cardcc6792&quot;&gt;
&lt;div class=&quot;card-header border-0&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapsecc6792&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapsecc6792&quot;&gt;Exercise: Double Dot Notation&lt;/button&gt; &lt;button class=&quot;btn btn-link float-right&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapsecc6792&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapsecc6792&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;collapsecc6792&quot; class=&quot;collapse&quot; data-parent=&quot;#collapse_cardcc6792&quot;&gt;&lt;div class=&quot;card-body&quot; markdown=&quot;1&quot;&gt;

&lt;p&gt;What do you think you&amp;rsquo;ll get if you reverse the order of &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card mb-3&quot; id=&quot;collapse_card8023c5&quot;&gt;
&lt;div class=&quot;card-header border-0&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse8023c5&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse8023c5&quot;&gt;Solution: Double Dot Notation&lt;/button&gt; &lt;button class=&quot;btn btn-link float-right&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse8023c5&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse8023c5&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;collapse8023c5&quot; class=&quot;collapse&quot; data-parent=&quot;#collapse_card8023c5&quot;&gt;&lt;div class=&quot;card-body&quot; markdown=&quot;1&quot;&gt;

&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline F..C
&lt;span class=&quot;go&quot;&gt;B &amp;quot;Commit message for B&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;C &amp;quot;Commit message for C&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Triple Dot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Triple dot notation uses, you guessed it, three dots between the revision specifiers. This works in a similar manner to the double dot notation except that it shows all commits that are in &lt;strong&gt;either&lt;/strong&gt; revision that are not included in &lt;strong&gt;both&lt;/strong&gt; revisions.
For our diagram above, using &lt;code&gt;C...F&lt;/code&gt; shows you this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline C...F
&lt;span class=&quot;go&quot;&gt;D &amp;quot;Commit message for D&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;E &amp;quot;Commit message for E&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;F &amp;quot;Commit message for F&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;B &amp;quot;Commit message for B&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;C &amp;quot;Commit message for C&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Double and triple dot notation can be quite powerful when you want to use a range of commits for a command, but they&amp;rsquo;re not as straightforward as many people think.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Branches vs. HEAD vs. SHA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is probably a good time to review what branches are in Git and how they relate to SHAs and HEAD.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; is the name Git uses to refer to &amp;ldquo;where your file system is pointing right now.&amp;rdquo; Most of the time, this will be pointing to a named branch, but it does not have to be. To look at these ideas, let&amp;rsquo;s walk through an example. Suppose your history looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/drawio-git-branch-step1-big.a431ad80dd56.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-33&quot; src=&quot;https://files.realpython.com/media/drawio-git-branch-step1-big.a431ad80dd56.png&quot; width=&quot;735&quot; height=&quot;1272&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step1-big.a431ad80dd56.png&amp;amp;w=183&amp;amp;sig=4ef6868d80b95fa0e162799c3a77c874fbba720f 183w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step1-big.a431ad80dd56.png&amp;amp;w=367&amp;amp;sig=f847481a38b7d0a3f7a7eaf57d0213a64de768af 367w, https://files.realpython.com/media/drawio-git-branch-step1-big.a431ad80dd56.png 735w&quot; sizes=&quot;75vw&quot; alt=&quot;Four Commits With No Branches&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At this point, you discover that you accidentally committed a Python logging statement in commit B. Rats. Now, most people would add a new commit, &lt;code&gt;E&lt;/code&gt;, push that to &lt;code&gt;master&lt;/code&gt; and be done. But you are learning Git and want to fix this the hard way and hide the fact that you made a mistake in the history.&lt;/p&gt;
&lt;p&gt;So you move &lt;code&gt;HEAD&lt;/code&gt; back to &lt;code&gt;B&lt;/code&gt; using &lt;code&gt;git checkout B&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/drawio-git-branch-step2-big.6c63995367f6.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-33&quot; src=&quot;https://files.realpython.com/media/drawio-git-branch-step2-big.6c63995367f6.png&quot; width=&quot;735&quot; height=&quot;1272&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step2-big.6c63995367f6.png&amp;amp;w=183&amp;amp;sig=ec500bd57c63f23d8d75333f031f64050f47995f 183w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step2-big.6c63995367f6.png&amp;amp;w=367&amp;amp;sig=e4ac8807015f5534657a8f801f7ee817395fdfea 367w, https://files.realpython.com/media/drawio-git-branch-step2-big.6c63995367f6.png 735w&quot; sizes=&quot;75vw&quot; alt=&quot;Four Commits, HEAD Points to Second Commit&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can see that &lt;code&gt;master&lt;/code&gt; hasn&amp;rsquo;t changed position, but &lt;code&gt;HEAD&lt;/code&gt; now points to &lt;code&gt;B&lt;/code&gt;. In the Intro to Git tutorial, we talked about the &amp;ldquo;detached HEAD&amp;rdquo; state. This is that state again!&lt;/p&gt;
&lt;p&gt;Since you want to commit changes, you create a new branch with &lt;code&gt;git checkout -b temp&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/drawio-git-branch-step3-big.94c7e15609ce.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-33&quot; src=&quot;https://files.realpython.com/media/drawio-git-branch-step3-big.94c7e15609ce.png&quot; width=&quot;735&quot; height=&quot;1272&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step3-big.94c7e15609ce.png&amp;amp;w=183&amp;amp;sig=5b150a68766caaa467217861c6ca5102f30c694b 183w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step3-big.94c7e15609ce.png&amp;amp;w=367&amp;amp;sig=72a7cd137c5d65a09b4395c62d21a2d24f9d5472 367w, https://files.realpython.com/media/drawio-git-branch-step3-big.94c7e15609ce.png 735w&quot; sizes=&quot;75vw&quot; alt=&quot;New Branch temp Points To Second Commit&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you edit the file and remove the offending log statement. Once that is done, you use &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit --amend&lt;/code&gt; to modify commit &lt;code&gt;B&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/drawio-git-branch-step4-big.7061c3167421.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/drawio-git-branch-step4-big.7061c3167421.png&quot; width=&quot;1002&quot; height=&quot;1272&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step4-big.7061c3167421.png&amp;amp;w=250&amp;amp;sig=3f7f97c147875c3c1a5daaf69d7b5a1941f0643e 250w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step4-big.7061c3167421.png&amp;amp;w=501&amp;amp;sig=de736cdcc83e6e598cb53cb6ddcca53f0c93e4ae 501w, https://files.realpython.com/media/drawio-git-branch-step4-big.7061c3167421.png 1002w&quot; sizes=&quot;75vw&quot; alt=&quot;New Commit B&amp;#39; Added&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Whoa! There&amp;rsquo;s a new commit here called &lt;code&gt;B&#39;&lt;/code&gt;. Just like &lt;code&gt;B&lt;/code&gt;, it has &lt;code&gt;A&lt;/code&gt; as its parent, but &lt;code&gt;C&lt;/code&gt; doesn&amp;rsquo;t know anything about it. Now we want master to be based on this new commit, &lt;code&gt;B&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because you have a sharp memory, you remember that the rebase command does just that. So you get back to the &lt;code&gt;master&lt;/code&gt; branch by typing &lt;code&gt;git checkout master&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/drawio-git-branch-step5-big.29af45f4ac7c.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/drawio-git-branch-step5-big.29af45f4ac7c.png&quot; width=&quot;957&quot; height=&quot;1272&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step5-big.29af45f4ac7c.png&amp;amp;w=239&amp;amp;sig=31b5eb7a687fd47e73fff7614bbab917d7c5c518 239w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step5-big.29af45f4ac7c.png&amp;amp;w=478&amp;amp;sig=0f10cc478442d95e5d244fac00000f4a4eb9dc60 478w, https://files.realpython.com/media/drawio-git-branch-step5-big.29af45f4ac7c.png 957w&quot; sizes=&quot;75vw&quot; alt=&quot;HEAD Moved Back To master&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re on master, you can use &lt;code&gt;git rebase temp&lt;/code&gt; to replay &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; on top of &lt;code&gt;B&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/drawio-git-branch-step6-big1.b74a8ab128c4.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/drawio-git-branch-step6-big1.b74a8ab128c4.png&quot; width=&quot;1029&quot; height=&quot;1272&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step6-big1.b74a8ab128c4.png&amp;amp;w=257&amp;amp;sig=1affac499f6d60fb6c1c1d42cc05d0630e524fe1 257w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/drawio-git-branch-step6-big1.b74a8ab128c4.png&amp;amp;w=514&amp;amp;sig=888b8236f228e9197090dbb3ba600731ee853c55 514w, https://files.realpython.com/media/drawio-git-branch-step6-big1.b74a8ab128c4.png 1029w&quot; sizes=&quot;75vw&quot; alt=&quot;master Rebased On B&amp;#39;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can see that the rebase created commits &lt;code&gt;C&#39;&lt;/code&gt; and &lt;code&gt;D&#39;&lt;/code&gt;. &lt;code&gt;C&#39;&lt;/code&gt; still has the same changes that &lt;code&gt;C&lt;/code&gt; has, and &lt;code&gt;D&#39;&lt;/code&gt; has the same changes as &lt;code&gt;D&lt;/code&gt;, but they have different SHAs because they are now based on &lt;code&gt;B&#39;&lt;/code&gt; instead of &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As I mentioned earlier, you normally wouldn&amp;rsquo;t go to this much trouble just to fix an errant log statement, but there are times when this approach could be useful, and it does illustrate the differences between &lt;code&gt;HEAD&lt;/code&gt;, commits, and branches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git has even more tricks up its sleeve, but I&amp;rsquo;ll stop here as I&amp;rsquo;ve rarely seen the other methods used in the wild. If you&amp;rsquo;d like to learn about how to do similar operations with more than two branches, checkout the excellent write-up on Revision Selection in the &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&quot;&gt;Pro Git book&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;handling-interruptions-git-stash&quot;&gt;Handling Interruptions: &lt;code&gt;git stash&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One of the Git features I use frequently and find quite handy is the &lt;code&gt;stash&lt;/code&gt;. It provides a simple mechanism to save the files you&amp;rsquo;re working on but are not ready to commit so you can switch to a different task. In this section, you&amp;rsquo;ll walk through a simple use case first, looking at each of the different commands and options, then you will wrap up with a few other use cases in which &lt;code&gt;git stash&lt;/code&gt; really shines.&lt;/p&gt;
&lt;h3 id=&quot;git-stash-save-and-git-stash-pop&quot;&gt;&lt;code&gt;git stash save&lt;/code&gt; and &lt;code&gt;git stash pop&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Suppose you&amp;rsquo;re working on a nasty bug. You&amp;rsquo;ve got Python logging code in two files, &lt;code&gt;file1&lt;/code&gt; and &lt;code&gt;file2&lt;/code&gt;, to help you track it down, and you&amp;rsquo;ve added &lt;code&gt;file3&lt;/code&gt; as a possible solution.&lt;/p&gt;
&lt;p&gt;In short, the changes to the repo are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ve edited &lt;code&gt;file1&lt;/code&gt; and done &lt;code&gt;git add file1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ve edited &lt;code&gt;file2&lt;/code&gt; but have not added it.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ve created &lt;code&gt;file3&lt;/code&gt; and have not added it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You do a &lt;code&gt;git status&lt;/code&gt; to confirm the condition of the repo:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes to be committed:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file1&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file2&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Untracked files:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   file3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now a coworker (aren&amp;rsquo;t they annoying?) walks up and tells you that production is down and it&amp;rsquo;s &amp;ldquo;your turn.&amp;rdquo; You know you can break out your mad &lt;code&gt;git stash&lt;/code&gt; skills to save you some time and save the day.&lt;/p&gt;
&lt;p&gt;You haven&amp;rsquo;t finished with the work on files 1, 2, and 3, so you really don&amp;rsquo;t want to commit those changes but you need to get them off of your working directory so you can switch to a different branch to fix that bug. This is the most basic use case for &lt;code&gt;git stash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;git stash save&lt;/code&gt; to &amp;ldquo;put those changes away&amp;rdquo; for a little while and return to a clean working directory. The default option for &lt;code&gt;stash&lt;/code&gt; is &lt;code&gt;save&lt;/code&gt; so this is usually written as just &lt;code&gt;git stash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you save something to &lt;code&gt;stash&lt;/code&gt;, it creates a unique storage spot for those changes and returns your working directory to the state of the last commit. It tells you what it did with a cryptic message:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash save
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state WIP on master: 387dcfc adding some files&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at 387dcfc adding some files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In that output, &lt;code&gt;master&lt;/code&gt; is the name of the branch, &lt;code&gt;387dcfc&lt;/code&gt; is the SHA of the last commit, &lt;code&gt;adding some files&lt;/code&gt; is the commit message for that commit, and &lt;code&gt;WIP&lt;/code&gt; stands for &amp;ldquo;work in progress.&amp;rdquo; The output on your repo will likely be different in those details.&lt;/p&gt;
&lt;p&gt;If you do a &lt;code&gt;status&lt;/code&gt; at this point, it will still show &lt;code&gt;file3&lt;/code&gt; as an untracked file, but &lt;code&gt;file1&lt;/code&gt; and &lt;code&gt;file2&lt;/code&gt; are no longer there:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Untracked files:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   file3&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, as far as Git is concerned, your working directory is &amp;ldquo;clean,&amp;rdquo; and you are free to do things like check out a different branch, cherry-pick changes, or anything else you need to.&lt;/p&gt;
&lt;p&gt;You go and check out the other branch, fix the bug, earn the admiration of your coworkers, and now are ready to return to this work.&lt;/p&gt;
&lt;p&gt;How do you get the last stash back? &lt;code&gt;git stash pop&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;pop&lt;/code&gt; command at this point looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash pop
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   modified:   file2&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Untracked files:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   file3&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Dropped refs/stash@{0} (71d0f2469db0f1eb9ee7510a9e3e9bd3c1c4211c)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can see at the bottom that it has a message about &amp;ldquo;Dropped refs/stash@{0}&amp;rdquo;. We&amp;rsquo;ll talk more about that syntax below, but it&amp;rsquo;s basically saying that it applied the changes you had stashed and got rid of the stash itself. Before you ask, yes, there is a way to use the stash and &lt;strong&gt;not&lt;/strong&gt; get rid of it, but let&amp;rsquo;s not get ahead of ourselves.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll notice that &lt;code&gt;file1&lt;/code&gt; used to be in the index but no longer is. By default, &lt;code&gt;git stash pop&lt;/code&gt; doesn&amp;rsquo;t maintain the status of changes like that. There is an option to tell it to do so, of course. Add &lt;code&gt;file1&lt;/code&gt; back to the index and try again:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add file1
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes to be committed:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file1&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file2&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Untracked files:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   file3&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash save &lt;span class=&quot;s2&quot;&gt;&amp;quot;another try&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state On master: another try&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at 387dcfc adding some files&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash pop --index
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes to be committed:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file1&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file2&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Untracked files:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   file3&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Dropped refs/stash@{0} (aed3a02aeb876c1137dd8bab753636a294a3cc43)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that the second time we added the &lt;code&gt;--index&lt;/code&gt; option to the &lt;code&gt;git pop&lt;/code&gt; command, which tells it to try to maintain the status of whether or not a file is in the index.&lt;/p&gt;
&lt;p&gt;In the previous two attempts, you probably noticed that &lt;code&gt;file3&lt;/code&gt; was not included in your stash. You might want to keep &lt;code&gt;file3&lt;/code&gt; together with those other changes. Fortunately, there is an option to help you with that: &lt;code&gt;--include-untracked&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Assuming we&amp;rsquo;re back to where we were at the end of the last example, we can re-run the command:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash save --include-untracked &lt;span class=&quot;s2&quot;&gt;&amp;quot;third attempt&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state On master: third attempt&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at 387dcfc adding some files&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This put the untracked &lt;code&gt;file3&lt;/code&gt; into the stash with our other changes.&lt;/p&gt;
&lt;p&gt;Before we move on, I just want to point out that &lt;code&gt;save&lt;/code&gt; is the default option for &lt;code&gt;git stash&lt;/code&gt;. Unless you&amp;rsquo;re specifying a message, which we&amp;rsquo;ll discuss later, you can simply use &lt;code&gt;git stash&lt;/code&gt;, and it will do a &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;git-stash-list&quot;&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;One of the powerful features of &lt;code&gt;git stash&lt;/code&gt; is that you can have more than one of them. Git stores stashes in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot;&gt;stack&lt;/a&gt;, which means that by default it always works with the most recently saved stash. The &lt;code&gt;git stash list&lt;/code&gt; command will show you the stack of stashes in your local repo. Let&amp;rsquo;s create a couple of stashes so we can see how this works:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;editing file1&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; file1
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash save &lt;span class=&quot;s2&quot;&gt;&amp;quot;the first save&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state On master: the first save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at b3e9b4d adding file3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# you can see that stash save cleaned up our working directory&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# now create a few more stashes by &amp;quot;editing&amp;quot; files and saving them&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;editing file2&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; file2
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash save &lt;span class=&quot;s2&quot;&gt;&amp;quot;the second save&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state On master: the second save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at b3e9b4d adding file3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;editing file3&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; file3
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash save &lt;span class=&quot;s2&quot;&gt;&amp;quot;the third save&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at b3e9b4d adding file3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You now have three different stashes saved. Fortunately, Git has a system for dealing with stashes that makes this easy to deal with. The first step of the system is the &lt;code&gt;git stash list&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;go&quot;&gt;stash@{0}: On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{1}: On master: the second save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{2}: On master: the first save&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;List shows you the stack of stashes you have in this repo, the newest one first. Notice the &lt;code&gt;stash@{n}&lt;/code&gt; syntax at the start of each entry? That&amp;rsquo;s the name of that stash. The rest of the &lt;code&gt;git stash&lt;/code&gt; subcommand will use that name to refer to a specific stash. Generally if you don&amp;rsquo;t give a name, it always assumes you mean the most recent stash, &lt;code&gt;stash@{0}&lt;/code&gt;. You&amp;rsquo;ll see more of this in a bit.&lt;/p&gt;
&lt;p&gt;Another thing I&amp;rsquo;d like to point out here is that you can see the message we used when we did the &lt;code&gt;git stash save &quot;message&quot;&lt;/code&gt; command in the listing. This can be quite helpful if you have a number of things stashed.&lt;/p&gt;
&lt;p&gt;As we mentioned above, the &lt;code&gt;save [name]&lt;/code&gt; portion of the &lt;code&gt;git stash save [name]&lt;/code&gt; command is not required. You can simply type &lt;code&gt;git stash&lt;/code&gt;, and it defaults to a save command, but the auto-generated message doesn&amp;rsquo;t give you much information:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;more editing file1&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; file1
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state WIP on master: 387dcfc adding some files&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at 387dcfc adding some files&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;go&quot;&gt;stash@{0}: WIP on master: 387dcfc adding some files&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{1}: On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{2}: On master: the second save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{3}: On master: the first save&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The default message is &lt;code&gt;WIP on &amp;lt;branch&amp;gt;: &amp;lt;SHA&amp;gt; &amp;lt;commit message&amp;gt;.&lt;/code&gt;, which doesn&amp;rsquo;t tell you much. If we had done that for the first three stashes, they all would have had the same message. That&amp;rsquo;s why, for the examples here, I use the full &lt;code&gt;git stash save &amp;lt;message&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt;
&lt;h3 id=&quot;git-stash-show&quot;&gt;&lt;code&gt;git stash show&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Okay, so now you have a bunch of stashes, and you might even have meaningful messages describing them, but what if you want to see exactly what&amp;rsquo;s in a particular stash? That&amp;rsquo;s where the &lt;code&gt;git stash show&lt;/code&gt; command comes in. Using the default options tells you how many files have changed, as well as which files have changed:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash show stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1 | 1 +&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 1 file changed, 1 insertion(+)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The default options do not tell you what the changes were, however. Fortunately, you can add the &lt;code&gt;-p/--patch&lt;/code&gt; option, and it will show you the diffs in &amp;ldquo;patch&amp;rdquo; format:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash show -p stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;diff --git a/file1 b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index e212970..04dbd7b 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1 +1,2 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+editing file1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here it shows you that the line &amp;ldquo;editing file1&amp;rdquo; was added to &lt;code&gt;file1&lt;/code&gt;. If you&amp;rsquo;re not familiar with the patch format for displaying diffs, don&amp;rsquo;t worry. When you get to the &lt;code&gt;git difftool&lt;/code&gt; section below, you&amp;rsquo;ll see how to bring up a visual diff tool on a stash.&lt;/p&gt;
&lt;h3 id=&quot;git-stash-pop-vs-git-stash-apply&quot;&gt;&lt;code&gt;git stash pop&lt;/code&gt; vs. &lt;code&gt;git stash apply&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You saw earlier how to pop the most recent stash back into your working directory by using the &lt;code&gt;git stash pop&lt;/code&gt; command. You probably guessed that the stash name syntax we saw earlier also applies to the pop command:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;go&quot;&gt;stash@{0}: On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{1}: On master: the second save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{2}: On master: the first save&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash pop stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;while read line; do echo -n &amp;quot;$line&amp;quot; | wc -c; done&amp;lt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   modified:   file2&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Dropped stash@{1} (84f7c9890908a1a1bf3c35acfe36a6ecd1f30a2c)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;go&quot;&gt;stash@{0}: On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{1}: On master: the first save&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that the &lt;code&gt;git stash pop stash@{1}&lt;/code&gt; put &amp;ldquo;the second save&amp;rdquo; back into our working directory and collapsed our stack so that only the first and third stashes are there. Notice how &amp;ldquo;the first save&amp;rdquo; changed from &lt;code&gt;stash@{2}&lt;/code&gt; to &lt;code&gt;stash@{1}&lt;/code&gt; after the &lt;code&gt;pop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also possible to put a stash onto your working directory but leave it in the stack as well. This is done with &lt;code&gt;git stash apply&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;go&quot;&gt;stash@{0}: On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{1}: On master: the first save&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash apply stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   modified:   file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   modified:   file2&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;go&quot;&gt;stash@{0}: On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{1}: On master: the first save&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be handy if you want to apply the same set of changes multiple times. I recently used this while working on prototype hardware. There were changes needed to get the code to work on the particular hardware on my desk, but none of the others. I used &lt;code&gt;git stash apply&lt;/code&gt; to apply these changes each time I brought down a new copy of master.&lt;/p&gt;
&lt;h3 id=&quot;git-stash-drop&quot;&gt;&lt;code&gt;git stash drop&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The last stash subcommand to look at is &lt;code&gt;drop&lt;/code&gt;. This is useful when you want to throw away a stash and not apply it to your working directory. It looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;go&quot;&gt;stash@{0}: On master: the third save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stash@{1}: On master: the first save&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash drop stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Dropped stash@{1} (9aaa9996bd6aa363e7be723b4712afaae4fc3235)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash drop
&lt;span class=&quot;go&quot;&gt;Dropped refs/stash@{0} (194f99db7a8fcc547fdd6d9f5fbffe8b896e2267)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash list
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This dropped the last two stashes, and Git did not change your working directory. There are a couple of things to notice in the above example. First, the &lt;code&gt;drop&lt;/code&gt; command, like most of the other &lt;code&gt;git stash&lt;/code&gt; commands, can use the optional &lt;code&gt;stash@{n}&lt;/code&gt; names. If you don&amp;rsquo;t supply it, Git assumes &lt;code&gt;stash@{0}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other interesting thing is that the output from the drop command gives you a SHA. Like other SHAs in Git, you can make use of this. If, for example, you really meant to do a &lt;code&gt;pop&lt;/code&gt; and not a &lt;code&gt;drop&lt;/code&gt; on &lt;code&gt;stash@{1}&lt;/code&gt; above, you can create a new branch with that SHA it showed you (&lt;code&gt;9aaa9996&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git branch tmp 9aaa9996
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# use git log &amp;lt;branchname&amp;gt; to see commits on that branch&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log tmp
&lt;span class=&quot;go&quot;&gt;commit 9aaa9996bd6aa363e7be723b4712afaae4fc3235&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Merge: b3e9b4d f2d6ecc&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Author: Jim Anderson &amp;lt;your_email_here@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Date:   Sat May 12 09:34:29 2018 -0600&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;    On master: the first save&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[rest of log deleted for brevity]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have that branch, you can use the &lt;code&gt;git merge&lt;/code&gt; or other techniques to get those changes back to your branch. If you didn&amp;rsquo;t save the SHA from the &lt;code&gt;git drop&lt;/code&gt; command, there are other methods to attempt to recover the changes, but they can get complicated. You can read more about it &lt;a href=&quot;https://stackoverflow.com/questions/89332/how-to-recover-a-dropped-stash-in-git&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;git-stash-example-pulling-into-a-dirty-tree&quot;&gt;&lt;code&gt;git stash&lt;/code&gt; Example: Pulling Into a Dirty Tree&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s wrap up this section on &lt;code&gt;git stash&lt;/code&gt; by looking at one of its uses that wasn&amp;rsquo;t obvious to me at first. Frequently when you&amp;rsquo;re working on a shared branch for a longer period of time, another developer will push changes to the branch that you want to get to your local repo. You&amp;rsquo;ll remember that we use the &lt;code&gt;git pull&lt;/code&gt; command to do this. However, if you have local changes in files that the pull will modify, Git refuses with an error message explaining what went wrong:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;error: Your local changes to the following files would be overwritten by merge:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   &amp;lt;list of files that conflict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Please, commit your changes or stash them before you can merge.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Aborting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could commit this and then do a &lt;code&gt;pull&lt;/code&gt; , but that would create a merge node, and you might not be ready to commit those files. Now that you know &lt;code&gt;git stash&lt;/code&gt;, you can use it instead:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash
&lt;span class=&quot;go&quot;&gt;Saved working directory and index state WIP on master: b25fe34 Cleaned up when no TOKEN is present. Added ignored tasks&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;HEAD is now at &amp;lt;SHA&amp;gt; &amp;lt;commit message&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git pull
&lt;span class=&quot;go&quot;&gt;Updating &amp;lt;SHA1&amp;gt;..&amp;lt;SHA2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Fast-forward&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  &amp;lt;more info here&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git stash pop
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Your branch is up-to-date with &amp;#39;origin/master&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   &amp;lt;rest of stash pop output trimmed&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s entirely possible that doing the &lt;code&gt;git stash pop&lt;/code&gt; command will produce a merge conflict. If that&amp;rsquo;s the case, you&amp;rsquo;ll need to hand-edit the conflict to resolve it, and then you can proceed. We&amp;rsquo;ll discuss resolving merge conflicts below.&lt;/p&gt;
&lt;h2 id=&quot;comparing-revisions-git-diff&quot;&gt;Comparing Revisions: &lt;code&gt;git diff&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;git diff&lt;/code&gt; command is a powerful feature that you&amp;rsquo;ll find yourself using quite frequently. I looked up the list of things it can compare and was surprised by the list. Try typing &lt;code&gt;git diff --help&lt;/code&gt; if you&amp;rsquo;d like to see for yourself. I won&amp;rsquo;t cover all of those use cases here, as many of them aren&amp;rsquo;t too common.&lt;/p&gt;
&lt;p&gt;This section has several use cases with the &lt;code&gt;diff&lt;/code&gt; command, which displays on the command line. The next section shows how you can set Git up to use a visual diff tool like Meld, Windiff, BeyondCompare, or even extensions in your IDE. The options for &lt;code&gt;diff&lt;/code&gt; and &lt;code&gt;difftool&lt;/code&gt; are the same, so most of the discussion in this section will apply there too, but it&amp;rsquo;s easier to show the output on the command line version.&lt;/p&gt;
&lt;p&gt;The most common use of &lt;code&gt;git diff&lt;/code&gt; is to see what you have modified in your working directory:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m editing file3 now&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; file3
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff
&lt;span class=&quot;go&quot;&gt;diff --git a/file3 b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index faf2282..c5dd702 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1,3 +1,4 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{other contents of files3}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+I&amp;#39;m editing file3 now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, &lt;code&gt;diff&lt;/code&gt; shows you the diffs in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Patch_(Unix)&quot;&gt;&amp;ldquo;patch&amp;rdquo;&lt;/a&gt; format right on the command line. Once you work through the format, you can see that the &lt;code&gt;+&lt;/code&gt; characters indicate that a line has been added to the file, and, as you&amp;rsquo;d expect, the line &lt;code&gt;I&#39;m editing file3 now&lt;/code&gt; was added to &lt;code&gt;file3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The default options for &lt;code&gt;git diff&lt;/code&gt; are to show you what changes are in your working directory that are &lt;strong&gt;not&lt;/strong&gt; in your index or in HEAD. If you add the above change to the index and then do diff, it shows that there are no diffs:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add file3
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff
&lt;span class=&quot;go&quot;&gt;[no output here]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I found this confusing for a while, but I&amp;rsquo;ve grown to like it. To see the changes that are in the index and staged for the next commit, use the &lt;code&gt;--staged&lt;/code&gt; option:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff --staged
&lt;span class=&quot;go&quot;&gt;diff --git a/file3 b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index faf2282..c5dd702 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1,3 +1,4 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+I&amp;#39;m editing file3 now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;git diff&lt;/code&gt; command can also be used to compare any two commits in your repo. This can show you the changes between two SHAs:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff b3e9b4d 387dcfc
&lt;span class=&quot;go&quot;&gt;diff --git a/file3 b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;deleted file mode 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index faf2282..0000000&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ /dev/null&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1,3 +0,0 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-file3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also use branch names to see the full set of changes between one branch and another:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff master tmp
&lt;span class=&quot;go&quot;&gt;diff --git a/file1 b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index e212970..04dbd7b 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1 +1,2 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+editing file1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can even use any mix of the revision naming methods we looked at above:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff master^ master
&lt;span class=&quot;go&quot;&gt;diff --git a/file3 b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;new file mode 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index 0000000..faf2282&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- /dev/null&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -0,0 +1,3 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you compare two branches, it shows you all of the changes between two branches. Frequently, you only want to see the diffs for a single file. You can restrict the output to a file by listing the file after a &lt;code&gt;--&lt;/code&gt; (two minuses) option:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff HEAD~3 HEAD
&lt;span class=&quot;go&quot;&gt;diff --git a/file1 b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index e212970..04dbd7b 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1 +1,2 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+editing file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;diff --git a/file2 b/file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index 89361a0..91c5d97 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1,2 +1,3 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+editing file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;diff --git a/file3 b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index faf2282..c5dd702 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1,3 +1,4 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+I&amp;#39;m editing file3 now&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff HEAD~3 HEAD -- file3
&lt;span class=&quot;go&quot;&gt;diff --git a/file3 b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index faf2282..c5dd702 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1,3 +1,4 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+I&amp;#39;m editing file3 now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are many, many options for &lt;code&gt;git diff&lt;/code&gt;, and I won&amp;rsquo;t go into them all, but I do want to explore another use case, which I use frequently, showing the files that were changed in a commit.&lt;/p&gt;
&lt;p&gt;In your current repo, the most recent commit on &lt;code&gt;master&lt;/code&gt; added a line of text to &lt;code&gt;file1&lt;/code&gt;. You can see that by comparing &lt;code&gt;HEAD&lt;/code&gt; with &lt;code&gt;HEAD^&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff HEAD^ HEAD
&lt;span class=&quot;go&quot;&gt;diff --git a/file1 b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index e212970..04dbd7b 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1 +1,2 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+editing file1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s fine for this small example, but frequently the diffs for a commit can be several pages long, and it can get quite difficult to pull out the filenames. Of course, Git has an option to help with that:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff HEAD^ HEAD --name-only
&lt;span class=&quot;go&quot;&gt;file1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;--name-only&lt;/code&gt; option will show you the list of filename that were changed between two commits, but not what changed in those files.&lt;/p&gt;
&lt;p&gt;As I said above, there are &lt;strong&gt;many&lt;/strong&gt; options and use cases covered by the &lt;code&gt;git diff&lt;/code&gt; command, and you&amp;rsquo;ve just scratched the surface here. Once you have the commands listed above figured out, I encourage you to look at &lt;code&gt;git diff --help&lt;/code&gt; and see what other tricks you can find. I definitely learned new things preparing this tutorial!&lt;/p&gt;
&lt;h2 id=&quot;git-difftool&quot;&gt;&lt;code&gt;git difftool&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Git has a mechanism to use a visual diff tool to show diffs instead of just using the command line format we&amp;rsquo;ve seen thus far. All of the options and features you looked at with &lt;code&gt;git diff&lt;/code&gt; still work here, but it will show the diffs in a separate window, which many people, myself included, find easier to read. For this example, I&amp;rsquo;m going to use &lt;code&gt;meld&lt;/code&gt; as the diff tool because it&amp;rsquo;s available on Windows, Mac, and Linux.&lt;/p&gt;
&lt;p&gt;Difftool is something that is much easier to use if you set it up properly. Git has a set of config options that control the defaults for &lt;code&gt;difftool&lt;/code&gt;. You can set these from the shell using the &lt;code&gt;git config&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global diff.tool meld
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global difftool.prompt &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;prompt&lt;/code&gt; option is one I find important. If you do not specify this, Git will prompt you before it launches the external build tool every time it starts. This can be quite annoying as it does it for every file in a diff, one at a time:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git difftool HEAD^ HEAD
&lt;span class=&quot;go&quot;&gt;Viewing (1/1): &amp;#39;python-git-intro/new_section.md&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Launch &amp;#39;meld&amp;#39; [Y/n]: y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Setting &lt;code&gt;prompt&lt;/code&gt; to false forces Git to launch the tool without asking, speeding up your process and making you that much better!&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;diff&lt;/code&gt; discussion above, you covered most of the features of &lt;code&gt;difftool&lt;/code&gt;, but I wanted to add one thing I learned while researching for this article. Do you remember above when you were looking at the &lt;code&gt;git stash show&lt;/code&gt; command? I mentioned that there was a way to see what is in a given stash visually, and &lt;code&gt;difftool&lt;/code&gt; is that way. All of the syntax we learned for addressing stashes works with difftool:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git difftool stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As with all &lt;code&gt;stash&lt;/code&gt; subcommands, if you just want to see the latest stash, you can use the &lt;code&gt;stash&lt;/code&gt; shortcut:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git difftool stash
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Many IDEs and editors have tools that can help with viewing diffs. There is a list of editor-specific tutorials at the end of the &lt;a href=&quot;https://realpython.com/python-git-github-intro/&quot;&gt;Introduction to Git&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;h2 id=&quot;changing-history&quot;&gt;Changing History&lt;/h2&gt;
&lt;p&gt;One feature of Git that frightens some people is that it has the ability to change commits. While I can understand their concern, this is part of the tool, and, like any powerful tool, you can cause trouble if you use it unwisely.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll talk about several ways to modify commits, but before we do, let&amp;rsquo;s discuss when this is appropriate. In previous sections you saw the difference between your local repo and a remote repo. Commits that you have created but have not pushed are in your local repo only. Commits that other developers have pushed but you have not pulled are in the remote repo only. Doing a &lt;code&gt;push&lt;/code&gt; or a &lt;code&gt;pull&lt;/code&gt; will get these commits into both repos.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;only&lt;/strong&gt; time you should be thinking about modifying a commit is if it exists on your local repo and not the remote. If you modify a commit that has already been pushed from the remote, you are very likely to have a difficult time pushing or pulling from that remote, and your coworkers will be unhappy with you if you succeed.&lt;/p&gt;
&lt;p&gt;That caveat aside, let&amp;rsquo;s talk about how you can modify commits and change history!&lt;/p&gt;
&lt;h3 id=&quot;git-commit-amend&quot;&gt;&lt;code&gt;git commit --amend&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;What do you do if you just made a commit but then realize that &lt;code&gt;flake8&lt;/code&gt; has an error when you run it? Or you spot a typo in the commit message you just entered? Git will allow you to &amp;ldquo;amend&amp;rdquo; a commit:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;I am bad at spilling&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[master 63f74b7] I am bad at spilling&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 1 file changed, 4 insertions(+)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit --amend -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;I am bad at spelling&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[master 951bf2f] I am bad at spelling&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; Date: Tue May 22 20:41:27 2018 -0600&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 1 file changed, 4 insertions(+)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if you look at the log after the amend, you&amp;rsquo;ll see that there was only one commit, and it has the correct message:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log
&lt;span class=&quot;go&quot;&gt;commit 951bf2f45957079f305e8a039dea1771e14b503c&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Author: Jim Anderson &amp;lt;your_email_here@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Date:   Tue May 22 20:41:27 2018 -0600&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;    I am bad at spelling&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;commit c789957055bd81dd57c09f5329c448112c1398d8&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Author: Jim Anderson &amp;lt;your_email_here@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Date:   Tue May 22 20:39:17 2018 -0600&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;    new message&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[rest of log deleted]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you had modified and added files before the amend, those would have been included in the single commit as well. You can see that this is a handy tool for fixing mistakes. I&amp;rsquo;ll warn you again that doing a &lt;code&gt;commit --amend&lt;/code&gt; modifies the commit. If the original commit was pushed to a remote repo, someone else may already have based changes on it. That would be a mess, so only use this for commits that are local-only.&lt;/p&gt;
&lt;h3 id=&quot;git-rebase&quot;&gt;&lt;code&gt;git rebase&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;rebase&lt;/code&gt; operation is similar to a merge, but it can produce a much cleaner history. When you rebase, Git will find the common ancestor between your current branch and the specified branch. It will then take all of the changes after that common ancestor from your branch and &amp;ldquo;replay&amp;rdquo; them on top of the other branch. The result will look like you did all of your changes &lt;strong&gt;after&lt;/strong&gt; the other branch.&lt;/p&gt;
&lt;p&gt;This can be a little hard to visualize, so let&amp;rsquo;s look at some actual commits. For this exercise, I&amp;rsquo;m going to use the &lt;code&gt;--oneline&lt;/code&gt; option on the &lt;code&gt;git log&lt;/code&gt; command to cut down on the clutter. Let&amp;rsquo;s start with a feature branch you&amp;rsquo;ve been working on called &lt;code&gt;my_feature_branch&lt;/code&gt;. Here&amp;rsquo;s the state of that branch:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; $&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;143ae7f second feature commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;aef68dc first feature commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2512d27 Common Ancestor Commit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that the &lt;code&gt;--oneline&lt;/code&gt; option, as you might expect, shows just the SHA and the commit message for each commit. Your branch has two commits after the one labeled &lt;code&gt;2512d27 Common Ancestor Commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You need a second branch if you&amp;rsquo;re going to do a rebase and &lt;code&gt;master&lt;/code&gt; seems like a good choice. Here&amp;rsquo;s the current state of the &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline master
&lt;span class=&quot;go&quot;&gt;23a558c third master commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5ec06af second master commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;190d6af first master commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2512d27 Common Ancestor Commit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are three commits on &lt;code&gt;master&lt;/code&gt; after &lt;code&gt;2512d27 Common Ancestor Commit&lt;/code&gt;. While you still have &lt;code&gt;my_feature_branch&lt;/code&gt; checked out, you can do a &lt;code&gt;rebase&lt;/code&gt; to put the two feature commits &lt;strong&gt;after&lt;/strong&gt; the three commits on master:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git rebase master
&lt;span class=&quot;go&quot;&gt;First, rewinding head to replay your work on top of it...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Applying: first feature commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Applying: second feature commit&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;cf16517 second feature commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;69f61e9 first feature commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;23a558c third master commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5ec06af second master commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;190d6af first master commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2512d27 Common Ancestor Commit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two things to notice in this log listing:&lt;/p&gt;
&lt;p&gt;1) As advertised, the two feature commits are after the three master commits.&lt;/p&gt;
&lt;p&gt;2) The SHAs of those two feature commits have changed.&lt;/p&gt;
&lt;p&gt;The SHAs are different because the repo is slightly different. The commits represent the same changes to the files, but since they were added on top of the changes already in &lt;code&gt;master&lt;/code&gt;, the state of the repo is different, so they have different SHAs.&lt;/p&gt;
&lt;p&gt;If you had done a &lt;code&gt;merge&lt;/code&gt; instead of a &lt;code&gt;rebase&lt;/code&gt;, there would have been a new commit with the message &lt;code&gt;Merge branch &#39;master&#39; into my_feature_branch&lt;/code&gt;, and the SHAs of the two feature commits would be unchanged. Doing a rebase avoids the extra merge commit and makes your revision history cleaner.&lt;/p&gt;
&lt;h3 id=&quot;git-pull-r&quot;&gt;&lt;code&gt;git pull -r&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Using a rebase can be a handy tool when you&amp;rsquo;re working on a branch with a different developer, too. If there are changes on the remote, and you have local commits to the same branch, you can use the &lt;code&gt;-r&lt;/code&gt; option on the &lt;code&gt;git pull&lt;/code&gt; command. Where a normal &lt;code&gt;git pull&lt;/code&gt; does a &lt;code&gt;merge&lt;/code&gt; to the remote branch, &lt;code&gt;git pull -r&lt;/code&gt; will rebase your commits on top of the changes that were on the remote.&lt;/p&gt;
&lt;h3 id=&quot;git-rebase-i&quot;&gt;&lt;code&gt;git rebase -i&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The rebase command has another method of operation. There is a &lt;code&gt;-i&lt;/code&gt; flag you can add to the &lt;code&gt;rebase&lt;/code&gt; command that will put it into interactive mode. While this seems confusing at first, it is an amazingly powerful feature that lets you have full control over the list of commits before you push them to a remote. Please remember the warning about not changing the history of commits that have been pushed.&lt;/p&gt;
&lt;p&gt;These examples show a basic interactive rebase, but be aware that there are more options and more use cases. The &lt;code&gt;git rebase --help&lt;/code&gt; command will give you the list and actually does a good job of explaining them.&lt;/p&gt;
&lt;p&gt;For this example, you&amp;rsquo;re going to imagine you&amp;rsquo;ve been working on your Python library, committing several times to your local repo as you implement a solution, test it, discover a problem and fix it. At the end of this process you have a chain of commits on you local repo that all are part of the new feature. Once you&amp;rsquo;ve finished the work, you look at your &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;8bb7af8 implemented feedback from code review&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;504d520 added unit test to cover new bug&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;56d1c23 more flake8 clean up&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;d9b1f9e restructuring to clean up&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;08dc922 another bug fix&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7f82500 pylint cleanup&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;a113f67 found a bug fixing&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3b8a6f2 First attempt at solution&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;af21a53 [older stuff here]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are several commits here that don&amp;rsquo;t add value to other developers or even to you in the future. You can use &lt;code&gt;rebase -i&lt;/code&gt; to create a &amp;ldquo;squash commit&amp;rdquo; and put all of these into a single point in history.&lt;/p&gt;
&lt;p&gt;To start the process, you run &lt;code&gt;git rebase -i af21a53&lt;/code&gt;, which will bring up an editor with a list of commits and some instructions:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick 3b8a6f2 First attempt at solution
pick a113f67 found a bug fixing
pick 7f82500 pylint cleanup
pick 08dc922 another bug fix
pick d9b1f9e restructuring to clean up
pick 56d1c23 more flake8 clean up
pick 504d520 added unit test to cover new bug
pick 8bb7af8 implemented feedback from code review

# Rebase af21a53..8bb7af8 onto af21a53 (8 command(s))
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like &amp;quot;squash&amp;quot;, but discard this commit&amp;#39;s log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll notice that the commits are listed in reverse order, oldest first. This is the order in which Git will replay the commits on top of &lt;code&gt;af21a53&lt;/code&gt;. If you just save the file at this point, nothing will change. This is also true if you delete all the text and save the file.&lt;/p&gt;
&lt;p&gt;Also, there are several lines starting with a &lt;code&gt;#&lt;/code&gt; reminding you how to edit this file. These comments can be removed but do not need to be.&lt;/p&gt;
&lt;p&gt;But you want to squash all of these commits into one so that &amp;ldquo;future you&amp;rdquo; will know that this is the commit that completely added the feature. To do that, you can edit the file to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick 3b8a6f2 First attempt at solution
squash a113f67 found a bug fixing
s 7f82500 pylint cleanup
s 08dc922 another bug fix
s d9b1f9e restructuring to clean up
s 56d1c23 more flake8 clean up
s 504d520 added unit test to cover new bug
s 8bb7af8 implemented feedback from code review
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use either the full word for the commands, or, as you did after the first two lines, use the single character version. The example above selected to &amp;ldquo;pick&amp;rdquo; the oldest commit and the &amp;ldquo;squash&amp;rdquo; each of the subsequent commits into that one. If you save and exit the editor, Git will proceed to put all of those commits into one and then will bring up the editor again, listing all of the commit messages for the squashed commit:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# This is a combination of 8 commits.
# The first commit&amp;#39;s message is:
Implemented feature ABC

# This is the 2nd commit message:

found a bug fixing

# This is the 3rd commit message:

pylint cleanup

# This is the 4th commit message:

another bug fix

[the rest trimmed for brevity]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default a squash commit will have a long commit message with all of the messages from each commit. In your case it&amp;rsquo;s better to reword the first message and delete the rest. Doing that and saving the file will finish the process, and your log will now have only a single commit for this feature:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;9a325ad Implemented feature ABC&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;af21a53 [older stuff here]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool! You just hid any evidence that you had to do more than one commit to solve this issue. Good work! Be warned that deciding &lt;strong&gt;when&lt;/strong&gt; to do a squash merge is frequently more difficult than the actual process. There&amp;rsquo;s a great &lt;a href=&quot;https://jamescooke.info/git-to-squash-or-not-to-squash.html&quot;&gt;article&lt;/a&gt; that does a nice job of laying out the complexities.&lt;/p&gt;
&lt;p&gt;As you probably guessed, &lt;code&gt;git rebase -i&lt;/code&gt; will allow you to do far more complex operations. Let&amp;rsquo;s look at one more example.&lt;/p&gt;
&lt;p&gt;In the course of a week, you&amp;rsquo;ve worked on three different issues, committing changes at various times for each. There&amp;rsquo;s also a commit in there that you regret and would like to pretend never happened. Here&amp;rsquo;s your starting log:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;2f0a106 feature 3 commit 3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;f0e14d2 feature 2 commit 3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b2eec2c feature 1 commit 3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;d6afbee really rotten, very bad commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6219ba3 feature 3 commit 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;70e07b8 feature 2 commit 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c08bf37 feature 1 commit 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c9747ae feature 3 commit 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;fdf23fc feature 2 commit 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0f05458 feature 1 commit 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3ca2262 older stuff here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your mission is to get this into three clean commits and remove that one bad one. You can follow the same process, &lt;code&gt;git rebase -i 3ca2262&lt;/code&gt;, and Git presents you with the command file:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick 0f05458 feature 1 commit 1
pick fdf23fc feature 2 commit 1
pick c9747ae feature 3 commit 1
pick c08bf37 feature 1 commit 2
pick 70e07b8 feature 2 commit 2
pick 6219ba3 feature 3 commit 2
pick d6afbee really rotten, very bad commit
pick b2eec2c feature 1 commit 3
pick f0e14d2 feature 2 commit 3
pick 2f0a106 feature 3 commit 3
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interactive rebase allows your to not only specify what to do with each commit but also lets you rearrange them. So, to get to your three commits, you edit the file to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick 0f05458 feature 1 commit 1
s c08bf37 feature 1 commit 2
s b2eec2c feature 1 commit 3
pick fdf23fc feature 2 commit 1
s 70e07b8 feature 2 commit 2
s f0e14d2 feature 2 commit 3
pick c9747ae feature 3 commit 1
s 6219ba3 feature 3 commit 2
s 2f0a106 feature 3 commit 3
# pick d6afbee really rotten, very bad commit
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The commits for each feature are grouped together with only one of them being &amp;ldquo;picked&amp;rdquo; and the rest &amp;ldquo;squashed.&amp;rdquo; Commenting out the bad commit will remove it, but you could have just as easily deleted that line from the file to the same effect.&lt;/p&gt;
&lt;p&gt;When you save that file, you&amp;rsquo;ll get a separate editor session to create the commit message for each of the three squashed commits. If you call them &lt;code&gt;feature 1&lt;/code&gt;, &lt;code&gt;feature 2&lt;/code&gt;, and &lt;code&gt;feature 3&lt;/code&gt;, your log will now have only those three commits, one for each feature:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;f700f1f feature 3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;443272f feature 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0ff80ca feature 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3ca2262 older stuff here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just like any rebase or merge, you might run into conflicts in this process, which you will need to resolve by editing the file, getting the changes correct, &lt;code&gt;git add&lt;/code&gt;-ing the file, and running &lt;code&gt;git rebase --continue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll end this section by pointing out a few things about rebase:&lt;/p&gt;
&lt;p&gt;1) Creating squash commits is a &amp;ldquo;nice to have&amp;rdquo; feature, but you can still work successfully with Git without using it.&lt;/p&gt;
&lt;p&gt;2) Merge conflicts on large interactive rebases can be confusing. None of the individual steps are difficult, but there can be a lot of them&lt;/p&gt;
&lt;p&gt;3) We&amp;rsquo;ve just scratched the surface on what you can do with &lt;code&gt;git rebase -i&lt;/code&gt;. There are more features here than most people will ever discover.&lt;/p&gt;
&lt;h3 id=&quot;git-revert-vs-git-reset-cleaning-up&quot;&gt;&lt;code&gt;git revert&lt;/code&gt; vs. &lt;code&gt;git reset&lt;/code&gt;: Cleaning Up&lt;/h3&gt;
&lt;p&gt;Unsurprisingly, Git provides you several methods for cleaning up when you&amp;rsquo;ve made a mess. These techniques depend on what state your repo is in and whether or not the mess is local to your repo or has been pushed to a remote.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by looking at the easy case. You&amp;rsquo;ve made a commit that you don&amp;rsquo;t want, and it hasn&amp;rsquo;t been pushed to remote. Start by creating that commit so you know what you&amp;rsquo;re looking at:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ls &amp;gt;&amp;gt; file_i_do_not_want
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add file_i_do_not_want
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;bad commit&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[master baebe14] bad commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 2 files changed, 31 insertions(+)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; create mode 100644 file_i_do_not_want&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;baebe14 bad commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;443272f feature 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0ff80ca feature 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3ca2262 older stuff here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The example above created a new file, &lt;code&gt;file_i_do_not_want&lt;/code&gt;, and committed it to the local repo. It has not been pushed to the remote repo yet. The rest of the examples in this section will use this as a starting point.&lt;/p&gt;
&lt;p&gt;To manage commits that are on the local repo only, you can use the &lt;code&gt;git reset&lt;/code&gt; command. There are two options to explore: &lt;code&gt;--soft&lt;/code&gt; and &lt;code&gt;--hard&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;git reset --soft &amp;lt;SHA&amp;gt;&lt;/code&gt; command tells Git to move HEAD back to the specified SHA. It doesn&amp;rsquo;t change the local file system, and it doesn&amp;rsquo;t change the index. I&amp;rsquo;ll admit when I read that description, it didn&amp;rsquo;t mean much to me, but looking at the example definitely helps:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git reset --soft HEAD^
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Changes to be committed:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   new file:   file_i_do_not_want&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;443272f feature 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0ff80ca feature 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3ca2262 older stuff here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example, we reset &lt;code&gt;HEAD&lt;/code&gt; to &lt;code&gt;HEAD^&lt;/code&gt;. Remember that &lt;code&gt;^&lt;/code&gt; tells Git to step back one commit. The &lt;code&gt;--soft&lt;/code&gt; option told Git to &lt;strong&gt;not&lt;/strong&gt; change the index or the local file system, so the &lt;code&gt;file_i_do_not_want&lt;/code&gt; is still in the index in the &amp;ldquo;Changes to be committed:&amp;rdquo; state. The &lt;code&gt;git log&lt;/code&gt; command shows that the &lt;code&gt;bad commit&lt;/code&gt; was removed from the history, though.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s what the &lt;code&gt;--soft&lt;/code&gt; option does. Now let&amp;rsquo;s look at the &lt;code&gt;--hard&lt;/code&gt; option. Let&amp;rsquo;s go back to your original state so that &lt;code&gt;bad commit&lt;/code&gt; is in the repo again and try &lt;code&gt;--hard&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;2e9d704 bad commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;443272f feature 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0ff80ca feature 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3ca2262 older stuff here&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git reset --hard HEAD^
&lt;span class=&quot;go&quot;&gt;HEAD is now at 443272f feature 2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;443272f feature 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0ff80ca feature 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3ca2262 older stuff here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are several things to notice here. First the &lt;code&gt;reset&lt;/code&gt; command actually gives you feedback on the &lt;code&gt;--hard&lt;/code&gt; option where it does not on the &lt;code&gt;--soft&lt;/code&gt;. I&amp;rsquo;m not sure of why this is, quite honestly. Also, when we do the &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt; afterwards, you see that not only is the &lt;code&gt;bad commit&lt;/code&gt; gone, but the changes that were in that commit have also been wiped out. The &lt;code&gt;--hard&lt;/code&gt; option resets you completely back to the SHA you specified.&lt;/p&gt;
&lt;p&gt;Now, if you remember the last section about changing history in Git, it&amp;rsquo;s dawned on you that doing a reset to a branch you&amp;rsquo;ve already pushed to a remote might be a bad idea. It changes the history and that can really mess up your co-workers.&lt;/p&gt;
&lt;p&gt;Git, of course, has a solution for that. The &lt;code&gt;git revert&lt;/code&gt; command allows you to easily remove the changes from a given commit but does not change history. It does this by doing the inverse of the commit you specify. If you added a line to a file, &lt;code&gt;git revert&lt;/code&gt; will remove that line from the file. It does this and automatically creates a new &amp;ldquo;revert commit&amp;rdquo; for you.&lt;/p&gt;
&lt;p&gt;Once again, reset the repo back to the point that &lt;code&gt;bad commit&lt;/code&gt; is the most recent commit. First confirm what the changes are in &lt;code&gt;bad commit&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git diff HEAD^
&lt;span class=&quot;go&quot;&gt;diff --git a/file_i_do_not_want b/file_i_do_not_want&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;new file mode 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index 0000000..6fe5391&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- /dev/null&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/file_i_do_not_want&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -0,0 +1,6 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+file_i_do_not_want&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+growing_file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that we&amp;rsquo;ve simply added the new &lt;code&gt;file_i_do_not_want&lt;/code&gt; to the repo. The lines below &lt;code&gt;@@ -0,0 +1,6 @@&lt;/code&gt; are the contents of that new file. Now, assuming that this time you&amp;rsquo;ve pushed that &lt;code&gt;bad commit&lt;/code&gt; to master and you don&amp;rsquo;t want your co-workers to hate you, use revert to fix that mistake:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git revert HEAD
&lt;span class=&quot;go&quot;&gt;[master 8a53ee4] Revert &amp;quot;bad commit&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 1 file changed, 6 deletions(-)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; delete mode 100644 file_i_do_not_want&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run that command, Git will pop up an editor window allowing you to modify the commit message for the revert commit:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Revert &amp;quot;bad commit&amp;quot;

This reverts commit 1fec3f78f7aea20bf99c124e5b75f8cec319de10.

# Please enter the commit message for your changes. Lines starting
# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#  deleted:    file_i_do_not_want
#
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unlike &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;git revert&lt;/code&gt; does not have an option for specifying the commit message on the command line. You can use &lt;code&gt;-n&lt;/code&gt; to skip the message editing step and tell Git to simply use the default message.&lt;/p&gt;
&lt;p&gt;After we revert the bad commit, our log shows a new commit with that message:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;8a53ee4 Revert &amp;quot;bad commit&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1fec3f7 bad commit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;443272f feature 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0ff80ca feature 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3ca2262 older stuff here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &amp;ldquo;bad commit&amp;rdquo; is still there. It needs to be there because you don&amp;rsquo;t want to change history in this case. There&amp;rsquo;s a new commit, however, which &amp;ldquo;undoes&amp;rdquo; the changes that are in that commit.&lt;/p&gt;
&lt;h3 id=&quot;git-clean&quot;&gt;&lt;code&gt;git clean&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s another &amp;ldquo;clean up&amp;rdquo; command that I find useful, but I want to present it with a caution.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; Using &lt;code&gt;git clean&lt;/code&gt; can wipe out files that are not committed to the repo that you will not be able to recover.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git clean&lt;/code&gt; does what you guess it would: it cleans up your local working directory. I&amp;rsquo;ve found this quite useful when something large goes wrong and I end up with several files on my file system that I do not want.&lt;/p&gt;
&lt;p&gt;In its simple form, &lt;code&gt;git clean&lt;/code&gt; simply removes files that are not &amp;ldquo;under version control.&amp;rdquo; This means that files that show up in the &lt;code&gt;Untracked files&lt;/code&gt; section when you look at &lt;code&gt;git status&lt;/code&gt; will be removed from the working tree. There is not a way to recover if you do this accidentally, as those files were not in version control.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s handy, but what if you want to remove all of the &lt;code&gt;pyc&lt;/code&gt; files created with your Python modules? Those are in your &lt;code&gt;.gitignore&lt;/code&gt; file, so they don&amp;rsquo;t show up as Untracked and they don&amp;rsquo;t get deleted by &lt;code&gt;git clean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-x&lt;/code&gt; option tells &lt;code&gt;git clean&lt;/code&gt; to remove untracked and ignored files, so &lt;code&gt;git clean -x&lt;/code&gt; will take care of that problem. Almost.&lt;/p&gt;
&lt;p&gt;Git is a little conservative with the &lt;code&gt;clean&lt;/code&gt; command and won&amp;rsquo;t remove untracked directories unless you tell it to do so. Python 3 likes to create &lt;code&gt;__pycache__&lt;/code&gt;directories, and it&amp;rsquo;d be nice to clean these up, too. To solve this, you would add the &lt;code&gt;-d&lt;/code&gt; option. &lt;code&gt;git clean -xd&lt;/code&gt; will clean up all of the untracked and ignored files and directories.&lt;/p&gt;
&lt;p&gt;Now, if you&amp;rsquo;ve raced ahead and tested this out, you&amp;rsquo;ve noticed that it doesn&amp;rsquo;t actually work. Remember that warning I gave at the beginning of this section? Git tries to be cautious when it comes to deleting files that you can&amp;rsquo;t recover. So, if you try the above command, you see an error message:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clean -xd
&lt;span class=&quot;go&quot;&gt;fatal: clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While it&amp;rsquo;s possible to change your git config files to not require it, most people I&amp;rsquo;ve talked to simply get used to using the &lt;code&gt;-f&lt;/code&gt; option along with the others:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clean -xfd
&lt;span class=&quot;go&quot;&gt;Removing file_to_delete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, be warned that &lt;code&gt;git clean -xfd&lt;/code&gt; will remove files that you will not be able to get back, so please use this with caution!&lt;/p&gt;
&lt;h2 id=&quot;resolving-merge-conflicts&quot;&gt;Resolving Merge Conflicts&lt;/h2&gt;
&lt;p&gt;When you&amp;rsquo;re new to Git, merge conflicts seem like a scary thing, but with a little practice and a few tricks, they can become much easier to deal with.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with some of the tricks that can make this easier. The first one changes the format of how conflicts are shown.&lt;/p&gt;
&lt;h3 id=&quot;diff3-format&quot;&gt;&lt;code&gt;diff3&lt;/code&gt; Format&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll walk through a simple example to see what Git does by default and what options we have to make it easier. To do this, create a new file, &lt;code&gt;merge.py&lt;/code&gt;, that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to my project!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add and commit this file to your branch &lt;code&gt;master&lt;/code&gt;, and this will be your baseline commit. You&amp;rsquo;ll create branches that modify this file in different ways, and then you&amp;rsquo;ll see how to resolve the merge conflict.&lt;/p&gt;
&lt;p&gt;You now need to create separate branches that will have conflicting changes. You&amp;rsquo;ve seen how this is done before, so I won&amp;rsquo;t describe it in detail:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git checkout -b mergebranch
&lt;span class=&quot;go&quot;&gt;Switched to a new branch &amp;#39;mergebranch&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; vi merge.py &lt;span class=&quot;c1&quot;&gt;# edit file to change &amp;#39;project&amp;#39; to &amp;#39;program&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add merge.py
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;change project to program&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[mergebranch a775c38] change project to program&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch mergebranch&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git checkout master
&lt;span class=&quot;go&quot;&gt;Switched to branch &amp;#39;master&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; vi merge.py &lt;span class=&quot;c1&quot;&gt;# edit file to add &amp;#39;very cool&amp;#39; before project&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add merge.py
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;added description of project&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[master ab41ed2] added description of project&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git show-branch master mergebranch
&lt;span class=&quot;go&quot;&gt;* [master] added description of project&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; ! [mergebranch] change project to program&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;*  [master] added description of project&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; + [mergebranch] change project to program&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;*+ [master^] baseline for merging&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you have conflicting changes on &lt;code&gt;mergebranch&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt;. Using the &lt;code&gt;show-branch&lt;/code&gt; command we learned in our Intro tutorial, you can see this visually on the command line:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git show-branch master mergebranch
&lt;span class=&quot;go&quot;&gt;* [master] added description of project&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; ! [mergebranch] change project to program&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;*  [master] added description of project&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; + [mergebranch] change project to program&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;*+ [master^] baseline for merging&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;re on branch &lt;code&gt;master&lt;/code&gt;, so let&amp;rsquo;s try to merge in &lt;code&gt;mergebranch&lt;/code&gt;. Since you&amp;rsquo;ve made the changes with the intent of creating a merge conflict, lets hope that happens:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git merge mergebranch
&lt;span class=&quot;go&quot;&gt;Auto-merging merge.py&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;CONFLICT (content): Merge conflict in merge.py&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Automatic merge failed; fix conflicts and then commit the result.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you expected, there&amp;rsquo;s a merge conflict. If you look at status, there&amp;rsquo;s a good deal of useful information there. Not only does it say that you&amp;rsquo;re in the middle of a merge, &lt;code&gt;You have unmerged paths&lt;/code&gt;, but it also shows you which files are modified, &lt;code&gt;merge.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status
&lt;span class=&quot;go&quot;&gt;On branch master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;You have unmerged paths.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (fix conflicts and run &amp;quot;git commit&amp;quot;)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Unmerged paths:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to mark resolution)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;   both modified:   merge.py&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You have done all that work to get to the point of having a merge conflict. Now you can start learning about how to resolve it! For this first part, you&amp;rsquo;ll be working with the command line tools and your editor. After that, you&amp;rsquo;ll get fancy and look at using visual diff tools to solve the problem.&lt;/p&gt;
&lt;p&gt;When you open &lt;code&gt;merge.py&lt;/code&gt; in your editor, you can see what Git produced:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to my very cool project!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=======&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to my program!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergebranch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Git uses &lt;code&gt;diff&lt;/code&gt; syntax from Linux to display the conflict. The top portion, between &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/code&gt; and &lt;code&gt;=======&lt;/code&gt;, are from HEAD, which in your case is &lt;code&gt;master&lt;/code&gt;. The bottom portion, between &lt;code&gt;=======&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; mergebranch&lt;/code&gt; are from, you guessed it, &lt;code&gt;mergebranch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, in this very simple example, it&amp;rsquo;s pretty easy to remember which changes came from where and how we should merge this, but there&amp;rsquo;s a setting you can enable which will make this easier.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;diff3&lt;/code&gt; setting modifies the output of merge conflicts to more closely approximate a three-way merge, meaning in this case that it will show you what&amp;rsquo;s in &lt;code&gt;master&lt;/code&gt;, followed by what it looked like in the common ancestor, followed by what it looks like in &lt;code&gt;mergebranch&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to my very cool project!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|||||||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merged&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;common&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ancestors&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to my project!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=======&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to my program!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergebranch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that you can see the starting point, &amp;ldquo;Welcome to my project!&amp;rdquo;, you can see exactly what change was made on &lt;code&gt;master&lt;/code&gt; and what change was made on &lt;code&gt;mergebranch&lt;/code&gt;. This might not seem like a big deal on such a simple example, but it can make a huge difference on large conflicts, especially merges where someone else made some of the changes.&lt;/p&gt;
&lt;p&gt;You can set this option in Git globally by issuing the following command:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global merge.conflictstyle diff3
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, so you understand how to see the conflict. Let&amp;rsquo;s go through how to fix it. Start by editing the file, removing all of the markers Git added, and making the one conflicting line correct:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to my very cool program!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You then add your modified file to the index and commit your merge. This will finish the merge process and create the new node:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add merge.py
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit
&lt;span class=&quot;go&quot;&gt;[master a56a01e] Merge branch &amp;#39;mergebranch&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git log --oneline
&lt;span class=&quot;go&quot;&gt;a56a01e Merge branch &amp;#39;mergebranch&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ab41ed2 added description of project&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;a775c38 change project to program&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;f29b775 baseline for merging&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Merge conflicts can happen while you&amp;rsquo;re cherry-picking, too. The process when you are cherry-picking is slightly different. Instead of using the &lt;code&gt;git commit&lt;/code&gt; command, you use the &lt;code&gt;git cherry-pick --continue&lt;/code&gt; command. Don&amp;rsquo;t worry, Git will tell you in the status message which command you need to use. You can always go back and check that to be sure.&lt;/p&gt;
&lt;h3 id=&quot;git-mergetool&quot;&gt;&lt;code&gt;git mergetool&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Similar to &lt;code&gt;git difftool&lt;/code&gt;, Git will allow you to configure a visual diff tool to deal with three-way merges. It knows about several different tools on different operating systems. You can see the list of tools it knows about on your system by using the command below. On my Linux machine, it shows the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git mergetool --tool-help
&lt;span class=&quot;go&quot;&gt;&amp;#39;git mergetool --tool=&amp;lt;tool&amp;gt;&amp;#39; may be set to one of the following:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      araxis&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      gvimdiff&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      gvimdiff2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      gvimdiff3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      meld&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      vimdiff&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      vimdiff2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      vimdiff3&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;The following tools are valid, but not currently available:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      bc&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      bc3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      codecompare&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      deltawalker&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      diffmerge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      diffuse&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      ecmerge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      emerge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      kdiff3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      opendiff&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      p4merge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      tkdiff&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      tortoisemerge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      winmerge&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      xxdiff&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Some of the tools listed above only work in a windowed&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;environment. If run in a terminal-only session, they will fail.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also similar to &lt;code&gt;difftool&lt;/code&gt;, you can configure the &lt;code&gt;mergetool&lt;/code&gt; options globally to make it easier to use:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global merge.tool meld
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global mergetool.prompt &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The final option, &lt;code&gt;mergetool.prompt&lt;/code&gt;, tells Git not to prompt you each time it opens a window. This might not sound annoying, but when your merge involves several files it will prompt you between each of them.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ve covered a lot of ground in these tutorials, but there is so much more to Git. If you&amp;rsquo;d like to take a deeper dive into Git, I can recommend these resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The free, on-line, &lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;Pro Git&lt;/a&gt; is a very handy reference.&lt;/li&gt;
&lt;li&gt;For those of you who like to read on paper, there&amp;rsquo;s a print version of &lt;a href=&quot;https://realpython.com/asins/1484200772/&quot;&gt;Pro Git&lt;/a&gt;, and I found O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&quot;https://realpython.com/asins/1449316387/&quot;&gt;Version Control with Git&lt;/a&gt; to be useful when I read it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--help&lt;/code&gt; is useful for any of the subcommands you know. &lt;code&gt;git diff --help&lt;/code&gt; produces almost 1000 lines of information. While portions of these are quite detailed, and some of them assume a deep knowledge of Git, reading the help for commands you use frequently can teach you new tricks on how to use them.&lt;/li&gt;
&lt;/ul&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Python Community Interview With Mike Driscoll</title>
      <id>https://realpython.com/interview-mike-driscoll/</id>
      <link href="https://realpython.com/interview-mike-driscoll/"/>
      <updated>2018-08-08T14:00:00+00:00</updated>
      <summary>A Python community interview with Mike Driscoll of Mouse Vs Python fame. As a long-time Python advocate and teacher, Mike shares his story of how he came to be a Python developer and an author.</summary>
      <content type="html">
        &lt;p&gt;Welcome to the first in a series of interviews with members of the Python community.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t already know me, my name is Ricky, and I&amp;rsquo;m the &lt;a href=&quot;https://realpython.com/team/rwhite/&quot;&gt;Community Manager&lt;/a&gt; here at Real Python. I&amp;rsquo;m a relatively new developer, and I&amp;rsquo;ve been part of the Python community since January, 2017, when I first learned Python.&lt;/p&gt;
&lt;p&gt;Prior to that, I mainly dabbled in other languages (C++, PHP, and C#) for fun. It was only after I fell in love with Python that I decided to become a &amp;ldquo;serious&amp;rdquo; developer. When I&amp;rsquo;m not working on Real Python projects, I make websites for local businesses.&lt;/p&gt;
&lt;p&gt;This week, I&amp;rsquo;m talking to Mike Driscoll of &lt;em&gt;Mouse Vs Python&lt;/em&gt; fame. As a long-time Python advocate and teacher, Mike shares his story of how he came to be a Python developer and an author. He also shares his plans for the future, as well as insight into how he would use a time machine&amp;hellip;&lt;/p&gt;
&lt;p&gt;Let’s get started.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;I’d like to start by learning how you got into programming, and how you came to love Python?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-fluid w-25 float-right ml-3&quot; src=&quot;https://files.realpython.com/media/mike-driscoll.a4828f28a6bd.jpg&quot; width=&quot;700&quot; height=&quot;879&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/mike-driscoll.a4828f28a6bd.jpg&amp;amp;w=175&amp;amp;sig=58cea5b935eb7459db0a43f3b19bc46e51602991 175w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/mike-driscoll.a4828f28a6bd.jpg&amp;amp;w=350&amp;amp;sig=44547670207f58301e547ceaa564b94183198855 350w, https://files.realpython.com/media/mike-driscoll.a4828f28a6bd.jpg 700w&quot; sizes=&quot;75vw&quot; alt=&quot;Mike Driscoll&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; I decided to be some kind of computer programmer when I went to college. I started out in computer science and then somehow ended up with an MIS degree due to some confusing advice I received long ago from a professor. Anyway, this was back right before the internet bubble burst, so there were no jobs in tech when I graduated. After working as the sole member of an I.T. team at an auction house, I was hired by the local government to be a software developer.&lt;/p&gt;
&lt;p&gt;The boss at that place loved Python, and I was required to learn it because that was what all new development would be done in. Trial by fire! It was a stressful couple of months of turning Kixtart code into Python code for our login scripts. I also was challenged to find a way to create desktop user interfaces in Python so we could migrate away from these truly awful VBA applications that were created on top of MS Office.&lt;/p&gt;
&lt;p&gt;Between my boss loving Python and me having so much fun learning it and using it on the job, I ended up loving it too. We made GUIs with wxPython, reports with ReportLab, web applications with TurboGears, and much more with just vanilla Python.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;You’ve been writing on your blog, Mouse Vs Python, for over 10 years now. How have you kept so consistent and motivated to write each week?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; I&amp;rsquo;m not always consistent. There have been some gaps where I didn&amp;rsquo;t write much at all. There was a year where I had stopped writing for the most part for several months. But I noticed that my readership had actually grown while I was taking a break. I actually found that really motivating because there were so many people reading old posts, and I wanted my blog to continue to stay fresh.&lt;/p&gt;
&lt;p&gt;Also, my readers have always been pretty supportive of my blog. Because of their support, I have been committed to writing on the blog whenever I can or at least jot down some ideas for later.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;You’ve also authored five books to date, with &lt;a href=&quot;https://realpython.com/asins/B0793XYQGZ/&quot;&gt;Python Interviews: Discussions with Python Experts&lt;/a&gt; being released earlier this year. Having spoken with so many highly prominent developers in the Python community, what tips or wisdom have you personally taken away from the book that have helped you develop (either professionally or personally)?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; I really enjoyed speaking with the developers while working on the &lt;a href=&quot;https://realpython.com/asins/B0793XYQGZ/&quot;&gt;&lt;em&gt;Python Interviews&lt;/em&gt;&lt;/a&gt; book. They were quite helpful in fleshing out the history of Python and PyCon USA as well as the Python Software Foundation.&lt;/p&gt;
&lt;p&gt;I learned about where some of the core developers think Python might go in the future and also why it was designed the way it was in the past. For example, I hadn&amp;rsquo;t realized that the reason Python didn&amp;rsquo;t have Unicode support built-in at the beginning was that Python actually pre-dates Unicode by several months.&lt;/p&gt;
&lt;p&gt;I think one of the lessons learned is how big &lt;a href=&quot;https://realpython.com/tutorials/data-science/&quot;&gt;data science&lt;/a&gt; and education are for Python right now. A lot of people I interviewed talked about those topics, and it was fun to see Python&amp;rsquo;s reach continue to grow.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;I’ve noticed you’ve started creating YouTube videos again for your Python 101 series. What made you decide to start creating video content again?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; The &lt;a href=&quot;https://www.youtube.com/watch?v=yEusyqoxNQI&amp;amp;list=PLN0iJDXT7K2vB3EGwKpDV-VIylhs3dEV8&quot;&gt;Python 101 screencast&lt;/a&gt; was something I put together as an offshoot of the &lt;a href=&quot;https://realpython.com/asins/00KQTFHNK/&quot;&gt;&lt;em&gt;Python 101&lt;/em&gt;&lt;/a&gt; book. While a lot of publishers say that video content is growing in popularity, my experience has been the opposite. My screencast series never had a lot of takers, so I decided to just share it with my readers on YouTube. I will be posting most or all of the series there and probably discontinue it as a product that I sell.&lt;/p&gt;
&lt;p&gt;I think I need more experience creating video training, so I also plan to do more videos on other topics in Python and see how they are received. It&amp;rsquo;s always fun to try out other methods of engagement with my audience.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;Not only do you do so much for the online community, but you also founded and run your local Python user group. What advice would you give to someone (like me) who might be looking to go to their first local user group meeting?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; Pyowa, the local Python group that I founded, now has several organizers, which is really nice. But back to your question. If you want to go to a group, the first thing to do is to find out where and if one exists near you. Most groups are listed on the &lt;a href=&quot;https://wiki.python.org/moin/LocalUserGroups&quot;&gt;Python wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, you need to look up their website or Meetup and see what their next meeting is about. Most of the meetings I have been to in Iowa have some form of social time at the beginning, or end, or both. Then they have a talk of some sort or some other activity like mob programming or lightning talks. The main thing is to come prepared to talk and learn about Python. Most of the time, you will find that the local user groups are just as welcoming as the people who attend PyCon are.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;If you could go back in time, what would you change about Python? Is there something you wish the language could do? Or maybe there’s something you&amp;rsquo;d like to remove from the language, instead?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; I wish Guido had been able to convince Google&amp;rsquo;s Android engineering department to include Python as one of the languages used natively in Android. As it is, we currently don&amp;rsquo;t have much in the way of writing applications for mobile besides Toga and Kivy. I think both of these libraries are pretty neat, but Toga is still pretty beta, especially on Android, and Kivy doesn&amp;rsquo;t look native on anything that it runs on.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;I love celebrating the wins in life, big and small. What has been your proudest Python moment so far?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; Personally, I am proud of writing about Python in book and blog form and having so many readers who have found my ramblings helpful. I am also proud to know so many great people in the community who will help each other in many meaningful ways. It&amp;rsquo;s like having a network of friends that you haven&amp;rsquo;t even necessarily met. I find this unique to the Python community.&lt;/p&gt;
&lt;p class=&quot;mt-5&quot;&gt;&lt;strong&gt;Ricky:&lt;/strong&gt; &lt;em&gt;I’m curious to know what other hobbies and interests you have, aside from Python? Any you’d like to share and/or plug?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike:&lt;/strong&gt; Most of my spare time is spent playing with my three-year-old daughter. However, I also enjoy photography. It can be challenging to get the shot you want, but digital photography also makes it a lot easier since you can get instant feedback and adjust if you messed it up, assuming your subject is willing.&lt;/p&gt;
&lt;p class=&quot;mt-4&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If you’d like to follow Mike&amp;rsquo;s blog or check out any of his books, head over to his &lt;a href=&quot;https://www.blog.pythonlibrary.org/about/&quot;&gt;website&lt;/a&gt;. You can also message Mike to say &amp;ldquo;Hi&amp;rdquo; on &lt;a href=&quot;https://twitter.com/driscollis&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/channel/UCXIKTlRw8OHVQ_WlEMP_jSg&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Is there someone you’d like us to interview in the community? Leave their name below, and they just might be next.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Dictionaries in Python</title>
      <id>https://realpython.com/python-dicts/</id>
      <link href="https://realpython.com/python-dicts/"/>
      <updated>2018-08-06T14:00:00+00:00</updated>
      <summary>In this Python dictionaries tutorial you&#39;ll cover the basic characteristics and learn how to access and manage dictionary data. Once you have finished this tutorial, you should have a good sense of when a dictionary is the appropriate data type to use, and how to do so.</summary>
      <content type="html">
        &lt;p&gt;Python provides another composite &lt;a href=&quot;https://realpython.com/python-data-types/&quot;&gt;data type&lt;/a&gt; called a &lt;strong&gt;dictionary&lt;/strong&gt;, which is similar to a list in that it is a collection of objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;rsquo;s what you&amp;rsquo;ll learn in this tutorial:&lt;/strong&gt; You&amp;rsquo;ll cover the basic characteristics of Python dictionaries and learn how to access and manage dictionary data.  Once you have finished this tutorial, you should have a good sense of when a dictionary is the appropriate data type to use, and how to do so.&lt;/p&gt;
&lt;p&gt;Dictionaries and lists share the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both are mutable.&lt;/li&gt;
&lt;li&gt;Both are dynamic.  They can grow and shrink as needed.&lt;/li&gt;
&lt;li&gt;Both can be nested. A list can contain another list. A dictionary can contain another dictionary.  A dictionary can also contain a list, and vice versa.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dictionaries differ from lists in two important ways. The first is the ordering of the elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elements in a list have a distinct order, which is an intrinsic property of that list.&lt;/li&gt;
&lt;li&gt;Dictionaries are unordered.  Elements are not kept in any specific order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second difference lies in how elements are accessed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List elements are accessed by their position in the list, via indexing.&lt;/li&gt;
&lt;li&gt;Dictionary elements are accessed via keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;defining-a-dictionary&quot;&gt;Defining a Dictionary&lt;/h2&gt;
&lt;p&gt;Dictionaries are Python&amp;rsquo;s implementation of a data structure that is more generally known as an associative array.  A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value.  &lt;/p&gt;
&lt;p&gt;You can define a dictionary by enclosing a comma-separated list of key-value pairs in curly braces (&lt;code&gt;{}&lt;/code&gt;).  A colon (&lt;code&gt;:&lt;/code&gt;) separates each key from its associated value:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following defines a dictionary that maps a location to the name of its corresponding Major League Baseball team:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Boston&amp;#39;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Red Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Milwaukee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brewers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mariners&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.b3e3d8f2d100.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.b3e3d8f2d100.png&quot; width=&quot;726&quot; height=&quot;954&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.b3e3d8f2d100.png&amp;amp;w=181&amp;amp;sig=3b1298df93bb372466d6c248040cae86459253d5 181w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.b3e3d8f2d100.png&amp;amp;w=363&amp;amp;sig=8c295591b658b3e48704fe2f13478b055a46d35c 363w, https://files.realpython.com/media/t.b3e3d8f2d100.png 726w&quot; sizes=&quot;75vw&quot; alt=&quot;Python dictionary (illustration)&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Dictionary Mapping Location to MLB Team&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;You can also construct a dictionary with the built-in &lt;code&gt;dict()&lt;/code&gt; function.  The argument to &lt;code&gt;dict()&lt;/code&gt; should be a sequence of key-value pairs.  A list of tuples works well for this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;MLB_team&lt;/code&gt; can then also be defined this way:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Boston&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Red Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Milwaukee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brewers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mariners&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the key values are simple strings, they can be specified as keyword arguments.  So here is yet another way to define &lt;code&gt;MLB_team&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Colorado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Boston&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Red Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Minnesota&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Milwaukee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Brewers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Seattle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Mariners&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you&amp;rsquo;ve defined a dictionary, you can display its contents, the same as you can do for a list.  All three of the definitions shown above appear as follows when displayed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;Colorado&amp;#39;: &amp;#39;Rockies&amp;#39;, &amp;#39;Boston&amp;#39;: &amp;#39;Red Sox&amp;#39;, &amp;#39;Milwaukee&amp;#39;: &amp;#39;Brewers&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Seattle&amp;#39;: &amp;#39;Mariners&amp;#39;, &amp;#39;Minnesota&amp;#39;: &amp;#39;Twins&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It may seem as though the order in which the key-value pairs are displayed has significance, but remember that dictionaries are unordered collections.  They have to print out in some order, of course, but it is effectively random.  In the example above, it&amp;rsquo;s not even the same order in which they were defined.&lt;/p&gt;
&lt;p&gt;As you add or delete entries, you won&amp;rsquo;t be guaranteed that any sort of order will be maintained.  But that doesn&amp;rsquo;t matter, because you don&amp;rsquo;t access dictionary entries by numerical index:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#13&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;accessing-dictionary-values&quot;&gt;Accessing Dictionary Values&lt;/h2&gt;
&lt;p&gt;Of course, dictionary elements must be accessible somehow.  If you don&amp;rsquo;t get them by index, then how do you get them?&lt;/p&gt;
&lt;p&gt;A value is retrieved from a dictionary by specifying its corresponding key in square brackets (&lt;code&gt;[]&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you refer to a key that is not in the dictionary, Python raises an exception:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#19&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Adding an entry to an existing dictionary is simply a matter of assigning a new key and value:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Kansas City&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Royals&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;Colorado&amp;#39;: &amp;#39;Rockies&amp;#39;, &amp;#39;Boston&amp;#39;: &amp;#39;Red Sox&amp;#39;, &amp;#39;Milwaukee&amp;#39;: &amp;#39;Brewers&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Seattle&amp;#39;: &amp;#39;Mariners&amp;#39;, &amp;#39;Minnesota&amp;#39;: &amp;#39;Twins&amp;#39;, &amp;#39;Kansas City&amp;#39;: &amp;#39;Royals&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to update an entry, you can just assign a new value to an existing key:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Seahawks&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;Colorado&amp;#39;: &amp;#39;Rockies&amp;#39;, &amp;#39;Boston&amp;#39;: &amp;#39;Red Sox&amp;#39;, &amp;#39;Milwaukee&amp;#39;: &amp;#39;Brewers&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Seattle&amp;#39;: &amp;#39;Seahawks&amp;#39;, &amp;#39;Minnesota&amp;#39;: &amp;#39;Twins&amp;#39;, &amp;#39;Kansas City&amp;#39;: &amp;#39;Royals&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To delete an entry, use the &lt;code&gt;del&lt;/code&gt; statement, specifying the key to delete:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;Colorado&amp;#39;: &amp;#39;Rockies&amp;#39;, &amp;#39;Boston&amp;#39;: &amp;#39;Red Sox&amp;#39;, &amp;#39;Milwaukee&amp;#39;: &amp;#39;Brewers&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Minnesota&amp;#39;: &amp;#39;Twins&amp;#39;, &amp;#39;Kansas City&amp;#39;: &amp;#39;Royals&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Begone, Seahawks! Thou art an NFL team.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;dictionary-keys-vs-list-indices&quot;&gt;Dictionary Keys vs. List Indices&lt;/h2&gt;
&lt;p&gt;You may have noticed that the interpreter raises the same exception, &lt;code&gt;KeyError&lt;/code&gt;, when a dictionary is accessed with either an undefined key or by a numeric index:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#8&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#9&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In fact, it&amp;rsquo;s the same error. In the latter case, &lt;code&gt;[1]&lt;/code&gt; looks like a numerical index, but it isn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;You will see later in this tutorial that an object of any immutable type can be used as a dictionary key.  Accordingly, there is no reason you can&amp;rsquo;t use integers:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the expressions &lt;code&gt;MLB_team[1]&lt;/code&gt;, &lt;code&gt;d[0]&lt;/code&gt;, and &lt;code&gt;d[2]&lt;/code&gt;, the numbers in square brackets appear as though they might be indices.  But Python is interpreting them as dictionary keys. You can&amp;rsquo;t be guaranteed that Python will maintain dictionary objects in any particular order, and you can&amp;rsquo;t access them by numerical index.  The syntax may look similar, but you can&amp;rsquo;t treat a dictionary like a list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#30&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;-1&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#31&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unhashable type: &amp;#39;slice&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#32&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;dict&amp;#39; object has no attribute &amp;#39;append&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;building-a-dictionary-incrementally&quot;&gt;Building a Dictionary Incrementally&lt;/h2&gt;
&lt;p&gt;Defining a dictionary using curly braces and a list of key-value pairs, as shown above, is fine if you know all the keys and values in advance.  But what if you want to build a dictionary on the fly?&lt;/p&gt;
&lt;p&gt;You can start by creating an empty dictionary, which is specified by empty curly braces.  Then you can add new keys and values one at a time:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fname&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;lname&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Fonebone&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;spouse&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Edna&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Ralph&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Betty&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Joey&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Fido&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the dictionary is created in this way, its values are accessed the same way as any other dictionary:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;fname&amp;#39;: &amp;#39;Joe&amp;#39;, &amp;#39;lname&amp;#39;: &amp;#39;Fonebone&amp;#39;, &amp;#39;age&amp;#39;: 51, &amp;#39;spouse&amp;#39;: &amp;#39;Edna&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;children&amp;#39;: [&amp;#39;Ralph&amp;#39;, &amp;#39;Betty&amp;#39;, &amp;#39;Joey&amp;#39;], &amp;#39;pets&amp;#39;: {&amp;#39;dog&amp;#39;: &amp;#39;Fido&amp;#39;, &amp;#39;cat&amp;#39;: &amp;#39;Sox&amp;#39;}}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fname&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;51&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;Ralph&amp;#39;, &amp;#39;Betty&amp;#39;, &amp;#39;Joey&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Retrieving the values in the sublist or subdictionary requires an additional index or key:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Joey&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Sox&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example exhibits another feature of dictionaries:  the values contained in the dictionary don&amp;rsquo;t need to be the same type. In &lt;code&gt;person&lt;/code&gt;, some of the values are strings, one is an integer, one is a list, and one is another dictionary.&lt;/p&gt;
&lt;p&gt;Just as the values in a dictionary don&amp;rsquo;t need to be of the same type, the keys don&amp;rsquo;t either:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{42: &amp;#39;aaa&amp;#39;, 2.78: &amp;#39;bbb&amp;#39;, True: &amp;#39;ccc&amp;#39;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, one of the keys is an integer, one is a float, and one is a Boolean.  It&amp;rsquo;s not obvious how this would be useful, but you never know.&lt;/p&gt;
&lt;p&gt;Notice how versatile Python dictionaries are. In &lt;code&gt;MLB_team&lt;/code&gt;, the same piece of information (the baseball team name) is kept for each of several different geographical locations. &lt;code&gt;person&lt;/code&gt;, on the other hand, stores varying types of data for a single person.&lt;/p&gt;
&lt;p&gt;You can use dictionaries for a wide range of purposes because there are so few limitations on the keys and values that are allowed.  But there are some.  Read on!&lt;/p&gt;
&lt;h2 id=&quot;restrictions-on-dictionary-keys&quot;&gt;Restrictions on Dictionary Keys&lt;/h2&gt;
&lt;p&gt;Almost any type of value can be used as a dictionary key in Python. You just saw this example, where integer, float, and Boolean objects are used as keys:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{42: &amp;#39;aaa&amp;#39;, 2.78: &amp;#39;bbb&amp;#39;, True: &amp;#39;ccc&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can even use built-in objects like types and functions:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;: 1, &amp;lt;class &amp;#39;float&amp;#39;&amp;gt;: 2, &amp;lt;class &amp;#39;bool&amp;#39;&amp;gt;: 3}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;oct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;oct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, there are a couple restrictions that dictionary keys must abide by.&lt;/p&gt;
&lt;p&gt;First, a given key can appear in a dictionary only once. Duplicate keys are not allowed. A dictionary maps each key to a corresponding value, so it doesn&amp;rsquo;t make sense to map a particular key more than once.&lt;/p&gt;
&lt;p&gt;You saw above that when you assign a value to an already existing dictionary key, it does not add the key a second time, but replaces the existing value:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Boston&amp;#39;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Red Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Milwaukee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brewers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mariners&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Timberwolves&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;Colorado&amp;#39;: &amp;#39;Rockies&amp;#39;, &amp;#39;Boston&amp;#39;: &amp;#39;Red Sox&amp;#39;, &amp;#39;Minnesota&amp;#39;: &amp;#39;Timberwolves&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Milwaukee&amp;#39;: &amp;#39;Brewers&amp;#39;, &amp;#39;Seattle&amp;#39;: &amp;#39;Mariners&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, if you specify a key a second time during the initial creation of a dictionary, the second occurrence will override the first:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Boston&amp;#39;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Red Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Timberwolves&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Milwaukee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brewers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mariners&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;Colorado&amp;#39;: &amp;#39;Rockies&amp;#39;, &amp;#39;Boston&amp;#39;: &amp;#39;Red Sox&amp;#39;, &amp;#39;Minnesota&amp;#39;: &amp;#39;Twins&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Milwaukee&amp;#39;: &amp;#39;Brewers&amp;#39;, &amp;#39;Seattle&amp;#39;: &amp;#39;Mariners&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Begone, Timberwolves! Thou art an NBA team. Sort of.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Secondly, a dictionary key must be of a type that is immutable.  That means an integer, float, string, or Boolean can be a dictionary key, as you have seen above.  A tuple can also be a dictionary key, because tuples are immutable:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recall from the discussion on &lt;a href=&quot;https://realpython.com/python-lists-tuples/#defining-and-using-tuples&quot;&gt;tuples&lt;/a&gt; that one rationale for using a tuple instead of a list is that there are circumstances where an immutable type is required.  This is one of them.&lt;/p&gt;
&lt;p&gt;However, neither a list nor another dictionary can serve as a dictionary key, because lists and dictionaries are mutable:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#20&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unhashable type: &amp;#39;list&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt;  Why does the error message say &amp;ldquo;unhashable&amp;rdquo; rather than &amp;ldquo;mutable&amp;rdquo;?  Python uses hash values internally to implement dictionary keys, so an object must be hashable to be used as a key.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-hashable&quot;&gt;Python Glossary&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;restrictions-on-dictionary-values&quot;&gt;Restrictions on Dictionary Values&lt;/h2&gt;
&lt;p&gt;By contrast, there are no restrictions on dictionary values.  Literally none at all.  A dictionary value can be any type of object Python supports, including mutable types like lists and dictionaries, and user-defined objects, which you will learn about in upcoming tutorials.&lt;/p&gt;
&lt;p&gt;There is also no restriction against a particular value appearing in a dictionary multiple times:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{0: &amp;#39;a&amp;#39;, 1: &amp;#39;a&amp;#39;, 2: &amp;#39;a&amp;#39;, 3: &amp;#39;a&amp;#39;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;operators-and-built-in-functions&quot;&gt;Operators and Built-in Functions&lt;/h2&gt;
&lt;p&gt;You have already become familiar with many of the operators and built-in functions that can be used with &lt;a href=&quot;https://realpython.com/python-strings&quot;&gt;strings&lt;/a&gt;, &lt;a href=&quot;https://realpython.com/python-lists-tuples/#python-lists&quot;&gt;lists&lt;/a&gt;, and &lt;a href=&quot;https://realpython.com/python-lists-tuples/#python-tuples&quot;&gt;tuples&lt;/a&gt;.  Some of these work with dictionaries as well.&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; according to whether the specified operand occurs as a key in the dictionary:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Boston&amp;#39;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Red Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Milwaukee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brewers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mariners&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Milwaukee&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use the &lt;code&gt;in&lt;/code&gt; operator together with short-circuit evaluation to avoid raising an error when trying to access a key that is not in the dictionary:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#2&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Toronto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the second case, due to short-circuit evaluation, the expression &lt;code&gt;MLB_team[&#39;Toronto&#39;]&lt;/code&gt; is not evaluated, so the &lt;code&gt;KeyError&lt;/code&gt; exception does not occur.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;len()&lt;/code&gt; function returns the number of key-value pairs in a dictionary:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rockies&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Boston&amp;#39;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Red Sox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Twins&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Milwaukee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brewers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Seattle&amp;#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mariners&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLB_team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;built-in-dictionary-methods&quot;&gt;Built-in Dictionary Methods&lt;/h2&gt;
&lt;p&gt;As with strings and lists, there are several built-in methods that can be invoked on dictionaries.  In fact, in some cases, the list and dictionary methods share the same name.  (In the discussion on object-oriented programming, you will see that it is perfectly acceptable for different types to have methods with the same name.)&lt;/p&gt;
&lt;p&gt;The following is an overview of methods that apply to dictionaries:&lt;/p&gt;
&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.clear()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clears a dictionary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;d.clear()&lt;/code&gt; empties dictionary &lt;code&gt;d&lt;/code&gt; of all key-value pairs:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 20, &amp;#39;c&amp;#39;: 30}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.get(&amp;lt;key&amp;gt;[, &amp;lt;default&amp;gt;])&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns the value for a key if it exists in the dictionary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;.get()&lt;/code&gt; method provides a convenient way of getting the value of a key from a dictionary without checking ahead of time whether the key exists, and without raising an error.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;d.get(&amp;lt;key&amp;gt;)&lt;/code&gt; searches dictionary &lt;code&gt;d&lt;/code&gt; for &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; and returns the associated value if it is found.  If &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is not found, it returns &lt;code&gt;None&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is not found and the optional &lt;code&gt;&amp;lt;default&amp;gt;&lt;/code&gt; argument is specified, that value is returned instead of &lt;code&gt;None&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.items()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns a list of key-value pairs in a dictionary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;d.items()&lt;/code&gt; returns a list of tuples containing the key-value pairs in &lt;code&gt;d&lt;/code&gt;.  The first item in each tuple is the key, and the second item is the key&amp;rsquo;s value:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 20, &amp;#39;c&amp;#39;: 30}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[(&amp;#39;a&amp;#39;, 10), (&amp;#39;b&amp;#39;, 20), (&amp;#39;c&amp;#39;, 30)]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.keys()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns a list of keys in a dictionary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;d.keys()&lt;/code&gt; returns a list of all keys in &lt;code&gt;d&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 20, &amp;#39;c&amp;#39;: 30}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.values()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns a list of values in a dictionary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;d.values()&lt;/code&gt; returns a list of all values in &lt;code&gt;d&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 20, &amp;#39;c&amp;#39;: 30}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[10, 20, 30]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any duplicate values in &lt;code&gt;d&lt;/code&gt; will be returned as many times as they occur:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 10, &amp;#39;c&amp;#39;: 10}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[10, 10, 10]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt; The &lt;code&gt;.items()&lt;/code&gt;, &lt;code&gt;.keys()&lt;/code&gt;, and &lt;code&gt;.values()&lt;/code&gt; methods actually return something called a &lt;strong&gt;view object&lt;/strong&gt;.  A dictionary view object is more or less like a window on the keys and values.  For practical purposes, you can think of these methods as returning lists of the dictionary&amp;rsquo;s keys and values.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.pop(&amp;lt;key&amp;gt;[, &amp;lt;default&amp;gt;])&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Removes a key from a dictionary, if it is present, and returns its value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is present in &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;d.pop(&amp;lt;key&amp;gt;)&lt;/code&gt; removes &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; and returns its associated value:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;c&amp;#39;: 30}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;d.pop(&amp;lt;key&amp;gt;)&lt;/code&gt; raises a &lt;code&gt;KeyError&lt;/code&gt; exception if &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is not in &lt;code&gt;d&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#4&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is not in &lt;code&gt;d&lt;/code&gt;, and the optional &lt;code&gt;&amp;lt;default&amp;gt;&lt;/code&gt; argument is specified, then that value is returned, and no exception is raised:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-1&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 20, &amp;#39;c&amp;#39;: 30}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.popitem()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Removes a key-value pair from a dictionary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;d.popitem()&lt;/code&gt; removes a random, arbitrary key-value pair from &lt;code&gt;d&lt;/code&gt; and returns it as a tuple:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;c&amp;#39;, 30)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 20}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;b&amp;#39;, 20)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code&gt;d&lt;/code&gt; is empty, &lt;code&gt;d.popitem()&lt;/code&gt; raises a &lt;code&gt;KeyError&lt;/code&gt; exception:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#11&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;KeyError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;popitem(): dictionary is empty&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;d.update(&amp;lt;obj&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Merges a dictionary with another dictionary or with an iterable of key-value pairs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; is a dictionary, &lt;code&gt;d.update(&amp;lt;obj&amp;gt;)&lt;/code&gt; merges the entries from &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; into &lt;code&gt;d&lt;/code&gt;.  For each key in &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the key is not present in &lt;code&gt;d&lt;/code&gt;, the key-value pair from &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; is added to &lt;code&gt;d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the key is already present in &lt;code&gt;d&lt;/code&gt;, the corresponding value in &lt;code&gt;d&lt;/code&gt; for that key is updated to the value from &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example showing two dictionaries merged together:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 200, &amp;#39;c&amp;#39;: 30, &amp;#39;d&amp;#39;: 400}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, key &lt;code&gt;&#39;b&#39;&lt;/code&gt; already exists in &lt;code&gt;d1&lt;/code&gt;, so its value is updated to &lt;code&gt;200&lt;/code&gt;, the value for that key from &lt;code&gt;d2&lt;/code&gt;.  However, there is no key &lt;code&gt;&#39;d&#39;&lt;/code&gt; in &lt;code&gt;d1&lt;/code&gt;, so that key-value pair is added from &lt;code&gt;d2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; may also be a sequence of key-value pairs, similar to when the &lt;code&gt;dict()&lt;/code&gt; function is used to define a dictionary.  For example, &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; can be specified as a list of tuples:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 200, &amp;#39;c&amp;#39;: 30, &amp;#39;d&amp;#39;: 400}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or the values to merge can be specified as a list of keyword arguments:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&amp;#39;a&amp;#39;: 10, &amp;#39;b&amp;#39;: 200, &amp;#39;c&amp;#39;: 30, &amp;#39;d&amp;#39;: 400}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, you covered the basic properties of the Python &lt;strong&gt;dictionary&lt;/strong&gt; and learned how to access and manipulate dictionary data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lists&lt;/strong&gt; and &lt;strong&gt;dictionaries&lt;/strong&gt; are two of the most frequently used Python types.  As you have seen, they differ from one another in the following ways:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Element Order&lt;/th&gt;
&lt;th&gt;Element Access&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;td&gt;Ordered&lt;/td&gt;
&lt;td&gt;By index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dictionary&lt;/td&gt;
&lt;td&gt;Unordered&lt;/td&gt;
&lt;td&gt;By key&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Because of their differences, lists and dictionaries tend to be appropriate for different circumstances.  You should now have a good feel for which, if either, would be best for a given situation.&lt;/p&gt;
&lt;p&gt;Next you will learn about Python &lt;strong&gt;sets&lt;/strong&gt;.  The set is another unordered composite data type, but it is quite different from a dictionary.&lt;/p&gt;
&lt;div class=&quot;container py-3 series-nav mb-3&quot;&gt;
  &lt;div class=&quot;row justify-content-between&quot;&gt;
    &lt;div class=&quot;col-12 col-md-3 text-left text-muted ml-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-lists-tuples/&quot;&gt; «&amp;nbsp;Lists and Tuples in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-center text-muted&quot;&gt;&lt;a href=&quot;#&quot;&gt;Dictionaries in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-right text-muted mr-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-sets/&quot;&gt;Sets in Python&amp;nbsp;»&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Socket Programming in Python (Guide)</title>
      <id>https://realpython.com/python-sockets/</id>
      <link href="https://realpython.com/python-sockets/"/>
      <updated>2018-08-01T14:00:00+00:00</updated>
      <summary>In this in-depth tutorial you&#39;ll learn how to build a socket server and client with Python. By the end of this tutorial, you&#39;ll understand how to use the main functions and methods in Python&#39;s socket module to write your own networked client-server applications.</summary>
      <content type="html">
        &lt;p&gt;Sockets and the socket API are used to send messages across a network. They provide a form of &lt;a href=&quot;https://en.wikipedia.org/wiki/Inter-process_communication&quot;&gt;inter-process communication (IPC)&lt;/a&gt;. The network can be a logical, local network to the computer, or one that&amp;rsquo;s physically connected to an external network, with its own connections to other networks. The obvious example is the Internet, which you connect to via your ISP.&lt;/p&gt;
&lt;p&gt;This tutorial has three different iterations of building a socket server and client with Python:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;ll start the tutorial by looking at a simple socket server and client.&lt;/li&gt;
&lt;li&gt;Once you&amp;rsquo;ve seen the API and how things work in this initial example, we&amp;rsquo;ll look at an improved version that handles multiple connections simultaneously.&lt;/li&gt;
&lt;li&gt;Finally, we&amp;rsquo;ll progress to building an example server and client that functions like a full-fledged socket application, complete with its own custom header and content.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the end of this tutorial, you&amp;rsquo;ll understand how to use the main functions and methods in Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;socket module&lt;/a&gt; to write your own client-server applications. This includes showing you how to use a custom class to send messages and data between endpoints that you can build upon and utilize for your own applications.&lt;/p&gt;
&lt;p&gt;The examples in this tutorial use Python 3.6. You can find the &lt;a href=&quot;https://github.com/realpython/materials/tree/master/python-sockets-tutorial&quot;&gt;source code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Networking and sockets are large subjects. Literal volumes have been written about them. If you&amp;rsquo;re new to sockets or networking, it&amp;rsquo;s completely normal if you feel overwhelmed with all of the terms and pieces. I know I did!&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be discouraged though. I&amp;rsquo;ve written this tutorial for you. As we do with Python, we can learn a little bit at a time. Use your browser&amp;rsquo;s bookmark feature and come back when you&amp;rsquo;re ready for the next section.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;Sockets have a long history. Their use &lt;a href=&quot;https://en.wikipedia.org/wiki/Network_socket#History&quot;&gt;originated with ARPANET&lt;/a&gt; in 1971 and later became an API in the Berkeley Software Distribution (BSD) operating system released in 1983 called &lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_sockets&quot;&gt;Berkeley sockets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When the Internet took off in the 1990s with the World Wide Web, so did network programming. Web servers and browsers weren&amp;rsquo;t the only applications taking advantage of newly connected networks and using sockets. Client-server applications of all types and sizes came into widespread use.&lt;/p&gt;
&lt;p&gt;Today, although the underlying protocols used by the socket API have evolved over the years, and we&amp;rsquo;ve seen new ones, the low-level API has remained the same.&lt;/p&gt;
&lt;p&gt;The most common type of socket applications are client-server applications, where one side acts as the server and waits for connections from clients. This is the type of application that I&amp;rsquo;ll be covering in this tutorial. More specifically, we&amp;rsquo;ll look at the socket API for &lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_sockets&quot;&gt;Internet sockets&lt;/a&gt;, sometimes called Berkeley or BSD sockets. There are also &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_domain_socket&quot;&gt;Unix domain sockets&lt;/a&gt;, which can only be used to communicate between processes on the same host.&lt;/p&gt;
&lt;h2 id=&quot;socket-api-overview&quot;&gt;Socket API Overview&lt;/h2&gt;
&lt;p&gt;Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;socket module&lt;/a&gt; provides an interface to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_sockets&quot;&gt;Berkeley sockets API&lt;/a&gt;. This is the module that we&amp;rsquo;ll use and discuss in this tutorial.&lt;/p&gt;
&lt;p&gt;The primary socket API functions and methods in this module are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect_ex()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python provides a convenient and consistent API that maps directly to these system calls, their C counterparts. We&amp;rsquo;ll look at how these are used together in the next section.&lt;/p&gt;
&lt;p&gt;As part of its standard library, Python also has classes that make using these low-level socket functions easier. Although it&amp;rsquo;s not covered in this tutorial, see the &lt;a href=&quot;https://docs.python.org/3/library/socketserver.html&quot;&gt;socketserver module&lt;/a&gt;, a framework for network servers. There are also many modules available that implement higher-level Internet protocols like HTTP and SMTP. For an overview, see &lt;a href=&quot;https://docs.python.org/3/library/internet.html&quot;&gt;Internet Protocols and Support&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;tcp-sockets&quot;&gt;TCP Sockets&lt;/h2&gt;
&lt;p&gt;As you&amp;rsquo;ll see shortly, we&amp;rsquo;ll create a socket object using &lt;code&gt;socket.socket()&lt;/code&gt; and specify the socket type as &lt;code&gt;socket.SOCK_STREAM&lt;/code&gt;. When you do that, the default protocol that&amp;rsquo;s used is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;Transmission Control Protocol (TCP)&lt;/a&gt;. This is a good default and probably what you want. &lt;/p&gt;
&lt;p&gt;Why should you use TCP? The Transmission Control Protocol (TCP):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Is reliable:&lt;/strong&gt; packets dropped in the network are detected and retransmitted by the sender.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Has in-order data delivery:&lt;/strong&gt; data is read by your application in the order it was written by the sender.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast, &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;User Datagram Protocol (UDP)&lt;/a&gt; sockets created with &lt;code&gt;socket.SOCK_DGRAM&lt;/code&gt; aren&amp;rsquo;t reliable, and data read by the receiver can be out-of-order from the sender&amp;rsquo;s writes.&lt;/p&gt;
&lt;p&gt;Why is this important? Networks are a best-effort delivery system. There&amp;rsquo;s no guarantee that your data will reach its destination or that you&amp;rsquo;ll receive what&amp;rsquo;s been sent to you.&lt;/p&gt;
&lt;p&gt;Network devices (for example, routers and switches), have finite bandwidth available and their own inherent system limitations. They have CPUs, memory, buses, and interface packet buffers, just like our clients and servers. TCP relieves you from having to worry about &lt;a href=&quot;https://en.wikipedia.org/wiki/Packet_loss&quot;&gt;packet loss&lt;/a&gt;, data arriving out-of-order, and many other things that invariably happen when you&amp;rsquo;re communicating across a network.&lt;/p&gt;
&lt;p&gt;In the diagram below, let&amp;rsquo;s look at the sequence of socket API calls and data flow for TCP:&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/sockets-tcp-flow.1da426797e37.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/sockets-tcp-flow.1da426797e37.jpg&quot; width=&quot;769&quot; height=&quot;866&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-tcp-flow.1da426797e37.jpg&amp;amp;w=192&amp;amp;sig=09c2a0657d15c3c7b6ad900fd200d3c09e37d6d7 192w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-tcp-flow.1da426797e37.jpg&amp;amp;w=384&amp;amp;sig=958fd2ae24d5d337efdff2fcaf7ed57038f65aa9 384w, https://files.realpython.com/media/sockets-tcp-flow.1da426797e37.jpg 769w&quot; sizes=&quot;75vw&quot; alt=&quot;TCP socket flow&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;TCP Socket Flow (&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:InternetSocketBasicDiagram_zhtw.png&quot; target=&quot;_blank&quot;&gt;Image source&lt;/a&gt;)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The left-hand column represents the server. On the right-hand side is the client.&lt;/p&gt;
&lt;p&gt;Starting in the top left-hand column, note the API calls the server makes to setup a &amp;ldquo;listening&amp;rdquo; socket:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A listening socket does just what it sounds like. It listens for connections from clients. When a client connects, the server calls &lt;code&gt;accept()&lt;/code&gt; to accept, or complete, the connection.&lt;/p&gt;
&lt;p&gt;The client calls &lt;code&gt;connect()&lt;/code&gt; to establish a connection to the server and initiate the three-way handshake. The handshake step is important since it ensures that each side of the connection is reachable in the network, in other words that the client can reach the server and vice-versa. It may be that only one host, client or server, can reach the other.&lt;/p&gt;
&lt;p&gt;In the middle is the round-trip section, where data is exchanged between the client and server using calls to &lt;code&gt;send()&lt;/code&gt; and &lt;code&gt;recv()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At the bottom, the client and server &lt;code&gt;close()&lt;/code&gt; their respective sockets.&lt;/p&gt;
&lt;h2 id=&quot;echo-client-and-server&quot;&gt;Echo Client and Server&lt;/h2&gt;
&lt;p&gt;Now that you&amp;rsquo;ve seen an overview of the socket API and how the client and server communicate, let&amp;rsquo;s create our first client and server. We&amp;rsquo;ll begin with a simple implementation. The server will simply echo whatever it receives back to the client.&lt;/p&gt;
&lt;h3 id=&quot;echo-server&quot;&gt;Echo Server&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the server, &lt;code&gt;echo-server.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Standard loopback interface address (localhost)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65432&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Port to listen on (non-privileged ports are &amp;gt; 1023)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Connected by&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Don&amp;rsquo;t worry about understanding everything above right now. There&amp;rsquo;s a lot going on in these few lines of code. This is just a starting point so you can see a basic server in action.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;a href=&quot;#reference&quot;&gt;reference section&lt;/a&gt; at the end of this tutorial that has more information and links to additional resources. I&amp;rsquo;ll link to these and other resources throughout the tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through each API call and see what&amp;rsquo;s happening.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;socket.socket()&lt;/code&gt; creates a socket object that supports the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#context-managers&quot;&gt;context manager type&lt;/a&gt;, so you can use it in a &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt; statement&lt;/a&gt;. There&amp;rsquo;s no need to call &lt;code&gt;s.close()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Use the socket object without calling s.close().&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The arguments passed to &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; specify the &lt;a href=&quot;#socket-address-families&quot;&gt;address family&lt;/a&gt; and socket type. &lt;code&gt;AF_INET&lt;/code&gt; is the Internet address family for &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IPv4&lt;/a&gt;. &lt;code&gt;SOCK_STREAM&lt;/code&gt; is the socket type for &lt;a href=&quot;#tcp-sockets&quot;&gt;TCP&lt;/a&gt;, the protocol that will be used to transport our messages in the network.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt; is used to associate the socket with a specific network interface and port number:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Standard loopback interface address (localhost)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65432&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Port to listen on (non-privileged ports are &amp;gt; 1023)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The values passed to &lt;code&gt;bind()&lt;/code&gt; depend on the &lt;a href=&quot;#socket-address-families&quot;&gt;address family&lt;/a&gt; of the socket. In this example, we&amp;rsquo;re using &lt;code&gt;socket.AF_INET&lt;/code&gt; (IPv4). So it expects a 2-tuple: &lt;code&gt;(host, port)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;host&lt;/code&gt; can be a hostname, IP address, or empty string. If an IP address is used, &lt;code&gt;host&lt;/code&gt; should be an IPv4-formatted address string. The IP address &lt;code&gt;127.0.0.1&lt;/code&gt; is the standard IPv4 address for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Localhost&quot;&gt;loopback&lt;/a&gt; interface, so only processes on the host will be able to connect to the server. If you pass an empty string, the server will accept connections on all available IPv4 interfaces.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;port&lt;/code&gt; should be an integer from &lt;code&gt;1&lt;/code&gt;-&lt;code&gt;65535&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt; is reserved). It&amp;rsquo;s the &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports&quot;&gt;TCP port&lt;/a&gt; number to accept connections on from clients. Some systems may require superuser privileges if the port is &amp;lt; &lt;code&gt;1024&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a note on using hostnames with &lt;code&gt;bind()&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;If you use a hostname in the host portion of IPv4/v6 socket address, the program may show a non-deterministic behavior, as Python uses the first address returned from the DNS resolution. The socket address will be resolved differently into an actual IPv4/v6 address, depending on the results from DNS resolution and/or the host configuration. For deterministic behavior use a numeric address in host portion.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll discuss this more later in &lt;a href=&quot;#using-hostnames&quot;&gt;Using Hostnames&lt;/a&gt;, but it&amp;rsquo;s worth mentioning here. For now, just understand that when using a hostname, you could see different results depending on what&amp;rsquo;s returned from the name resolution process.&lt;/p&gt;
&lt;p&gt;It could be anything. The first time you run your application, it might be the address &lt;code&gt;10.1.2.3&lt;/code&gt;. The next time it&amp;rsquo;s a different address, &lt;code&gt;192.168.0.1&lt;/code&gt;. The third time, it could be &lt;code&gt;172.16.7.8&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;Continuing with the server example, &lt;code&gt;listen()&lt;/code&gt; enables a server to &lt;code&gt;accept()&lt;/code&gt; connections. It makes it a &amp;ldquo;listening&amp;rdquo; socket:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;listen()&lt;/code&gt; has a &lt;code&gt;backlog&lt;/code&gt; parameter. It specifies the number of unaccepted connections that the system will allow before refusing new connections. Starting in Python 3.5, it&amp;rsquo;s optional. If not specified, a default &lt;code&gt;backlog&lt;/code&gt; value is chosen.&lt;/p&gt;
&lt;p&gt;If your server receives a lot of connection requests simultaneously, increasing the &lt;code&gt;backlog&lt;/code&gt; value may help by setting the maximum length of the queue for pending connections. The maximum value is system dependent. For example, on Linux, see &lt;a href=&quot;https://serverfault.com/questions/518862/will-increasing-net-core-somaxconn-make-a-difference/519152&quot;&gt;&lt;code&gt;/proc/sys/net/core/somaxconn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;accept()&lt;/code&gt; &lt;a href=&quot;#blocking-calls&quot;&gt;blocks&lt;/a&gt; and waits for an incoming connection. When a client connects, it returns a new socket object representing the connection and a tuple holding the address of the client. The tuple will contain &lt;code&gt;(host, port)&lt;/code&gt; for IPv4 connections or &lt;code&gt;(host, port, flowinfo, scopeid)&lt;/code&gt; for IPv6. See &lt;a href=&quot;#socket-address-families&quot;&gt;Socket Address Families&lt;/a&gt; in the reference section for details on the tuple values.&lt;/p&gt;
&lt;p&gt;One thing that&amp;rsquo;s imperative to understand is that we now have a new socket object from &lt;code&gt;accept()&lt;/code&gt;. This is important since it&amp;rsquo;s the socket that you&amp;rsquo;ll use to communicate with the client. It&amp;rsquo;s distinct from the listening socket that the server is using to accept new connections:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Connected by&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After getting the client socket object &lt;code&gt;conn&lt;/code&gt; from &lt;code&gt;accept()&lt;/code&gt;, an infinite &lt;code&gt;while&lt;/code&gt; loop is used to loop over &lt;a href=&quot;#blocking-calls&quot;&gt;blocking calls&lt;/a&gt; to &lt;code&gt;conn.recv()&lt;/code&gt;. This reads whatever data the client sends and echoes it back using &lt;code&gt;conn.sendall()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;conn.recv()&lt;/code&gt; returns an empty &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#bytes-objects&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object, &lt;code&gt;b&#39;&#39;&lt;/code&gt;, then the client closed the connection and the loop is terminated. The &lt;code&gt;with&lt;/code&gt; statement is used with &lt;code&gt;conn&lt;/code&gt; to automatically close the socket at the end of the block.&lt;/p&gt;
&lt;h3 id=&quot;echo-client&quot;&gt;Echo Client&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s look at the client, &lt;code&gt;echo-client.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# The server&amp;#39;s hostname or IP address&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65432&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# The port used by the server&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, world&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Received&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In comparison to the server, the client is pretty simple. It creates a socket object, connects to the server and calls &lt;code&gt;s.sendall()&lt;/code&gt; to send its message. Lastly, it calls &lt;code&gt;s.recv()&lt;/code&gt; to read the server&amp;rsquo;s reply and then prints it.&lt;/p&gt;
&lt;h3 id=&quot;running-the-echo-client-and-server&quot;&gt;Running the Echo Client and Server&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s run the client and server to see how they behave and inspect what&amp;rsquo;s happening.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&amp;rsquo;re having trouble getting the examples or your own code to run from the command line, read &lt;a href=&quot;https://dbader.org/blog/how-to-make-command-line-commands-with-python&quot;&gt;How Do I Make My Own Command-Line Commands Using Python?&lt;/a&gt; If you&amp;rsquo;re on Windows, check the &lt;a href=&quot;https://docs.python.org/3.6/faq/windows.html&quot;&gt;Python Windows FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Open a terminal or command prompt, navigate to the directory that contains your scripts, and run the server:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./echo-server.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your terminal will appear to hang. That&amp;rsquo;s because the server is &lt;a href=&quot;#blocking-calls&quot;&gt;blocked&lt;/a&gt; (suspended) in a call:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s waiting for a client connection. Now open another terminal window or command prompt and run the client:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./echo-client.py 
&lt;span class=&quot;go&quot;&gt;Received b&amp;#39;Hello, world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the server window, you should see:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./echo-server.py 
&lt;span class=&quot;go&quot;&gt;Connected by (&amp;#39;127.0.0.1&amp;#39;, 64623)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the output above, the server printed the &lt;code&gt;addr&lt;/code&gt; tuple returned from &lt;code&gt;s.accept()&lt;/code&gt;. This is the client&amp;rsquo;s IP address and TCP port number. The port number, &lt;code&gt;64623&lt;/code&gt;, will most likely be different when you run it on your machine.&lt;/p&gt;
&lt;h3 id=&quot;viewing-socket-state&quot;&gt;Viewing Socket State&lt;/h3&gt;
&lt;p&gt;To see the current state of sockets on your host, use &lt;code&gt;netstat&lt;/code&gt;. It&amp;rsquo;s available by default on macOS, Linux, and Windows.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the netstat output from macOS after starting the server:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; netstat -an
&lt;span class=&quot;go&quot;&gt;Active Internet connections (including servers)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcp4       0      0  127.0.0.1.65432        *.*                    LISTEN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that &lt;code&gt;Local Address&lt;/code&gt; is &lt;code&gt;127.0.0.1.65432&lt;/code&gt;. If &lt;code&gt;echo-server.py&lt;/code&gt; had used &lt;code&gt;HOST = &#39;&#39;&lt;/code&gt; instead of &lt;code&gt;HOST = &#39;127.0.0.1&#39;&lt;/code&gt;, netstat would show this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; netstat -an
&lt;span class=&quot;go&quot;&gt;Active Internet connections (including servers)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcp4       0      0  *.65432                *.*                    LISTEN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Local Address&lt;/code&gt; is &lt;code&gt;*.65432&lt;/code&gt;, which means all available host interfaces that support the address family will be used to accept incoming connections. In this example, in the call to &lt;code&gt;socket()&lt;/code&gt;, &lt;code&gt;socket.AF_INET&lt;/code&gt; was used (IPv4). You can see this in the &lt;code&gt;Proto&lt;/code&gt; column: &lt;code&gt;tcp4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve trimmed the output above to show the echo server only. You&amp;rsquo;ll likely see much more output, depending on the system you&amp;rsquo;re running it on. The things to notice are the columns &lt;code&gt;Proto&lt;/code&gt;, &lt;code&gt;Local Address&lt;/code&gt;, and &lt;code&gt;(state)&lt;/code&gt;. In the last example above, netstat shows the echo server is using an IPv4 TCP socket (&lt;code&gt;tcp4&lt;/code&gt;), on port 65432 on all interfaces (&lt;code&gt;*.65432&lt;/code&gt;), and it&amp;rsquo;s in the listening state (&lt;code&gt;LISTEN&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Another way to see this, along with additional helpful information, is to use &lt;code&gt;lsof&lt;/code&gt; (list open files). It&amp;rsquo;s available by default on macOS and can be installed on Linux using your package manager, if it&amp;rsquo;s not already:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; lsof -i -n
&lt;span class=&quot;go&quot;&gt;COMMAND     PID   USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Python    67982 nathan    3u  IPv4 0xecf272      0t0  TCP *:65432 (LISTEN)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt; gives you the &lt;code&gt;COMMAND&lt;/code&gt;, &lt;code&gt;PID&lt;/code&gt; (process id), and &lt;code&gt;USER&lt;/code&gt; (user id) of open Internet sockets when used with the &lt;code&gt;-i&lt;/code&gt; option. Above is the echo server process.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;netstat&lt;/code&gt; and &lt;code&gt;lsof&lt;/code&gt; have a lot of options available and differ depending on the OS you&amp;rsquo;re running them on. Check the &lt;code&gt;man&lt;/code&gt; page or documentation for both. They&amp;rsquo;re definitely worth spending a little time with and getting to know. You&amp;rsquo;ll be rewarded. On macOS and Linux, use &lt;code&gt;man netstat&lt;/code&gt; and &lt;code&gt;man lsof&lt;/code&gt;. For Windows, use &lt;code&gt;netstat /?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a common error you&amp;rsquo;ll see when a connection attempt is made to a port with no listening socket:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./echo-client.py 
&lt;span class=&quot;go&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  File &amp;quot;./echo-client.py&amp;quot;, line 9, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    s.connect((HOST, PORT))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ConnectionRefusedError: [Errno 61] Connection refused&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Either the specified port number is wrong or the server isn&amp;rsquo;t running. Or maybe there&amp;rsquo;s a firewall in the path that&amp;rsquo;s blocking the connection, which can be easy to forget about. You may also see the error &lt;code&gt;Connection timed out&lt;/code&gt;. Get a firewall rule added that allows the client to connect to the TCP port!&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a list of common &lt;a href=&quot;#errors&quot;&gt;errors&lt;/a&gt; in the reference section.&lt;/p&gt;
&lt;h2 id=&quot;communication-breakdown&quot;&gt;Communication Breakdown&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a closer look at how the client and server communicated with each other:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/sockets-loopback-interface.44fa30c53c70.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/sockets-loopback-interface.44fa30c53c70.jpg&quot; width=&quot;1134&quot; height=&quot;800&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-loopback-interface.44fa30c53c70.jpg&amp;amp;w=283&amp;amp;sig=be902b06322b7f4e6a54dc337bbe14462e742a2d 283w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-loopback-interface.44fa30c53c70.jpg&amp;amp;w=567&amp;amp;sig=44672ac33d89bbe1124a176fb0e49e26bea8ade3 567w, https://files.realpython.com/media/sockets-loopback-interface.44fa30c53c70.jpg 1134w&quot; sizes=&quot;75vw&quot; alt=&quot;Sockets loopback interface&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Localhost&quot;&gt;loopback&lt;/a&gt; interface (IPv4 address &lt;code&gt;127.0.0.1&lt;/code&gt; or IPv6 address &lt;code&gt;::1&lt;/code&gt;), data never leaves the host or touches the external network. In the diagram above, the loopback interface is contained inside the host. This represents the internal nature of the loopback interface and that connections and data that transit it are local to the host. This is why you&amp;rsquo;ll also hear the loopback interface and IP address &lt;code&gt;127.0.0.1&lt;/code&gt; or &lt;code&gt;::1&lt;/code&gt; referred to as &amp;ldquo;localhost.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Applications use the loopback interface to communicate with other processes running on the host and for security and isolation from the external network. Since it&amp;rsquo;s internal and accessible only from within the host, it&amp;rsquo;s not exposed.&lt;/p&gt;
&lt;p&gt;You can see this in action if you have an application server that uses its own private database. If it&amp;rsquo;s not a database used by other servers, it&amp;rsquo;s probably configured to listen for connections on the loopback interface only. If this is the case, other hosts on the network can&amp;rsquo;t connect to it.&lt;/p&gt;
&lt;p&gt;When you use an IP address other than &lt;code&gt;127.0.0.1&lt;/code&gt; or &lt;code&gt;::1&lt;/code&gt; in your applications, it&amp;rsquo;s probably bound to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet&lt;/a&gt; interface that&amp;rsquo;s connected to an external network. This is your gateway to other hosts outside of your &amp;ldquo;localhost&amp;rdquo; kingdom:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/sockets-ethernet-interface.aac312541af5.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/sockets-ethernet-interface.aac312541af5.jpg&quot; width=&quot;1280&quot; height=&quot;780&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-ethernet-interface.aac312541af5.jpg&amp;amp;w=320&amp;amp;sig=e1aabc4d558d8ad5bfca10ad9ae183e3653e13f8 320w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-ethernet-interface.aac312541af5.jpg&amp;amp;w=640&amp;amp;sig=2329fd241af53cf40a5dcffb6949184979f704b6 640w, https://files.realpython.com/media/sockets-ethernet-interface.aac312541af5.jpg 1280w&quot; sizes=&quot;75vw&quot; alt=&quot;Sockets ethernet interface&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Be careful out there. It&amp;rsquo;s a nasty, cruel world. Be sure to read the section &lt;a href=&quot;#using-hostnames&quot;&gt;Using Hostnames&lt;/a&gt; before venturing from the safe confines of &amp;ldquo;localhost.&amp;rdquo; There&amp;rsquo;s a security note that applies even if you&amp;rsquo;re not using hostnames and using IP addresses only.&lt;/p&gt;
&lt;h2 id=&quot;handling-multiple-connections&quot;&gt;Handling Multiple Connections&lt;/h2&gt;
&lt;p&gt;The echo server definitely has its limitations. The biggest being that it serves only one client and then exits. The echo client has this limitation too, but there&amp;rsquo;s an additional problem. When the client makes the following call, it&amp;rsquo;s possible that &lt;code&gt;s.recv()&lt;/code&gt; will return only one byte, &lt;code&gt;b&#39;H&#39;&lt;/code&gt; from &lt;code&gt;b&#39;Hello, world&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;bufsize&lt;/code&gt; argument of &lt;code&gt;1024&lt;/code&gt; used above is the maximum amount of data to be received at once. It doesn&amp;rsquo;t mean that &lt;code&gt;recv()&lt;/code&gt; will return &lt;code&gt;1024&lt;/code&gt; bytes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;send()&lt;/code&gt; also behaves this way. &lt;code&gt;send()&lt;/code&gt; returns the number of bytes sent, which may be less than the size of the data passed in. You&amp;rsquo;re responsible for checking this and calling &lt;code&gt;send()&lt;/code&gt; as many times as needed to send all of the data:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.socket.send&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We avoided having to do this by using &lt;code&gt;sendall()&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Unlike send(), this method continues to send data from bytes until either all data has been sent or an error occurs. None is returned on success.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.socket.sendall&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We have two problems at this point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do we handle multiple connections concurrently?&lt;/li&gt;
&lt;li&gt;We need to call &lt;code&gt;send()&lt;/code&gt; and &lt;code&gt;recv()&lt;/code&gt; until all data is sent or received.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do we do? There are many approaches to &lt;a href=&quot;https://docs.python.org/3/library/concurrency.html&quot;&gt;concurrency&lt;/a&gt;. More recently, a popular approach is to use &lt;a href=&quot;https://docs.python.org/3/library/asyncio.html&quot;&gt;Asynchronous I/O&lt;/a&gt;. &lt;code&gt;asyncio&lt;/code&gt; was introduced into the standard library in Python 3.4. The traditional choice is to use &lt;a href=&quot;https://docs.python.org/3/library/threading.html&quot;&gt;threads&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The trouble with concurrency is it&amp;rsquo;s hard to get right. There are many subtleties to consider and guard against. All it takes is for one of these to manifest itself and your application may suddenly fail in not-so-subtle ways.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t say this to scare you away from learning and using concurrent programming. If your application needs to scale, it&amp;rsquo;s a necessity if you want to use more than one processor or one core. However, for this tutorial, we&amp;rsquo;ll use something that&amp;rsquo;s more traditional than threads and easier to reason about. We&amp;rsquo;re going to use the granddaddy of system calls: &lt;a href=&quot;https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.select&quot;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select()&lt;/code&gt; allows you to check for I/O completion on more than one socket. So you can call &lt;code&gt;select()&lt;/code&gt; to see which sockets have I/O ready for reading and/or writing. But this is Python, so there&amp;rsquo;s more. We&amp;rsquo;re going to use the &lt;a href=&quot;https://docs.python.org/3/library/selectors.html&quot;&gt;selectors&lt;/a&gt; module in the standard library so the most efficient implementation is used, regardless of the operating system we happen to be running on:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;This module allows high-level and efficient I/O multiplexing, built upon the select module primitives. Users are encouraged to use this module instead, unless they want precise control over the OS-level primitives used.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/selectors.html&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even though, by using &lt;code&gt;select()&lt;/code&gt;, we&amp;rsquo;re not able to run concurrently, depending on your workload, this approach may still be plenty fast. It depends on what your application needs to do when it services a request and the number of clients it needs to support.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/asyncio.html&quot;&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt; uses single-threaded cooperative multitasking and an event loop to manage tasks. With &lt;code&gt;select()&lt;/code&gt;, we&amp;rsquo;ll be writing our own version of an event loop, albeit more simply and synchronously. When using multiple threads, even though you have concurrency, we currently have to use the &lt;a href=&quot;https://realpython.com/python-gil/&quot;&gt;GIL&lt;/a&gt; with &lt;a href=&quot;https://wiki.python.org/moin/GlobalInterpreterLock&quot;&gt;CPython and PyPy&lt;/a&gt;. This effectively limits the amount of work we can do in parallel anyway.&lt;/p&gt;
&lt;p&gt;I say all of this to explain that using &lt;code&gt;select()&lt;/code&gt; may be a perfectly fine choice. Don&amp;rsquo;t feel like you have to use &lt;code&gt;asyncio&lt;/code&gt;, threads, or the latest asynchronous library. Typically, in a network application, your application is I/O bound: it could be waiting on the local network, endpoints on the other side of the network, on a disk, and so forth.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re getting requests from clients that initiate CPU bound work, look at the &lt;a href=&quot;https://docs.python.org/3/library/concurrent.futures.html&quot;&gt;concurrent.futures&lt;/a&gt; module. It contains the class &lt;a href=&quot;https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor&quot;&gt;ProcessPoolExecutor&lt;/a&gt; that uses a pool of processes to execute calls asynchronously.&lt;/p&gt;
&lt;p&gt;If you use multiple processes, the operating system is able to schedule your Python code to run in parallel on multiple processors or cores, without the GIL. For ideas and inspiration, see the PyCon talk &lt;a href=&quot;https://www.youtube.com/watch?v=0kXaLh8Fz3k&quot;&gt;John Reese - Thinking Outside the GIL with AsyncIO and Multiprocessing - PyCon 2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next section, we&amp;rsquo;ll look at examples of a server and client that address these problems. They use &lt;code&gt;select()&lt;/code&gt; to handle multiple connections simultaneously and call &lt;code&gt;send()&lt;/code&gt; and &lt;code&gt;recv()&lt;/code&gt; as many times as needed.&lt;/p&gt;
&lt;h2 id=&quot;multi-connection-client-and-server&quot;&gt;Multi-Connection Client and Server&lt;/h2&gt;
&lt;p&gt;In the next two sections, we&amp;rsquo;ll create a server and client that handles multiple connections using a &lt;code&gt;selector&lt;/code&gt; object created from the &lt;a href=&quot;https://docs.python.org/3/library/selectors.html&quot;&gt;selectors&lt;/a&gt; module.&lt;/p&gt;
&lt;h3 id=&quot;multi-connection-server&quot;&gt;Multi-Connection Server&lt;/h3&gt;
&lt;p&gt;First, let&amp;rsquo;s look at the multi-connection server, &lt;code&gt;multiconn-server.py&lt;/code&gt;. Here&amp;rsquo;s the first part that sets up the listening socket:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selectors&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lsock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lsock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lsock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;listening on&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lsock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setblocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The biggest difference between this server and the echo server is the call to &lt;code&gt;lsock.setblocking(False)&lt;/code&gt; to configure the socket in non-blocking mode. Calls made to this socket will no longer &lt;a href=&quot;#blocking-calls&quot;&gt;block&lt;/a&gt;. When it&amp;rsquo;s used with &lt;code&gt;sel.select()&lt;/code&gt;, as you&amp;rsquo;ll see below, we can wait for events on one or more sockets and then read and write data when it&amp;rsquo;s ready.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sel.register()&lt;/code&gt; registers the socket to be monitored with &lt;code&gt;sel.select()&lt;/code&gt; for the events you&amp;rsquo;re interested in. For the listening socket, we want read events: &lt;code&gt;selectors.EVENT_READ&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is used to store whatever arbitrary data you&amp;rsquo;d like along with the socket. It&amp;rsquo;s returned when &lt;code&gt;select()&lt;/code&gt; returns. We&amp;rsquo;ll use &lt;code&gt;data&lt;/code&gt; to keep track of what&amp;rsquo;s been sent and received on the socket.&lt;/p&gt;
&lt;p&gt;Next is the event loop:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selectors&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accept_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;service_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.select&quot;&gt;&lt;code&gt;sel.select(timeout=None)&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;#blocking-calls&quot;&gt;blocks&lt;/a&gt; until there are sockets ready for I/O. It returns a list of (key, events) tuples, one for each socket. &lt;code&gt;key&lt;/code&gt; is a &lt;a href=&quot;https://docs.python.org/3/library/selectors.html#selectors.SelectorKey&quot;&gt;SelectorKey&lt;/a&gt; &lt;code&gt;namedtuple&lt;/code&gt; that contains a &lt;code&gt;fileobj&lt;/code&gt; attribute. &lt;code&gt;key.fileobj&lt;/code&gt; is the socket object, and &lt;code&gt;mask&lt;/code&gt; is an event mask of the operations that are ready.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;key.data&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, then we know it&amp;rsquo;s from the listening socket and we need to &lt;code&gt;accept()&lt;/code&gt; the connection. We&amp;rsquo;ll call our own &lt;code&gt;accept()&lt;/code&gt; wrapper function to get the new socket object and register it with the selector. We&amp;rsquo;ll look at it in a moment.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;key.data&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt;, then we know it&amp;rsquo;s a client socket that&amp;rsquo;s already been accepted, and we need to service it. &lt;code&gt;service_connection()&lt;/code&gt; is then called and passed &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;mask&lt;/code&gt;, which contains everything we need to operate on the socket.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at what our &lt;code&gt;accept_wrapper()&lt;/code&gt; function does:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Should be ready to read&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;accepted connection from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setblocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_WRITE&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the listening socket was registered for the event &lt;code&gt;selectors.EVENT_READ&lt;/code&gt;, it should be ready to read. We call &lt;code&gt;sock.accept()&lt;/code&gt; and then immediately call &lt;code&gt;conn.setblocking(False)&lt;/code&gt; to put the socket in non-blocking mode.&lt;/p&gt;
&lt;p&gt;Remember, this is the main objective in this version of the server since we don&amp;rsquo;t want it to &lt;a href=&quot;#blocking-calls&quot;&gt;block&lt;/a&gt;. If it blocks, then the entire server is stalled until it returns. Which means other sockets are left waiting. This is the dreaded &amp;ldquo;hang&amp;rdquo; state that you don&amp;rsquo;t want your server to be in.&lt;/p&gt;
&lt;p&gt;Next, we create an object to hold the data we want included along with the socket using the class &lt;code&gt;types.SimpleNamespace&lt;/code&gt;. Since we want to know when the client connection is ready for reading and writing, both of those events are set using the following:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_WRITE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;events&lt;/code&gt; mask, socket, and data objects are then passed to &lt;code&gt;sel.register()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s look at &lt;code&gt;service_connection()&lt;/code&gt; to see how a client connection is handled when it&amp;rsquo;s ready:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileobj&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Should be ready to read&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;closing connection to&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unregister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;echoing&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Should be ready to write&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the heart of the simple multi-connection server. &lt;code&gt;key&lt;/code&gt; is the &lt;code&gt;namedtuple&lt;/code&gt; returned from &lt;code&gt;select()&lt;/code&gt; that contains the socket object (&lt;code&gt;fileobj&lt;/code&gt;) and data object. &lt;code&gt;mask&lt;/code&gt; contains the events that are ready.&lt;/p&gt;
&lt;p&gt;If the socket is ready for reading, then &lt;code&gt;mask &amp;amp; selectors.EVENT_READ&lt;/code&gt; is true, and &lt;code&gt;sock.recv()&lt;/code&gt; is called. Any data that&amp;rsquo;s read is appended to &lt;code&gt;data.outb&lt;/code&gt; so it can be sent later.&lt;/p&gt;
&lt;p&gt;Note the &lt;code&gt;else:&lt;/code&gt; block if no data is received:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;closing connection to&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unregister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means that the client has closed their socket, so the server should too. But don&amp;rsquo;t forget to first call &lt;code&gt;sel.unregister()&lt;/code&gt; so it&amp;rsquo;s no longer monitored by &lt;code&gt;select()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the socket is ready for writing, which should always be the case for a healthy socket, any received data stored in &lt;code&gt;data.outb&lt;/code&gt; is echoed to the client using &lt;code&gt;sock.send()&lt;/code&gt;. The bytes sent are then removed from the send buffer:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;multi-connection-client&quot;&gt;Multi-Connection Client&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s look at the multi-connection client, &lt;code&gt;multiconn-client.py&lt;/code&gt;. It&amp;rsquo;s very similar to the server, but instead of listening for connections, it starts by initiating connections via &lt;code&gt;start_connections()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Message 1 from client.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Message 2 from client.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_conns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_conns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;starting connection&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setblocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_WRITE&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;msg_total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;recv_total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;num_conns&lt;/code&gt; is read from the command-line, which is the number of connections to create to the server. Just like the server, each socket is set to non-blocking mode.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect_ex()&lt;/code&gt; is used instead of &lt;code&gt;connect()&lt;/code&gt; since &lt;code&gt;connect()&lt;/code&gt; would immediately raise a &lt;code&gt;BlockingIOError&lt;/code&gt; exception. &lt;code&gt;connect_ex()&lt;/code&gt; initially returns an error indicator, &lt;code&gt;errno.EINPROGRESS&lt;/code&gt;, instead of raising an exception while the connection is in progress. Once the connection is completed, the socket is ready for reading and writing and is returned as such by &lt;code&gt;select()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the socket is setup, the data we want stored with the socket is created using the class &lt;code&gt;types.SimpleNamespace&lt;/code&gt;. The messages the client will send to the server are copied using &lt;code&gt;list(messages)&lt;/code&gt; since each connection will call &lt;code&gt;socket.send()&lt;/code&gt; and modify the list. Everything needed to keep track of what the client needs to send, has sent and received, and the total number of bytes in the messages is stored in the object &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at &lt;code&gt;service_connection()&lt;/code&gt;. It&amp;rsquo;s fundamentally the same as the server:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileobj&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Should be ready to read&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;received&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;from connection&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;closing connection&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unregister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sending&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;to connection&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Should be ready to write&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s one important difference. It keeps track of the number of bytes it&amp;rsquo;s received from the server so it can close its side of the connection. When the server detects this, it closes its side of the connection too.&lt;/p&gt;
&lt;p&gt;Note that by doing this, the server depends on the client being well-behaved: the server expects the client to close its side of the connection when it&amp;rsquo;s done sending messages. If the client doesn&amp;rsquo;t close, the server will leave the connection open. In a real application, you may want to guard against this in your server and prevent client connections from accumulating if they don&amp;rsquo;t send a request after a certain amount of time.&lt;/p&gt;
&lt;h3 id=&quot;running-the-multi-connection-client-and-server&quot;&gt;Running the Multi-Connection Client and Server&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s run &lt;code&gt;multiconn-server.py&lt;/code&gt; and &lt;code&gt;multiconn-client.py&lt;/code&gt;. They both use command-line arguments. You can run them without arguments to see the options.&lt;/p&gt;
&lt;p&gt;For the server, pass a &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; number:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./multiconn-server.py
&lt;span class=&quot;go&quot;&gt;usage: ./multiconn-server.py &amp;lt;host&amp;gt; &amp;lt;port&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the client, also pass the number of connections to create to the server, &lt;code&gt;num_connections&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./multiconn-client.py
&lt;span class=&quot;go&quot;&gt;usage: ./multiconn-client.py &amp;lt;host&amp;gt; &amp;lt;port&amp;gt; &amp;lt;num_connections&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below is the server output when listening on the loopback interface on port 65432:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./multiconn-server.py &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;listening on (&amp;#39;127.0.0.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;accepted connection from (&amp;#39;127.0.0.1&amp;#39;, 61354)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;accepted connection from (&amp;#39;127.0.0.1&amp;#39;, 61355)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;echoing b&amp;#39;Message 1 from client.Message 2 from client.&amp;#39; to (&amp;#39;127.0.0.1&amp;#39;, 61354)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;echoing b&amp;#39;Message 1 from client.Message 2 from client.&amp;#39; to (&amp;#39;127.0.0.1&amp;#39;, 61355)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;127.0.0.1&amp;#39;, 61354)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;127.0.0.1&amp;#39;, 61355)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below is the client output when it creates two connections to the server above:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./multiconn-client.py &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;starting connection 1 to (&amp;#39;127.0.0.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;starting connection 2 to (&amp;#39;127.0.0.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;Message 1 from client.&amp;#39; to connection 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;Message 2 from client.&amp;#39; to connection 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;Message 1 from client.&amp;#39; to connection 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;Message 2 from client.&amp;#39; to connection 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received b&amp;#39;Message 1 from client.Message 2 from client.&amp;#39; from connection 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received b&amp;#39;Message 1 from client.Message 2 from client.&amp;#39; from connection 2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;application-client-and-server&quot;&gt;Application Client and Server&lt;/h2&gt;
&lt;p&gt;The multi-connection client and server example is definitely an improvement compared with where we started. However, let&amp;rsquo;s take one more step and address the shortcomings of the previous &amp;ldquo;multiconn&amp;rdquo; example in a final implementation: the application client and server.&lt;/p&gt;
&lt;p&gt;We want a client and server that handles errors appropriately so other connections aren&amp;rsquo;t affected. Obviously, our client or server shouldn&amp;rsquo;t come crashing down in a ball of fury if an exception isn&amp;rsquo;t caught. This is something we haven&amp;rsquo;t discussed up until now. I&amp;rsquo;ve intentionally left out error handling for brevity and clarity in the examples.&lt;/p&gt;
&lt;p&gt;Now that you&amp;rsquo;re familiar with the basic API, non-blocking sockets, and &lt;code&gt;select()&lt;/code&gt;, we can add some error handling and discuss the &amp;ldquo;elephant in the room&amp;rdquo; that I&amp;rsquo;ve kept hidden from you behind that large curtain over there. Yes, I&amp;rsquo;m talking about the custom class I mentioned way back in the introduction. I knew you wouldn&amp;rsquo;t forget.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s address the errors:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;All errors raise exceptions. The normal exceptions for invalid argument types and out-of-memory conditions can be raised; starting from Python 3.3, errors related to socket or address semantics raise &lt;code&gt;OSError&lt;/code&gt; or one of its subclasses.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to catch &lt;code&gt;OSError&lt;/code&gt;. Another thing I haven&amp;rsquo;t mentioned in relation to errors is timeouts. You&amp;rsquo;ll see them discussed in many places in the documentation. Timeouts happen and are a &amp;ldquo;normal&amp;rdquo; error. Hosts and routers are rebooted, switch ports go bad, cables go bad, cables get unplugged, you name it. You should be prepared for these and other errors and handle them in your code.&lt;/p&gt;
&lt;p&gt;What about the &amp;ldquo;elephant in the room?&amp;rdquo; As hinted by the socket type &lt;code&gt;socket.SOCK_STREAM&lt;/code&gt;, when using TCP, you&amp;rsquo;re reading from a continuous stream of bytes. It&amp;rsquo;s like reading from a file on disk, but instead you&amp;rsquo;re reading bytes from the network.&lt;/p&gt;
&lt;p&gt;However, unlike reading a file, there&amp;rsquo;s no &lt;a href=&quot;https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects&quot;&gt;&lt;code&gt;f.seek()&lt;/code&gt;&lt;/a&gt;. In other words, you can&amp;rsquo;t reposition the socket pointer, if there was one, and move randomly around the data reading whatever, whenever you&amp;rsquo;d like.&lt;/p&gt;
&lt;p&gt;When bytes arrive at your socket, there are network buffers involved. Once you&amp;rsquo;ve read them, they need to be saved somewhere. Calling &lt;code&gt;recv()&lt;/code&gt; again reads the next stream of bytes available from the socket.&lt;/p&gt;
&lt;p&gt;What this means is that you&amp;rsquo;ll be reading from the socket in chunks. You need to call &lt;code&gt;recv()&lt;/code&gt; and save the data in a buffer until you&amp;rsquo;ve read enough bytes to have a complete message that makes sense to your application.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s up to you to define and keep track of where the message boundaries are. As far as the TCP socket is concerned, it&amp;rsquo;s just sending and receiving raw bytes to and from the network. It knows nothing about what those raw bytes mean.&lt;/p&gt;
&lt;p&gt;This bring us to defining an application-layer protocol. What&amp;rsquo;s an application-layer protocol? Put simply, your application will send and receive messages. These messages are your application&amp;rsquo;s protocol.&lt;/p&gt;
&lt;p&gt;In other words, the length and format you choose for these messages define the semantics and behavior of your application. This is directly related to what I explained in the previous paragraph regarding reading bytes from the socket. When you&amp;rsquo;re reading bytes with &lt;code&gt;recv()&lt;/code&gt;, you need to keep up with how many bytes were read and figure out where the message boundaries are.&lt;/p&gt;
&lt;p&gt;How is this done? One way is to always send fixed-length messages. If they&amp;rsquo;re always the same size, then it&amp;rsquo;s easy. When you&amp;rsquo;ve read that number of bytes into a buffer, then you know you have one complete message.&lt;/p&gt;
&lt;p&gt;However, using fixed-length messages is inefficient for small messages where you&amp;rsquo;d need to use padding to fill them out. Also, you&amp;rsquo;re still left with the problem of what to do about data that doesn&amp;rsquo;t fit into one message.&lt;/p&gt;
&lt;p&gt;In this tutorial, we&amp;rsquo;ll take a generic approach. An approach that&amp;rsquo;s used by many protocols, including HTTP. We&amp;rsquo;ll prefix messages with a header that includes the content length as well as any other fields we need. By doing this, we&amp;rsquo;ll only need to keep up with the header. Once we&amp;rsquo;ve read the header, we can process it to determine the length of the message&amp;rsquo;s content and then read that number of bytes to consume it.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll implement this by creating a custom class that can send and receive messages that contain text or binary data. You can improve and extend it for your own applications. The most important thing is that you&amp;rsquo;ll be able to see an example of how this is done.&lt;/p&gt;
&lt;p&gt;I need to mention something regarding sockets and bytes that may affect you. As we talked about earlier, when sending and receiving data via sockets, you&amp;rsquo;re sending and receiving raw bytes.&lt;/p&gt;
&lt;p&gt;If you receive data and want to use it in a context where it&amp;rsquo;s interpreted as multiple bytes, for example a 4-byte integer, you&amp;rsquo;ll need to take into account that it could be in a format that&amp;rsquo;s not native to your machine&amp;rsquo;s CPU. The client or server on the other end could have a CPU that uses a different byte order than your own. If this is the case, you&amp;rsquo;ll need to convert it to your host&amp;rsquo;s native byte order before using it.&lt;/p&gt;
&lt;p&gt;This byte order is referred to as a CPU&amp;rsquo;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;endianness&lt;/a&gt;. See &lt;a href=&quot;#byte-endianness&quot;&gt;Byte Endianness&lt;/a&gt; in the reference section for details. We&amp;rsquo;ll avoid this issue by taking advantage of Unicode for our message header and using the encoding UTF-8. Since UTF-8 uses an 8-bit encoding, there are no byte ordering issues.&lt;/p&gt;
&lt;p&gt;You can find an explanation in Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/codecs.html#encodings-and-unicode&quot;&gt;Encodings and Unicode&lt;/a&gt; documentation. Note that this applies to the text header only. We&amp;rsquo;ll use an explicit type and encoding defined in the header for the content that&amp;rsquo;s being sent, the message payload. This will allow us to transfer any data we&amp;rsquo;d like (text or binary), in any format.&lt;/p&gt;
&lt;p&gt;You can easily determine the byte order of your machine by using &lt;code&gt;sys.byteorder&lt;/code&gt;. For example, on my Intel laptop, this happens:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; python3 -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;import sys; print(repr(sys.byteorder))&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I run this in a virtual machine that &lt;a href=&quot;https://www.qemu.org/&quot;&gt;emulates&lt;/a&gt; a big-endian CPU (PowerPC), then this happens:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; python3 -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;import sys; print(repr(sys.byteorder))&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example application, our application-layer protocol defines the header as Unicode text with a UTF-8 encoding. For the actual content in the message, the message payload, you&amp;rsquo;ll still have to swap the byte order manually if needed.&lt;/p&gt;
&lt;p&gt;This will depend on your application and whether or not it needs to process multi-byte binary data from a machine with a different endianness. You can help your client or server implement binary support by adding additional headers and using them to pass parameters, similar to HTTP.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry if this doesn&amp;rsquo;t make sense yet. In the next section, you&amp;rsquo;ll see how all of this works and fits together.&lt;/p&gt;
&lt;h3 id=&quot;application-protocol-header&quot;&gt;Application Protocol Header&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s fully define the protocol header. The protocol header is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable-length text&lt;/li&gt;
&lt;li&gt;Unicode with the encoding UTF-8&lt;/li&gt;
&lt;li&gt;A Python dictionary serialized using &lt;a href=&quot;https://realpython.com/python-json/&quot;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The required headers, or sub-headers, in the protocol header&amp;rsquo;s dictionary are as follows:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;byteorder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The byte order of the machine (uses &lt;code&gt;sys.byteorder&lt;/code&gt;). This may not be required for your application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;content-length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The length of the content in bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;content-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The type of content in the payload, for example, &lt;code&gt;text/json&lt;/code&gt; or &lt;code&gt;binary/my-binary-type&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;content-encoding&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The encoding used by the content, for example, &lt;code&gt;utf-8&lt;/code&gt; for Unicode text or &lt;code&gt;binary&lt;/code&gt; for binary data.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;These headers inform the receiver about the content in the payload of the message. This allows you to send arbitrary data while providing enough information so the content can be decoded and interpreted correctly by the receiver. Since the headers are in a dictionary, it&amp;rsquo;s easy to add additional headers by inserting key/value pairs as needed.&lt;/p&gt;
&lt;h3 id=&quot;sending-an-application-message&quot;&gt;Sending an Application Message&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s still a bit of a problem. We have a variable-length header, which is nice and flexible, but how do you know the length of the header when reading it with &lt;code&gt;recv()&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;When we previously talked about using &lt;code&gt;recv()&lt;/code&gt; and message boundaries, I mentioned that fixed-length headers can be inefficient. That&amp;rsquo;s true, but we&amp;rsquo;re going to use a small, 2-byte, fixed-length header to prefix the JSON header that contains its length.&lt;/p&gt;
&lt;p&gt;You can think of this as a hybrid approach to sending messages. In effect, we&amp;rsquo;re bootstrapping the message receive process by sending the length of the header first. This makes it easy for our receiver to deconstruct the message.&lt;/p&gt;
&lt;p&gt;To give you a better idea of the message format, let&amp;rsquo;s look at a message in its entirety:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/sockets-app-message.2e131b0751e3.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/sockets-app-message.2e131b0751e3.jpg&quot; width=&quot;769&quot; height=&quot;672&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-app-message.2e131b0751e3.jpg&amp;amp;w=192&amp;amp;sig=dbcf11baf145f87ecf56eeb11de655514e37e0da 192w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/sockets-app-message.2e131b0751e3.jpg&amp;amp;w=384&amp;amp;sig=c70c1ec1f35e51f2a95778a748a62c11218fd26a 384w, https://files.realpython.com/media/sockets-app-message.2e131b0751e3.jpg 769w&quot; sizes=&quot;75vw&quot; alt=&quot;Sockets application message&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A message starts with a fixed-length header of 2 bytes that&amp;rsquo;s an integer in network byte order. This is the length of the next header, the variable-length JSON header. Once we&amp;rsquo;ve read 2 bytes with &lt;code&gt;recv()&lt;/code&gt;, then we know we can process the 2 bytes as an integer and then read that number of bytes before decoding the UTF-8 JSON header.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;#application-protocol-header&quot;&gt;JSON header&lt;/a&gt; contains a dictionary of additional headers. One of those is &lt;code&gt;content-length&lt;/code&gt;, which is the number of bytes of the message&amp;rsquo;s content (not including the JSON header). Once we&amp;rsquo;ve called &lt;code&gt;recv()&lt;/code&gt; and read &lt;code&gt;content-length&lt;/code&gt; bytes, we&amp;rsquo;ve reached a message boundary and read an entire message.&lt;/p&gt;
&lt;h3 id=&quot;application-message-class&quot;&gt;Application Message Class&lt;/h3&gt;
&lt;p&gt;Finally, the payoff! Let&amp;rsquo;s look at the &lt;code&gt;Message&lt;/code&gt; class and see how it&amp;rsquo;s used with &lt;code&gt;select()&lt;/code&gt; when read and write events happen on the socket.&lt;/p&gt;
&lt;p&gt;For this example application, I had to come up with an idea for what types of messages the client and server would use. We&amp;rsquo;re far beyond toy echo clients and servers at this point.&lt;/p&gt;
&lt;p&gt;To keep things simple and still demonstrate how things would work in a real application, I created an application protocol that implements a basic search feature. The client sends a search request and the server does a lookup for a match. If the request sent by the client isn&amp;rsquo;t recognized as a search, the server assumes it&amp;rsquo;s a binary request and returns a binary response.&lt;/p&gt;
&lt;p&gt;After reading the following sections, running the examples, and experimenting with the code, you&amp;rsquo;ll see how things work. You can then use the &lt;code&gt;Message&lt;/code&gt; class as a starting point and modify it for your own use.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re really not that far off from the &amp;ldquo;multiconn&amp;rdquo; client and server example. The event loop code stays the same in &lt;code&gt;app-client.py&lt;/code&gt; and &lt;code&gt;app-server.py&lt;/code&gt;. What I&amp;rsquo;ve done is move the message code into a class named &lt;code&gt;Message&lt;/code&gt; and added methods to support reading, writing, and processing of the headers and content. This is a great example for using a class.&lt;/p&gt;
&lt;p&gt;As we discussed before and you&amp;rsquo;ll see below, working with sockets involves keeping state. By using a class, we keep all of the state, data, and code bundled together in an organized unit. An instance of the class is created for each socket in the client and server when a connection is started or accepted.&lt;/p&gt;
&lt;p&gt;The class is mostly the same for both the client and the server for the wrapper and utility methods. They start with an underscore, like &lt;code&gt;Message._json_encode()&lt;/code&gt;. These methods simplify working with the class. They help other methods by allowing them to stay shorter and support the &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt; principle.&lt;/p&gt;
&lt;p&gt;The server&amp;rsquo;s &lt;code&gt;Message&lt;/code&gt; class works in essentially the same way as the client&amp;rsquo;s and vice-versa. The difference being that the client initiates the connection and sends a request message, followed by processing the server&amp;rsquo;s response message. Conversely, the server waits for a connection, processes the client&amp;rsquo;s request message, and then sends a response message.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Endpoint&lt;/th&gt;
&lt;th&gt;Action / Message Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;Sends a &lt;code&gt;Message&lt;/code&gt; containing request content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Receives and processes client request &lt;code&gt;Message&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Sends a &lt;code&gt;Message&lt;/code&gt; containing response content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;Receives and processes server response &lt;code&gt;Message&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s the file and code layout:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Application&lt;/th&gt;
&lt;th&gt;File&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;&lt;code&gt;app-server.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The server&amp;rsquo;s main script&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;&lt;code&gt;libserver.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The server&amp;rsquo;s &lt;code&gt;Message&lt;/code&gt; class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;&lt;code&gt;app-client.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The client&amp;rsquo;s main script&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;&lt;code&gt;libclient.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The client&amp;rsquo;s &lt;code&gt;Message&lt;/code&gt; class&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&quot;message-entry-point&quot;&gt;Message Entry Point&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;d like to discuss how the &lt;code&gt;Message&lt;/code&gt; class works by first mentioning an aspect of its design that wasn&amp;rsquo;t immediately obvious to me. Only after refactoring it at least five times did I arrive at what it is currently. Why? Managing state.&lt;/p&gt;
&lt;p&gt;After a &lt;code&gt;Message&lt;/code&gt; object is created, it&amp;rsquo;s associated with a socket that&amp;rsquo;s monitored for events using &lt;code&gt;selector.register()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some of the code examples in this section are from the server&amp;rsquo;s main script and &lt;code&gt;Message&lt;/code&gt; class, but this section and discussion applies equally to the client as well. I&amp;rsquo;ll show and explain the client&amp;rsquo;s version when it differs.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When events are ready on the socket, they&amp;rsquo;re returned by &lt;code&gt;selector.select()&lt;/code&gt;. We can then get a reference back to the message object using the &lt;code&gt;data&lt;/code&gt; attribute on the &lt;code&gt;key&lt;/code&gt; object and call a method in &lt;code&gt;Message&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking at the event loop above, you&amp;rsquo;ll see that &lt;code&gt;sel.select()&lt;/code&gt; is in the driver&amp;rsquo;s seat. It&amp;rsquo;s blocking, waiting at the top of the loop for events. It&amp;rsquo;s responsible for waking up when read and write events are ready to be processed on the socket. Which means, indirectly, it&amp;rsquo;s also responsible for calling the method &lt;code&gt;process_events()&lt;/code&gt;. This is what I mean when I say the method &lt;code&gt;process_events()&lt;/code&gt; is the entry point.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see what the &lt;code&gt;process_events()&lt;/code&gt; method does:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s good: &lt;code&gt;process_events()&lt;/code&gt; is simple. It can only do two things: call &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This brings us back to managing state. After a few refactorings, I decided that if another method depended on state variables having a certain value, then they would only be called from &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;. This keeps the logic as simple as possible as events come in on the socket for processing.&lt;/p&gt;
&lt;p&gt;This may seem obvious, but the first few iterations of the class were a mix of some methods that checked the current state and, depending on their value, called other methods to process data outside &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt;. In the end, this proved too complex to manage and keep up with.&lt;/p&gt;
&lt;p&gt;You should definitely modify the class to suit your own needs so it works best for you, but I&amp;rsquo;d recommend that you keep the state checks and the calls to methods that depend on that state to the &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt; methods if possible.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at &lt;code&gt;read()&lt;/code&gt;. This is the server&amp;rsquo;s version, but the client&amp;rsquo;s is the same. It just uses a different method name, &lt;code&gt;process_response()&lt;/code&gt; instead of &lt;code&gt;process_request()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_jsonheader_len&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_protoheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_jsonheader_len&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;_read()&lt;/code&gt; method is called first. It calls &lt;code&gt;socket.recv()&lt;/code&gt; to read data from the socket and store it in a receive buffer.&lt;/p&gt;
&lt;p&gt;Remember that when &lt;code&gt;socket.recv()&lt;/code&gt; is called, all of the data that makes up a complete message may not have arrived yet. &lt;code&gt;socket.recv()&lt;/code&gt; may need to be called again. This is why there are state checks for each part of the message before calling the appropriate method to process it.&lt;/p&gt;
&lt;p&gt;Before a method processes its part of the message, it first checks to make sure enough bytes have been read into the receive buffer. If there are, it processes its respective bytes, removes them from the buffer and writes its output to a variable that&amp;rsquo;s used by the next processing stage. Since there are three components to a message, there are three state checks and &lt;code&gt;process&lt;/code&gt; method calls:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Message Component&lt;/th&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Fixed-length header&lt;/td&gt;
&lt;td&gt;&lt;code&gt;process_protoheader()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;self._jsonheader_len&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSON header&lt;/td&gt;
&lt;td&gt;&lt;code&gt;process_jsonheader()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;self.jsonheader&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content&lt;/td&gt;
&lt;td&gt;&lt;code&gt;process_request()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;self.request&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Next, let&amp;rsquo;s look at &lt;code&gt;write()&lt;/code&gt;. This is the server&amp;rsquo;s version:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;write()&lt;/code&gt; checks first for a &lt;code&gt;request&lt;/code&gt;. If one exists and a response hasn&amp;rsquo;t been created, &lt;code&gt;create_response()&lt;/code&gt; is called. &lt;code&gt;create_response()&lt;/code&gt; sets the state variable &lt;code&gt;response_created&lt;/code&gt; and writes the response to the send buffer.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;_write()&lt;/code&gt; method calls &lt;code&gt;socket.send()&lt;/code&gt; if there&amp;rsquo;s data in the send buffer.&lt;/p&gt;
&lt;p&gt;Remember that when &lt;code&gt;socket.send()&lt;/code&gt; is called, all of the data in the send buffer may not have been queued for transmission. The network buffers for the socket may be full, and &lt;code&gt;socket.send()&lt;/code&gt; may need to be called again. This is why there are state checks. &lt;code&gt;create_response()&lt;/code&gt; should only be called once, but it&amp;rsquo;s expected that &lt;code&gt;_write()&lt;/code&gt; will need to be called multiple times.&lt;/p&gt;
&lt;p&gt;The client version of &lt;code&gt;write()&lt;/code&gt; is similar:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_request_queued&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_request_queued&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Set selector to listen for read events, we&amp;#39;re done writing.&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_set_selector_events_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the client initiates a connection to the server and sends a request first, the state variable &lt;code&gt;_request_queued&lt;/code&gt; is checked. If a request hasn&amp;rsquo;t been queued, it calls &lt;code&gt;queue_request()&lt;/code&gt;. &lt;code&gt;queue_request()&lt;/code&gt; creates the request and writes it to the send buffer. It also sets the state variable &lt;code&gt;_request_queued&lt;/code&gt; so it&amp;rsquo;s only called once.&lt;/p&gt;
&lt;p&gt;Just like the server, &lt;code&gt;_write()&lt;/code&gt; calls &lt;code&gt;socket.send()&lt;/code&gt; if there&amp;rsquo;s data in the send buffer.&lt;/p&gt;
&lt;p&gt;The notable difference in the client&amp;rsquo;s version of &lt;code&gt;write()&lt;/code&gt; is the last check to see if the request has been queued. This will be explained more in the section &lt;a href=&quot;#client-main-script&quot;&gt;Client Main Script&lt;/a&gt;, but the reason for this is to tell &lt;code&gt;selector.select()&lt;/code&gt; to stop monitoring the socket for write events. If the request has been queued and the send buffer is empty, then we&amp;rsquo;re done writing and we&amp;rsquo;re only interested in read events. There&amp;rsquo;s no reason to be notified that the socket is writable.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll wrap up this section by leaving you with one thought. The main purpose of this section was to explain that &lt;code&gt;selector.select()&lt;/code&gt; is calling into the &lt;code&gt;Message&lt;/code&gt; class via the method &lt;code&gt;process_events()&lt;/code&gt; and to describe how state is managed.&lt;/p&gt;
&lt;p&gt;This is important because &lt;code&gt;process_events()&lt;/code&gt; will be called many times over the life of the connection. Therefore, make sure that any methods that should only be called once are either checking a state variable themselves, or the state variable set by the method is checked by the caller.&lt;/p&gt;
&lt;h4 id=&quot;server-main-script&quot;&gt;Server Main Script&lt;/h4&gt;
&lt;p&gt;In the server&amp;rsquo;s main script &lt;code&gt;app-server.py&lt;/code&gt;, arguments are read from the command line that specify the interface and port to listen on:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-server.py
&lt;span class=&quot;go&quot;&gt;usage: ./app-server.py &amp;lt;host&amp;gt; &amp;lt;port&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example, to listen on the loopback interface on port &lt;code&gt;65432&lt;/code&gt;, enter:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-server.py &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;listening on (&amp;#39;127.0.0.1&amp;#39;, 65432)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use an empty string for &lt;code&gt;&amp;lt;host&amp;gt;&lt;/code&gt; to listen on all interfaces.&lt;/p&gt;
&lt;p&gt;After creating the socket, a call is made to &lt;code&gt;socket.setsockopt()&lt;/code&gt; with the option &lt;code&gt;socket.SO_REUSEADDR&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Avoid bind() exception: OSError: [Errno 48] Address already in use&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lsock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Setting this socket option avoids the error &lt;code&gt;Address already in use&lt;/code&gt;. You&amp;rsquo;ll see this when starting the server and a previously used TCP socket on the same port has connections in the &lt;a href=&quot;http://www.serverframework.com/asynchronousevents/2011/01/time-wait-and-its-design-implications-for-protocols-and-scalable-servers.html&quot;&gt;TIME_WAIT&lt;/a&gt; state.&lt;/p&gt;
&lt;p&gt;For example, if the server actively closed a connection, it will remain in the &lt;code&gt;TIME_WAIT&lt;/code&gt; state for two minutes or more, depending on the operating system. If you try to start the server again before the &lt;code&gt;TIME_WAIT&lt;/code&gt; state expires, you&amp;rsquo;ll get an &lt;code&gt;OSError&lt;/code&gt; exception of &lt;code&gt;Address already in use&lt;/code&gt;. This is a safeguard to make sure that any delayed packets in the network aren&amp;rsquo;t delivered to the wrong application.&lt;/p&gt;
&lt;p&gt;The event loop catches any errors so the server can stay up and continue to run:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accept_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;main: error: exception for&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{message.addr}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{traceback.format_exc()}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a client connection is accepted, a &lt;code&gt;Message&lt;/code&gt; object is created:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Should be ready to read&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;accepted connection from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setblocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Message&lt;/code&gt; object is associated with the socket in the call to &lt;code&gt;sel.register()&lt;/code&gt; and is initially set to be monitored for read events only. Once the request has been read, we&amp;rsquo;ll modify it to listen for write events only.&lt;/p&gt;
&lt;p&gt;An advantage of taking this approach in the server is that in most cases, when a socket is healthy and there are no network issues, it will always be writable.&lt;/p&gt;
&lt;p&gt;If we told &lt;code&gt;sel.register()&lt;/code&gt; to also monitor &lt;code&gt;EVENT_WRITE&lt;/code&gt;, the event loop would immediately wakeup and notify us that this is the case. However, at this point, there&amp;rsquo;s no reason to wake up and call &lt;code&gt;send()&lt;/code&gt; on the socket. There&amp;rsquo;s no response to send since a request hasn&amp;rsquo;t been processed yet. This would consume and waste valuable CPU cycles.&lt;/p&gt;
&lt;h4 id=&quot;server-message-class&quot;&gt;Server Message Class&lt;/h4&gt;
&lt;p&gt;In the section &lt;a href=&quot;#message-entry-point&quot;&gt;Message Entry Point&lt;/a&gt;, we looked at how the &lt;code&gt;Message&lt;/code&gt; object was called into action when socket events were ready via &lt;code&gt;process_events()&lt;/code&gt;. Now let&amp;rsquo;s look at what happens as data is read on the socket and a component, or piece, of the message is ready to be processed by the server.&lt;/p&gt;
&lt;p&gt;The server&amp;rsquo;s message class is in &lt;code&gt;libserver.py&lt;/code&gt;. You can find the &lt;a href=&quot;https://github.com/realpython/materials/tree/master/python-sockets-tutorial&quot;&gt;source code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The methods appear in the class in the order in which processing takes place for a message.&lt;/p&gt;
&lt;p&gt;When the server has read at least 2 bytes, the fixed-length header can be processed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_protoheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_jsonheader_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;H&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                             &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The fixed-length header is a 2-byte integer in network (big-endian) byte order that contains the length of the JSON header. &lt;a href=&quot;https://docs.python.org/3/library/struct.html&quot;&gt;struct.unpack()&lt;/a&gt; is used to read the value, decode it, and store it in &lt;code&gt;self._jsonheader_len&lt;/code&gt;. After processing the piece of the message it&amp;rsquo;s responsible for, &lt;code&gt;process_protoheader()&lt;/code&gt; removes it from the receive buffer.&lt;/p&gt;
&lt;p&gt;Just like the fixed-length header, when there&amp;rsquo;s enough data in the receive buffer to contain the JSON header, it can be processed as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_jsonheader_len&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                                            &lt;span class=&quot;s1&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqhdr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;byteorder&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;content-length&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&amp;#39;content-encoding&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqhdr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Missing required header &amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{reqhdr}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;quot;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The method &lt;code&gt;self._json_decode()&lt;/code&gt; is called to decode and deserialize the JSON header into a dictionary. Since the JSON header is defined as Unicode with a UTF-8 encoding, &lt;code&gt;utf-8&lt;/code&gt; is hardcoded in the call. The result is saved to &lt;code&gt;self.jsonheader&lt;/code&gt;. After processing the piece of the message it&amp;rsquo;s responsible for, &lt;code&gt;process_jsonheader()&lt;/code&gt; removes it from the receive buffer.&lt;/p&gt;
&lt;p&gt;Next is the actual content, or payload, of the message. It&amp;rsquo;s described by the JSON header in &lt;code&gt;self.jsonheader&lt;/code&gt;. When &lt;code&gt;content-length&lt;/code&gt; bytes are available in the receive buffer, the request can be processed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;content-length&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;content-encoding&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;received request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Binary or unknown content-type&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;received &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{self.jsonheader[&amp;quot;content-type&amp;quot;]}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; request from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Set selector to listen for write events, we&amp;#39;re done reading.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_set_selector_events_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After saving the message content to the &lt;code&gt;data&lt;/code&gt; variable, &lt;code&gt;process_request()&lt;/code&gt; removes it from the receive buffer. Then, if the content type is JSON, it decodes and deserializes it. If it&amp;rsquo;s not, for this example application, it assumes it&amp;rsquo;s a binary request and simply prints the content type.&lt;/p&gt;
&lt;p&gt;The last thing &lt;code&gt;process_request()&lt;/code&gt; does is modify the selector to monitor write events only. In the server&amp;rsquo;s main script, &lt;code&gt;app-server.py&lt;/code&gt;, the socket is initially set to monitor read events only. Now that the request has been fully processed, we&amp;rsquo;re no longer interested in reading.&lt;/p&gt;
&lt;p&gt;A response can now be created and written to the socket. When the socket is writable, &lt;code&gt;create_response()&lt;/code&gt; is called from &lt;code&gt;write()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_response_json_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Binary or unknown content-type&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_response_binary_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A response is created by calling other methods, depending on the content type. In this example application, a simple dictionary lookup is done for JSON requests when &lt;code&gt;action == &#39;search&#39;&lt;/code&gt;. You can define other methods for your own applications that get called here.&lt;/p&gt;
&lt;p&gt;After creating the response message, the state variable &lt;code&gt;self.response_created&lt;/code&gt; is set so &lt;code&gt;write()&lt;/code&gt; doesn&amp;rsquo;t call &lt;code&gt;create_response()&lt;/code&gt; again. Finally, the response is appended to the send buffer. This is seen by and sent via &lt;code&gt;_write()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One tricky bit to figure out was how to close the connection after the response is written. I put the call to &lt;code&gt;close()&lt;/code&gt; in the method &lt;code&gt;_write()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sending&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Should be ready to write&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;BlockingIOError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Resource temporarily unavailable (errno EWOULDBLOCK)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Close when the buffer is drained. The response has been sent.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although it&amp;rsquo;s somewhat &amp;ldquo;hidden,&amp;rdquo; I think it&amp;rsquo;s an acceptable trade-off given that the &lt;code&gt;Message&lt;/code&gt; class only handles one message per connection. After the response is written, there&amp;rsquo;s nothing left for the server to do. It&amp;rsquo;s completed its work.&lt;/p&gt;
&lt;h4 id=&quot;client-main-script&quot;&gt;Client Main Script&lt;/h4&gt;
&lt;p&gt;In the client&amp;rsquo;s main script &lt;code&gt;app-client.py&lt;/code&gt;, arguments are read from the command line and used to create requests and start connections to the server:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-client.py
&lt;span class=&quot;go&quot;&gt;usage: ./app-client.py &amp;lt;host&amp;gt; &amp;lt;port&amp;gt; &amp;lt;action&amp;gt; &amp;lt;value&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-client.py &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt; search needle
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After creating a dictionary representing the request from the command-line arguments, the host, port, and request dictionary are passed to &lt;code&gt;start_connection()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;starting connection to&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setblocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_WRITE&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libclient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A socket is created for the server connection as well as a &lt;code&gt;Message&lt;/code&gt; object using the &lt;code&gt;request&lt;/code&gt; dictionary.&lt;/p&gt;
&lt;p&gt;Like the server, the &lt;code&gt;Message&lt;/code&gt; object is associated with the socket in the call to &lt;code&gt;sel.register()&lt;/code&gt;. However, for the client, the socket is initially set to be monitored for both read and write events. Once the request has been written, we&amp;rsquo;ll modify it to listen for read events only.&lt;/p&gt;
&lt;p&gt;This approach gives us the same advantage as the server: not wasting CPU cycles. After the request has been sent, we&amp;rsquo;re no longer interested in write events, so there&amp;rsquo;s no reason to wake up and process them.&lt;/p&gt;
&lt;h4 id=&quot;client-message-class&quot;&gt;Client Message Class&lt;/h4&gt;
&lt;p&gt;In the section &lt;a href=&quot;#message-entry-point&quot;&gt;Message Entry Point&lt;/a&gt;, we looked at how the message object was called into action when socket events were ready via &lt;code&gt;process_events()&lt;/code&gt;. Now let&amp;rsquo;s look at what happens after data is read and written on the socket and a message is ready to be processed by the client.&lt;/p&gt;
&lt;p&gt;The client&amp;rsquo;s message class is in &lt;code&gt;libclient.py&lt;/code&gt;. You can find the &lt;a href=&quot;https://github.com/realpython/materials/tree/master/python-sockets-tutorial&quot;&gt;source code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The methods appear in the class in the order in which processing takes place for a message.&lt;/p&gt;
&lt;p&gt;The first task for the client is to queue the request:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;queue_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content_encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;encoding&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;content_bytes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;content_encoding&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_encoding&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;content_bytes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;content_encoding&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_encoding&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_send_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_request_queued&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The dictionaries used to create the request, depending on what was passed on the command line, are in the client&amp;rsquo;s main script, &lt;code&gt;app-client.py&lt;/code&gt;. The request dictionary is passed as an argument to the class when a &lt;code&gt;Message&lt;/code&gt; object is created.&lt;/p&gt;
&lt;p&gt;The request message is created and appended to the send buffer, which is then seen by and sent via &lt;code&gt;_write()&lt;/code&gt;. The state variable &lt;code&gt;self._request_queued&lt;/code&gt; is set so &lt;code&gt;queue_request()&lt;/code&gt; isn&amp;rsquo;t called again.&lt;/p&gt;
&lt;p&gt;After the request has been sent, the client waits for a response from the server.&lt;/p&gt;
&lt;p&gt;The methods for reading and processing a message in the client are the same as the server. As response data is read from the socket, the &lt;code&gt;process&lt;/code&gt; header methods are called: &lt;code&gt;process_protoheader()&lt;/code&gt; and &lt;code&gt;process_jsonheader()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The difference is in the naming of the final &lt;code&gt;process&lt;/code&gt; methods and the fact that they&amp;rsquo;re processing a response, not creating one: &lt;code&gt;process_response()&lt;/code&gt;, &lt;code&gt;_process_response_json_content()&lt;/code&gt;, and &lt;code&gt;_process_response_binary_content()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Last, but certainly not least, is the final call for &lt;code&gt;process_response()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Close when response has been processed&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;message-class-wrapup&quot;&gt;Message Class Wrapup&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;ll conclude the &lt;code&gt;Message&lt;/code&gt; class discussion by mentioning a couple of things that are important to notice with a few of the supporting methods.&lt;/p&gt;
&lt;p&gt;Any exceptions raised by the class are caught by the main script in its &lt;code&gt;except&lt;/code&gt; clause:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;main: error: exception for&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{message.addr}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{traceback.format_exc()}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the last line: &lt;code&gt;message.close()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a really important line, for more than one reason! Not only does it make sure that the socket is closed, but &lt;code&gt;message.close()&lt;/code&gt; also removes the socket from being monitored by &lt;code&gt;select()&lt;/code&gt;. This greatly simplifies the code in the class and reduces complexity. If there&amp;rsquo;s an exception or we explicitly raise one ourselves, we know &lt;code&gt;close()&lt;/code&gt; will take care of the cleanup.&lt;/p&gt;
&lt;p&gt;The methods &lt;code&gt;Message._read()&lt;/code&gt; and &lt;code&gt;Message._write()&lt;/code&gt; also contain something interesting:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Should be ready to read&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;BlockingIOError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Resource temporarily unavailable (errno EWOULDBLOCK)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Peer closed.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code&gt;except&lt;/code&gt; line: &lt;code&gt;except BlockingIOError:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_write()&lt;/code&gt; has one too. These lines are important because they catch a temporary error and skip over it using &lt;code&gt;pass&lt;/code&gt;. The temporary error is when the socket would &lt;a href=&quot;#blocking-calls&quot;&gt;block&lt;/a&gt;, for example if it&amp;rsquo;s waiting on the network or the other end of the connection (its peer).&lt;/p&gt;
&lt;p&gt;By catching and skipping over the exception with &lt;code&gt;pass&lt;/code&gt;, &lt;code&gt;select()&lt;/code&gt; will eventually call us again, and we&amp;rsquo;ll get another chance to read or write the data.&lt;/p&gt;
&lt;h3 id=&quot;running-the-application-client-and-server&quot;&gt;Running the Application Client and Server&lt;/h3&gt;
&lt;p&gt;After all of this hard work, let&amp;rsquo;s have some fun and run some searches!&lt;/p&gt;
&lt;p&gt;In these examples, I&amp;rsquo;ll run the server so it listens on all interfaces by passing an empty string for the &lt;code&gt;host&lt;/code&gt; argument. This will allow me to run the client and connect from a virtual machine that&amp;rsquo;s on another network. It emulates a big-endian PowerPC machine.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s start the server:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-server.py &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;listening on (&amp;#39;&amp;#39;, 65432)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let&amp;rsquo;s run the client and enter a search. Let&amp;rsquo;s see if we can find him:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-client.py &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;.0.1.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt; search morpheus
&lt;span class=&quot;go&quot;&gt;starting connection to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;\x00d{&amp;quot;byteorder&amp;quot;: &amp;quot;big&amp;quot;, &amp;quot;content-type&amp;quot;: &amp;quot;text/json&amp;quot;, &amp;quot;content-encoding&amp;quot;: &amp;quot;utf-8&amp;quot;, &amp;quot;content-length&amp;quot;: 41}{&amp;quot;action&amp;quot;: &amp;quot;search&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;morpheus&amp;quot;}&amp;#39; to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received response {&amp;#39;result&amp;#39;: &amp;#39;Follow the white rabbit. 🐰&amp;#39;} from (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;got result: Follow the white rabbit. 🐰&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My terminal is running a shell that&amp;rsquo;s using a text encoding of Unicode (UTF-8), so the output above prints nicely with emojis.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see if we can find the puppies:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-client.py &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;.0.1.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt; search 🐶
&lt;span class=&quot;go&quot;&gt;starting connection to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;\x00d{&amp;quot;byteorder&amp;quot;: &amp;quot;big&amp;quot;, &amp;quot;content-type&amp;quot;: &amp;quot;text/json&amp;quot;, &amp;quot;content-encoding&amp;quot;: &amp;quot;utf-8&amp;quot;, &amp;quot;content-length&amp;quot;: 37}{&amp;quot;action&amp;quot;: &amp;quot;search&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;\xf0\x9f\x90\xb6&amp;quot;}&amp;#39; to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received response {&amp;#39;result&amp;#39;: &amp;#39;🐾 Playing ball! 🏐&amp;#39;} from (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;got result: 🐾 Playing ball! 🏐&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the byte string sent over the network for the request in the &lt;code&gt;sending&lt;/code&gt; line. It&amp;rsquo;s easier to see if you look for the bytes printed in hex that represent the puppy emoji: &lt;code&gt;\xf0\x9f\x90\xb6&lt;/code&gt;. I was able to &lt;a href=&quot;https://support.apple.com/en-us/HT201586&quot;&gt;enter the emoji&lt;/a&gt; for the search since my terminal is using Unicode with the encoding UTF-8.&lt;/p&gt;
&lt;p&gt;This demonstrates that we&amp;rsquo;re sending raw bytes over the network and they need to be decoded by the receiver to be interpreted correctly. This is why we went to all of the trouble to create a header that contains the content type and encoding.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the server output from both client connections above:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;accepted connection from (&amp;#39;10.0.2.2&amp;#39;, 55340)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received request {&amp;#39;action&amp;#39;: &amp;#39;search&amp;#39;, &amp;#39;value&amp;#39;: &amp;#39;morpheus&amp;#39;} from (&amp;#39;10.0.2.2&amp;#39;, 55340)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;\x00g{&amp;quot;byteorder&amp;quot;: &amp;quot;little&amp;quot;, &amp;quot;content-type&amp;quot;: &amp;quot;text/json&amp;quot;, &amp;quot;content-encoding&amp;quot;: &amp;quot;utf-8&amp;quot;, &amp;quot;content-length&amp;quot;: 43}{&amp;quot;result&amp;quot;: &amp;quot;Follow the white rabbit. \xf0\x9f\x90\xb0&amp;quot;}&amp;#39; to (&amp;#39;10.0.2.2&amp;#39;, 55340)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;10.0.2.2&amp;#39;, 55340)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;accepted connection from (&amp;#39;10.0.2.2&amp;#39;, 55338)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received request {&amp;#39;action&amp;#39;: &amp;#39;search&amp;#39;, &amp;#39;value&amp;#39;: &amp;#39;🐶&amp;#39;} from (&amp;#39;10.0.2.2&amp;#39;, 55338)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;\x00g{&amp;quot;byteorder&amp;quot;: &amp;quot;little&amp;quot;, &amp;quot;content-type&amp;quot;: &amp;quot;text/json&amp;quot;, &amp;quot;content-encoding&amp;quot;: &amp;quot;utf-8&amp;quot;, &amp;quot;content-length&amp;quot;: 37}{&amp;quot;result&amp;quot;: &amp;quot;\xf0\x9f\x90\xbe Playing ball! \xf0\x9f\x8f\x90&amp;quot;}&amp;#39; to (&amp;#39;10.0.2.2&amp;#39;, 55338)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;10.0.2.2&amp;#39;, 55338)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Look at the &lt;code&gt;sending&lt;/code&gt; line to see the bytes that were written to the client&amp;rsquo;s socket. This is the server&amp;rsquo;s response message.&lt;/p&gt;
&lt;p&gt;You can also test sending binary requests to the server if the &lt;code&gt;action&lt;/code&gt; argument is anything other than &lt;code&gt;search&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-client.py &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;.0.1.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt; binary 😃
&lt;span class=&quot;go&quot;&gt;starting connection to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;\x00|{&amp;quot;byteorder&amp;quot;: &amp;quot;big&amp;quot;, &amp;quot;content-type&amp;quot;: &amp;quot;binary/custom-client-binary-type&amp;quot;, &amp;quot;content-encoding&amp;quot;: &amp;quot;binary&amp;quot;, &amp;quot;content-length&amp;quot;: 10}binary\xf0\x9f\x98\x83&amp;#39; to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received binary/custom-server-binary-type response from (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;got response: b&amp;#39;First 10 bytes of request: binary\xf0\x9f\x98\x83&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;10.0.1.1&amp;#39;, 65432)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the request&amp;rsquo;s &lt;code&gt;content-type&lt;/code&gt; is not &lt;code&gt;text/json&lt;/code&gt;, the server treats it as a custom binary type and doesn&amp;rsquo;t perform JSON decoding. It simply prints the &lt;code&gt;content-type&lt;/code&gt; and returns the first 10 bytes to the client:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-server.py &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;listening on (&amp;#39;&amp;#39;, 65432)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;accepted connection from (&amp;#39;10.0.2.2&amp;#39;, 55320)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;received binary/custom-client-binary-type request from (&amp;#39;10.0.2.2&amp;#39;, 55320)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sending b&amp;#39;\x00\x7f{&amp;quot;byteorder&amp;quot;: &amp;quot;little&amp;quot;, &amp;quot;content-type&amp;quot;: &amp;quot;binary/custom-server-binary-type&amp;quot;, &amp;quot;content-encoding&amp;quot;: &amp;quot;binary&amp;quot;, &amp;quot;content-length&amp;quot;: 37}First 10 bytes of request: binary\xf0\x9f\x98\x83&amp;#39; to (&amp;#39;10.0.2.2&amp;#39;, 55320)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;closing connection to (&amp;#39;10.0.2.2&amp;#39;, 55320)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Inevitably, something won&amp;rsquo;t work, and you&amp;rsquo;ll be wondering what to do. Don&amp;rsquo;t worry, it happens to all of us. Hopefully, with the help of this tutorial, your debugger, and favorite search engine, you&amp;rsquo;ll be able to get going again with the source code part.&lt;/p&gt;
&lt;p&gt;If not, your first stop should be Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;socket module&lt;/a&gt; documentation. Make sure you read all of the documentation for each function or method you&amp;rsquo;re calling. Also, read through the &lt;a href=&quot;#reference&quot;&gt;Reference&lt;/a&gt; section for ideas. In particular, check the &lt;a href=&quot;#errors&quot;&gt;Errors&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;Sometimes, it&amp;rsquo;s not all about the source code. The source code might be correct, and it&amp;rsquo;s just the other host, the client or server. Or it could be the network, for example, a router, firewall, or some other networking device that&amp;rsquo;s playing man-in-the-middle.&lt;/p&gt;
&lt;p&gt;For these types of issues, additional tools are essential. Below are a few tools and utilities that might help or at least provide some clues.&lt;/p&gt;
&lt;h3 id=&quot;ping&quot;&gt;ping&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ping&lt;/code&gt; will check if a host is alive and connected to the network by sending an &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ICMP&lt;/a&gt; echo request. It communicates directly with the operating system&amp;rsquo;s TCP/IP protocol stack, so it works independently from any application running on the host.&lt;/p&gt;
&lt;p&gt;Below is an example of running ping on macOS:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ping -c &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1
&lt;span class=&quot;go&quot;&gt;PING 127.0.0.1 (127.0.0.1): 56 data bytes&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.058 ms&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.165 ms&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.164 ms&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;--- 127.0.0.1 ping statistics ---&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3 packets transmitted, 3 packets received, 0.0% packet loss&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;round-trip min/avg/max/stddev = 0.058/0.129/0.165/0.050 ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the statistics at the end of the output. This can be helpful when you&amp;rsquo;re trying to discover intermittent connectivity problems. For example, is there any packet loss? How much latency is there (see the round-trip times)?&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s a firewall between you and the other host, a ping&amp;rsquo;s echo request may not be allowed. Some firewall administrators implement policies that enforce this. The idea being that they don&amp;rsquo;t want their hosts to be discoverable. If this is the case and you have firewall rules added to allow the hosts to communicate, make sure that the rules also allow ICMP to pass between them.&lt;/p&gt;
&lt;p&gt;ICMP is the protocol used by &lt;code&gt;ping&lt;/code&gt;, but it&amp;rsquo;s also the protocol TCP and other lower-level protocols use to communicate error messages. If you&amp;rsquo;re experiencing strange behavior or slow connections, this could be the reason.&lt;/p&gt;
&lt;p&gt;ICMP messages are identified by type and code. To give you an idea of the important information they carry, here are a few:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ICMP Type&lt;/th&gt;
&lt;th&gt;ICMP Code&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Echo request&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Echo reply&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Destination network unreachable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Destination host unreachable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Destination protocol unreachable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Destination port unreachable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Fragmentation required, and DF flag set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;TTL expired in transit&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;See the article &lt;a href=&quot;https://en.wikipedia.org/wiki/Path_MTU_Discovery#Problems_with_PMTUD&quot;&gt;Path MTU Discovery&lt;/a&gt; for information regarding fragmentation and ICMP messages. This is an example of something that can cause strange behavior that I mentioned previously.&lt;/p&gt;
&lt;h3 id=&quot;netstat&quot;&gt;netstat&lt;/h3&gt;
&lt;p&gt;In the section &lt;a href=&quot;#viewing-socket-state&quot;&gt;Viewing Socket State&lt;/a&gt;, we looked at how &lt;code&gt;netstat&lt;/code&gt; can be used to display information about sockets and their current state. This utility is available on macOS, Linux, and Windows.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t mention the columns &lt;code&gt;Recv-Q&lt;/code&gt; and &lt;code&gt;Send-Q&lt;/code&gt; in the example output. These columns will show you the number of bytes that are held in network buffers that are queued for transmission or receipt, but for some reason haven&amp;rsquo;t been read or written by the remote or local application.&lt;/p&gt;
&lt;p&gt;In other words, the bytes are waiting in network buffers in the operating system&amp;rsquo;s queues. One reason could be the application is CPU bound or is otherwise unable to call &lt;code&gt;socket.recv()&lt;/code&gt; or &lt;code&gt;socket.send()&lt;/code&gt; and process the bytes. Or there could be network issues affecting communications like congestion or failing network hardware or cabling.&lt;/p&gt;
&lt;p&gt;To demonstrate this and see how much data I could send before seeing an error, I wrote a test client that connects to a test server and repeatedly calls &lt;code&gt;socket.send()&lt;/code&gt;. The test server never calls &lt;code&gt;socket.recv()&lt;/code&gt;. It just accepts the connection. This causes the network buffers on the server to fill, which eventually raises an error on the client.&lt;/p&gt;
&lt;p&gt;First, I started the server:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-server-test.py &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;listening on (&amp;#39;127.0.0.1&amp;#39;, 65432)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I ran the client. Let&amp;rsquo;s see what the error is:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./app-client-test.py &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1 &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt; binary &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;error: socket.send() blocking io exception for (&amp;#39;127.0.0.1&amp;#39;, 65432):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;BlockingIOError(35, &amp;#39;Resource temporarily unavailable&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;netstat&lt;/code&gt; output while the client and server were still running, with the client printing out the error message above multiple times:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; netstat -an &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;m&quot;&gt;65432&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcp4  408300      0  127.0.0.1.65432        127.0.0.1.53225        ESTABLISHED&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcp4       0 269868  127.0.0.1.53225        127.0.0.1.65432        ESTABLISHED&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcp4       0      0  127.0.0.1.65432        *.*                    LISTEN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first entry is the server (&lt;code&gt;Local Address&lt;/code&gt; has port 65432):&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcp4  408300      0  127.0.0.1.65432        127.0.0.1.53225        ESTABLISHED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;code&gt;Recv-Q&lt;/code&gt;: &lt;code&gt;408300&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second entry is the client (&lt;code&gt;Foreign Address&lt;/code&gt; has port 65432):&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcp4       0 269868  127.0.0.1.53225        127.0.0.1.65432        ESTABLISHED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;code&gt;Send-Q&lt;/code&gt;: &lt;code&gt;269868&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The client sure was trying to write bytes, but the server wasn&amp;rsquo;t reading them. This caused the server&amp;rsquo;s network buffer queue to fill on the receive side and the client&amp;rsquo;s network buffer queue to fill on the send side.&lt;/p&gt;
&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;
&lt;p&gt;If you work with Windows, there&amp;rsquo;s a suite of utilities that you should definitely check out if you haven&amp;rsquo;t already: &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/&quot;&gt;Windows Sysinternals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of them is &lt;code&gt;TCPView.exe&lt;/code&gt;. TCPView is a graphical &lt;code&gt;netstat&lt;/code&gt; for Windows. In addition to addresses, port numbers, and socket state, it will show you running totals for the number of packets and bytes, sent and received. Like the Unix utility &lt;code&gt;lsof&lt;/code&gt;, you also get the process name and ID. Check the menus for other display options.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/tcpview.53c115c8b061.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block &quot; src=&quot;https://files.realpython.com/media/tcpview.53c115c8b061.png&quot; width=&quot;1242&quot; height=&quot;588&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/tcpview.53c115c8b061.png&amp;amp;w=310&amp;amp;sig=76fc3e1c9124cf6763ef521bdb0eb946f055b5dc 310w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/tcpview.53c115c8b061.png&amp;amp;w=621&amp;amp;sig=30ade506fa284f8bb303e3619df977da4d5f7b6a 621w, https://files.realpython.com/media/tcpview.53c115c8b061.png 1242w&quot; sizes=&quot;75vw&quot; alt=&quot;TCPView screenshot&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;wireshark&quot;&gt;Wireshark&lt;/h3&gt;
&lt;p&gt;Sometimes you need to see what&amp;rsquo;s happening on the wire. Forget about what the application log says or what the value is that&amp;rsquo;s being returned from a library call. You want to see what&amp;rsquo;s actually being sent or received on the network. Just like debuggers, when you need to see it, there&amp;rsquo;s no substitute.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; is a network protocol analyzer and traffic capture application that runs on macOS, Linux, and Windows, among others. There&amp;rsquo;s a GUI version named &lt;code&gt;wireshark&lt;/code&gt;, and also a terminal, text-based version named &lt;code&gt;tshark&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Running a traffic capture is a great way to watch how an application behaves on the network and gather evidence about what it sends and receives, and how often and how much. You&amp;rsquo;ll also be able to see when a client or server closes or aborts a connection or stops responding. This information can be extremely helpful when you&amp;rsquo;re troubleshooting.&lt;/p&gt;
&lt;p&gt;There are many good tutorials and other resources on the web that will walk you through the basics of using Wireshark and TShark.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of a traffic capture using Wireshark on the loopback interface:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/wireshark.529c058891dc.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block &quot; src=&quot;https://files.realpython.com/media/wireshark.529c058891dc.png&quot; width=&quot;2524&quot; height=&quot;1448&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/wireshark.529c058891dc.png&amp;amp;w=631&amp;amp;sig=7df24ccc930c696fdd27cd4368ff5848921a945f 631w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/wireshark.529c058891dc.png&amp;amp;w=1262&amp;amp;sig=71fedcff136fa6260358f75f8b8981a867c2d0a8 1262w, https://files.realpython.com/media/wireshark.529c058891dc.png 2524w&quot; sizes=&quot;75vw&quot; alt=&quot;Wireshark screenshot&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the same example shown above using &lt;code&gt;tshark&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; tshark -i lo0 &lt;span class=&quot;s1&quot;&gt;&amp;#39;tcp port 65432&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Capturing on &amp;#39;Loopback&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    1   0.000000    127.0.0.1 → 127.0.0.1    TCP 68 53942 → 65432 [SYN] Seq=0 Win=65535 Len=0 MSS=16344 WS=32 TSval=940533635 TSecr=0 SACK_PERM=1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    2   0.000057    127.0.0.1 → 127.0.0.1    TCP 68 65432 → 53942 [SYN, ACK] Seq=0 Ack=1 Win=65535 Len=0 MSS=16344 WS=32 TSval=940533635 TSecr=940533635 SACK_PERM=1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    3   0.000068    127.0.0.1 → 127.0.0.1    TCP 56 53942 → 65432 [ACK] Seq=1 Ack=1 Win=408288 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    4   0.000075    127.0.0.1 → 127.0.0.1    TCP 56 [TCP Window Update] 65432 → 53942 [ACK] Seq=1 Ack=1 Win=408288 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    5   0.000216    127.0.0.1 → 127.0.0.1    TCP 202 53942 → 65432 [PSH, ACK] Seq=1 Ack=1 Win=408288 Len=146 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    6   0.000234    127.0.0.1 → 127.0.0.1    TCP 56 65432 → 53942 [ACK] Seq=1 Ack=147 Win=408128 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    7   0.000627    127.0.0.1 → 127.0.0.1    TCP 204 65432 → 53942 [PSH, ACK] Seq=1 Ack=147 Win=408128 Len=148 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    8   0.000649    127.0.0.1 → 127.0.0.1    TCP 56 53942 → 65432 [ACK] Seq=147 Ack=149 Win=408128 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    9   0.000668    127.0.0.1 → 127.0.0.1    TCP 56 65432 → 53942 [FIN, ACK] Seq=149 Ack=147 Win=408128 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   10   0.000682    127.0.0.1 → 127.0.0.1    TCP 56 53942 → 65432 [ACK] Seq=147 Ack=150 Win=408128 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   11   0.000687    127.0.0.1 → 127.0.0.1    TCP 56 [TCP Dup ACK 6#1] 65432 → 53942 [ACK] Seq=150 Ack=147 Win=408128 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   12   0.000848    127.0.0.1 → 127.0.0.1    TCP 56 53942 → 65432 [FIN, ACK] Seq=147 Ack=150 Win=408128 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   13   0.001004    127.0.0.1 → 127.0.0.1    TCP 56 65432 → 53942 [ACK] Seq=150 Ack=148 Win=408128 Len=0 TSval=940533635 TSecr=940533635&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;^C13 packets captured&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;This section serves as a general reference with additional information and links to external resources.&lt;/p&gt;
&lt;h3 id=&quot;python-documentation&quot;&gt;Python Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;socket module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/howto/sockets.html#socket-howto&quot;&gt;Socket Programming HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;errors&quot;&gt;Errors&lt;/h3&gt;
&lt;p&gt;The following is from Python&amp;rsquo;s &lt;code&gt;socket&lt;/code&gt; module documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;All errors raise exceptions. The normal exceptions for invalid argument types and out-of-memory conditions can be raised; starting from Python 3.3, errors related to socket or address semantics raise &lt;code&gt;OSError&lt;/code&gt; or one of its subclasses.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are some common errors you&amp;rsquo;ll probably encounter when working with sockets:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Exception&lt;/th&gt;
&lt;th&gt;&lt;code&gt;errno&lt;/code&gt; Constant&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BlockingIOError&lt;/td&gt;
&lt;td&gt;EWOULDBLOCK&lt;/td&gt;
&lt;td&gt;Resource temporarily unavailable. For example, in non-blocking mode, when calling &lt;code&gt;send()&lt;/code&gt; and the peer is busy and not reading, the send queue (network buffer) is full. Or there are issues with the network. Hopefully this is a temporary condition.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSError&lt;/td&gt;
&lt;td&gt;EADDRINUSE&lt;/td&gt;
&lt;td&gt;Address already in use. Make sure there&amp;rsquo;s not another process running that&amp;rsquo;s using the same port number and your server is setting the socket option &lt;code&gt;SO_REUSEADDR&lt;/code&gt;: &lt;code&gt;socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConnectionResetError&lt;/td&gt;
&lt;td&gt;ECONNRESET&lt;/td&gt;
&lt;td&gt;Connection reset by peer. The remote process crashed or did not close its socket properly (unclean shutdown). Or there&amp;rsquo;s a firewall or other device in the network path that&amp;rsquo;s missing rules or misbehaving.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TimeoutError&lt;/td&gt;
&lt;td&gt;ETIMEDOUT&lt;/td&gt;
&lt;td&gt;Operation timed out. No response from peer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConnectionRefusedError&lt;/td&gt;
&lt;td&gt;ECONNREFUSED&lt;/td&gt;
&lt;td&gt;Connection refused. No application listening on specified port.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&quot;socket-address-families&quot;&gt;Socket Address Families&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;socket.AF_INET&lt;/code&gt; and &lt;code&gt;socket.AF_INET6&lt;/code&gt; represent the address and protocol families used for the first argument to &lt;code&gt;socket.socket()&lt;/code&gt;. APIs that use an address expect it to be in a certain format, depending on whether the socket was created with &lt;code&gt;socket.AF_INET&lt;/code&gt; or &lt;code&gt;socket.AF_INET6&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Address Family&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Address Tuple&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket.AF_INET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;IPv4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(host, port)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;host&lt;/code&gt; is a string with a hostname like &lt;code&gt;&#39;www.example.com&#39;&lt;/code&gt; or an IPv4 address like &lt;code&gt;&#39;10.1.2.3&#39;&lt;/code&gt;. &lt;code&gt;port&lt;/code&gt; is an integer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket.AF_INET6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;IPv6&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(host, port, flowinfo, scopeid)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;host&lt;/code&gt; is a string with a hostname like &lt;code&gt;&#39;www.example.com&#39;&lt;/code&gt; or an IPv6 address like &lt;code&gt;&#39;fe80::6203:7ab:fe88:9c23&#39;&lt;/code&gt;. &lt;code&gt;port&lt;/code&gt; is an integer. &lt;code&gt;flowinfo&lt;/code&gt; and &lt;code&gt;scopeid&lt;/code&gt; represent the &lt;code&gt;sin6_flowinfo&lt;/code&gt; and &lt;code&gt;sin6_scope_id&lt;/code&gt; members in the C struct &lt;code&gt;sockaddr_in6&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Note the excerpt below from Python&amp;rsquo;s socket module documentation regarding the &lt;code&gt;host&lt;/code&gt; value of the address tuple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;For IPv4 addresses, two special forms are accepted instead of a host address: the empty string represents &lt;code&gt;INADDR_ANY&lt;/code&gt;, and the string &lt;code&gt;&#39;&amp;lt;broadcast&amp;gt;&#39;&lt;/code&gt; represents &lt;code&gt;INADDR_BROADCAST&lt;/code&gt;. This behavior is not compatible with IPv6, therefore, you may want to avoid these if you intend to support IPv6 with your Python programs.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket-families&quot;&gt;Socket families documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used IPv4 sockets in this tutorial, but if your network supports it, try testing and using IPv6 if possible. One way to support this easily is by using the function &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getaddrinfo&quot;&gt;socket.getaddrinfo()&lt;/a&gt;. It translates the &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; arguments into a sequence of 5-tuples that contains all of the necessary arguments for creating a socket connected to that service. &lt;code&gt;socket.getaddrinfo()&lt;/code&gt; will understand and interpret passed-in IPv6 addresses and hostnames that resolve to IPv6 addresses, in addition to IPv4.&lt;/p&gt;
&lt;p&gt;The following example returns address information for a TCP connection to &lt;code&gt;example.org&lt;/code&gt; on port &lt;code&gt;80&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getaddrinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;example.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[(&amp;lt;AddressFamily.AF_INET6: 10&amp;gt;, &amp;lt;SocketType.SOCK_STREAM: 1&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 6, &amp;#39;&amp;#39;, (&amp;#39;2606:2800:220:1:248:1893:25c8:1946&amp;#39;, 80, 0, 0)),&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; (&amp;lt;AddressFamily.AF_INET: 2&amp;gt;, &amp;lt;SocketType.SOCK_STREAM: 1&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 6, &amp;#39;&amp;#39;, (&amp;#39;93.184.216.34&amp;#39;, 80))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Results may differ on your system if IPv6 isn’t enabled. The values returned above can be used by passing them to &lt;code&gt;socket.socket()&lt;/code&gt; and &lt;code&gt;socket.connect()&lt;/code&gt;. There&amp;rsquo;s a client and server example in the &lt;a href=&quot;https://docs.python.org/3/library/socket.html#example&quot;&gt;Example section&lt;/a&gt; of Python&amp;rsquo;s socket module documentation.&lt;/p&gt;
&lt;h3 id=&quot;using-hostnames&quot;&gt;Using Hostnames&lt;/h3&gt;
&lt;p&gt;For context, this section applies mostly to using hostnames with &lt;code&gt;bind()&lt;/code&gt; and &lt;code&gt;connect()&lt;/code&gt;, or &lt;code&gt;connect_ex()&lt;/code&gt;, when you intend to use the loopback interface, &amp;ldquo;localhost.&amp;rdquo; However, it applies any time you&amp;rsquo;re using a hostname and there&amp;rsquo;s an expectation of it resolving to a certain address and having a special meaning to your application that affects its behavior or assumptions. This is in contrast to the typical scenario of a client using a hostname to connect to a server that&amp;rsquo;s resolved by DNS, like www.example.com.&lt;/p&gt;
&lt;p&gt;The following is from Python&amp;rsquo;s &lt;code&gt;socket&lt;/code&gt; module documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;If you use a hostname in the host portion of IPv4/v6 socket address, the program may show a non-deterministic behavior, as Python uses the first address returned from the DNS resolution. The socket address will be resolved differently into an actual IPv4/v6 address, depending on the results from DNS resolution and/or the host configuration. For deterministic behavior use a numeric address in host portion.&amp;rdquo; &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The standard convention for the name &amp;ldquo;&lt;a href=&quot;https://en.wikipedia.org/wiki/Localhost&quot;&gt;localhost&lt;/a&gt;&amp;rdquo; is for it to resolve to &lt;code&gt;127.0.0.1&lt;/code&gt; or &lt;code&gt;::1&lt;/code&gt;, the loopback interface. This will more than likely be the case for you on your system, but maybe not. It depends on how your system is configured for name resolution. As with all things IT, there are always exceptions, and there are no guarantees that using the name &amp;ldquo;localhost&amp;rdquo; will connect to the loopback interface.&lt;/p&gt;
&lt;p&gt;For example, on Linux, see &lt;code&gt;man nsswitch.conf&lt;/code&gt;, the Name Service Switch configuration file. Another place to check on macOS and Linux is the file &lt;code&gt;/etc/hosts&lt;/code&gt;. On Windows, see &lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;. The &lt;code&gt;hosts&lt;/code&gt; file contains a static table of name to address mappings in a simple text format. &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; is another piece of the puzzle altogether.&lt;/p&gt;
&lt;p&gt;Interestingly enough, as of this writing (June 2018), there&amp;rsquo;s an RFC draft &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-dnsop-let-localhost-be-localhost-02&quot;&gt;Let &amp;lsquo;localhost&amp;rsquo; be localhost&lt;/a&gt; that discusses the conventions, assumptions and security around using the name &amp;ldquo;localhost.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s important to understand is that when you use hostnames in your application, the returned address(es) could literally be anything. Don&amp;rsquo;t make assumptions regarding a name if you have a security-sensitive application. Depending on your application and environment, this may or may not be a concern for you.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Security precautions and best practices still apply, even if your application isn&amp;rsquo;t &amp;ldquo;security-sensitive.&amp;rdquo; If your application accesses the network, it should be secured and maintained. This means, at a minimum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;System software updates and security patches are applied regularly, including Python. Are you using any third party libraries? If so, make sure those are checked and updated too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If possible, use a dedicated or host-based firewall to restrict connections to trusted systems only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What DNS servers are configured? Do you trust them and their administrators?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that request data is sanitized and validated as much as possible prior to calling other code that processes it. Use (fuzz) tests for this and run them regularly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Regardless of whether or not you&amp;rsquo;re using hostnames, if your application needs to support secure connections (encryption and authentication), you&amp;rsquo;ll probably want to look into using &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt;. This is its own separate topic and beyond the scope of this tutorial. See Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/ssl.html&quot;&gt;ssl module documentation&lt;/a&gt; to get started. This is the same protocol that your web browser uses to connect securely to web sites.&lt;/p&gt;
&lt;p&gt;With interfaces, IP addresses, and name resolution to consider, there are many variables. What should you do? Here are some recommendations that you can use if you don&amp;rsquo;t have a network application review process:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Application&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Recommendation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;loopback interface&lt;/td&gt;
&lt;td&gt;Use an IP address, for example, &lt;code&gt;127.0.0.1&lt;/code&gt; or &lt;code&gt;::1&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;ethernet interface&lt;/td&gt;
&lt;td&gt;Use an IP address, for example, &lt;code&gt;10.1.2.3&lt;/code&gt;. To support more than one interface, use an empty string for all interfaces/addresses. See the security note above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;loopback interface&lt;/td&gt;
&lt;td&gt;Use an IP address, for example, &lt;code&gt;127.0.0.1&lt;/code&gt; or &lt;code&gt;::1&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;ethernet interface&lt;/td&gt;
&lt;td&gt;Use an IP address for consistency and non-reliance on name resolution. For the typical case, use a hostname. See the security note above.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;For clients or servers, if you need to authenticate the host you&amp;rsquo;re connecting to, look into using TLS.&lt;/p&gt;
&lt;h3 id=&quot;blocking-calls&quot;&gt;Blocking Calls&lt;/h3&gt;
&lt;p&gt;A socket function or method that temporarily suspends your application is a blocking call. For example, &lt;code&gt;accept()&lt;/code&gt;, &lt;code&gt;connect()&lt;/code&gt;, &lt;code&gt;send()&lt;/code&gt;, and &lt;code&gt;recv()&lt;/code&gt; &amp;ldquo;block.&amp;rdquo; They don&amp;rsquo;t return immediately. Blocking calls have to wait on system calls (I/O) to complete before they can return a value. So you, the caller, are blocked until they&amp;rsquo;re done or a timeout or other error occurs.&lt;/p&gt;
&lt;p&gt;Blocking socket calls can be set to non-blocking mode so they return immediately. If you do this, you&amp;rsquo;ll need to at least refactor or redesign your application to handle the socket operation when it&amp;rsquo;s ready.&lt;/p&gt;
&lt;p&gt;Since the call returns immediately, data may not be ready. The callee is waiting on the network and hasn&amp;rsquo;t had time to complete its work. If this is the case, the current status is the &lt;code&gt;errno&lt;/code&gt; value &lt;code&gt;socket.EWOULDBLOCK&lt;/code&gt;. Non-blocking mode is supported with &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.socket.setblocking&quot;&gt;setblocking()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, sockets are always created in blocking mode. See &lt;a href=&quot;https://docs.python.org/3/library/socket.html#notes-on-socket-timeouts&quot;&gt;Notes on socket timeouts&lt;/a&gt; for a description of the three modes.&lt;/p&gt;
&lt;h3 id=&quot;closing-connections&quot;&gt;Closing Connections&lt;/h3&gt;
&lt;p&gt;An interesting thing to note with TCP is it&amp;rsquo;s completely legal for the client or server to close their side of the connection while the other side remains open. This is referred to as a &amp;ldquo;half-open&amp;rdquo; connection. It&amp;rsquo;s the application&amp;rsquo;s decision whether or not this is desirable. In general, it&amp;rsquo;s not. In this state, the side that&amp;rsquo;s closed their end of the connection can no longer send data. They can only receive it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not advocating that you take this approach, but as an example, HTTP uses a header named &amp;ldquo;Connection&amp;rdquo; that&amp;rsquo;s used to standardize how applications should close or persist open connections. For details, see &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-6.3&quot;&gt;section 6.3 in RFC 7230, Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When designing and writing your application and its application-layer protocol, it&amp;rsquo;s a good idea to go ahead and work out how you expect connections to be closed. Sometimes this is obvious and simple, or it&amp;rsquo;s something that can take some initial prototyping and testing. It depends on the application and how the message loop is processed with its expected data. Just make sure that sockets are always closed in a timely manner after they complete their work.&lt;/p&gt;
&lt;h3 id=&quot;byte-endianness&quot;&gt;Byte Endianness&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;Wikipedia&amp;rsquo;s article on endianness&lt;/a&gt; for details on how different CPUs store byte orderings in memory. When interpreting individual bytes, this isn&amp;rsquo;t a problem. However, when handling multiple bytes that are read and processed as a single value, for example a 4-byte integer, the byte order needs to be reversed if you&amp;rsquo;re communicating with a machine that uses a different endianness.&lt;/p&gt;
&lt;p&gt;Byte order is also important for text strings that are represented as multi-byte sequences, like Unicode. Unless you&amp;rsquo;re always using &amp;ldquo;true,&amp;rdquo; strict &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; and control the client and server implementations, you&amp;rsquo;re probably better off using Unicode with an encoding like UTF-8 or one that supports a &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;byte order mark (BOM)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to explicitly define the encoding used in your application-layer protocol. You can do this by mandating that all text is UTF-8 or using a &amp;ldquo;content-encoding&amp;rdquo; header that specifies the encoding. This prevents your application from having to detect the encoding, which you should avoid if possible.&lt;/p&gt;
&lt;p&gt;This becomes problematic when there is data involved that&amp;rsquo;s stored in files or a database and there&amp;rsquo;s no metadata available that specifies its encoding. When the data is transferred to another endpoint, it will have to try to detect the encoding. For a discussion, see &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt;Wikipedia&amp;rsquo;s Unicode article&lt;/a&gt; that references &lt;a href=&quot;https://tools.ietf.org/html/rfc3629#page-6&quot;&gt;RFC 3629: UTF-8, a transformation format of ISO 10646&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;However RFC 3629, the UTF-8 standard, recommends that byte order marks be forbidden in protocols using UTF-8, but discusses the cases where this may not be possible. In addition, the large restriction on possible patterns in UTF-8 (for instance there cannot be any lone bytes with the high bit set) means that it should be possible to distinguish UTF-8 from other character encodings without relying on the BOM.&amp;rdquo; &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The takeaway from this is to always store the encoding used for data that&amp;rsquo;s handled by your application if it can vary. In other words, try to somehow store the encoding as metadata if it&amp;rsquo;s not always UTF-8 or some other encoding with a BOM. Then you can send that encoding in a header along with the data to tell the receiver what it is.&lt;/p&gt;
&lt;p&gt;The byte ordering used in TCP/IP is &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness#Big&quot;&gt;big-endian&lt;/a&gt; and is referred to as network order. Network order is used to represent integers in lower layers of the protocol stack, like IP addresses and port numbers. Python&amp;rsquo;s socket module includes functions that convert integers to and from network and host byte order:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket.ntohl(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Convert 32-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket.ntohs(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Convert 16-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket.htonl(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Convert 32-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket.htons(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Convert 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;You can also use the &lt;a href=&quot;https://docs.python.org/3/library/struct.html&quot;&gt;struct module&lt;/a&gt; to pack and unpack binary data using format strings:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;network_byteorder_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;H&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;python_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;H&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network_byteorder_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We covered a lot of ground in this tutorial. Networking and sockets are large subjects. If you&amp;rsquo;re new to networking or sockets, don&amp;rsquo;t be discouraged by all of the terms and acronyms.&lt;/p&gt;
&lt;p&gt;There are a lot of pieces to become familiar with in order to understand how everything works together. However, just like Python, it will start to make more sense as you get to know the individual pieces and spend more time with them.&lt;/p&gt;
&lt;p&gt;We looked at the low-level socket API in Python&amp;rsquo;s &lt;code&gt;socket&lt;/code&gt; module and saw how it can be used to create client-server applications. We also created our own custom class and used it as an application-layer protocol to exchange messages and data between endpoints. You can use this class and build upon it to learn and help make creating your own socket applications easier and faster.&lt;/p&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/realpython/materials/tree/master/python-sockets-tutorial&quot;&gt;source code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations on making it to the end! You are now well on your way to using sockets in your own applications.&lt;/p&gt;
&lt;p&gt;I hope this tutorial has given you the information, examples, and inspiration needed to start you on your sockets development journey.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Python Code Quality: Tools &amp; Best Practices</title>
      <id>https://realpython.com/python-code-quality/</id>
      <link href="https://realpython.com/python-code-quality/"/>
      <updated>2018-07-30T14:00:00+00:00</updated>
      <summary>In this article, you&#39;ll see how to improve the quality of your Python code. We&#39;ll analyze and compare tools you can use to take your code to the next level and make it more Pythonic. Whether you&#39;ve been using Python for a while, or just beginning, you can benefit from the practices and tools talked about here.</summary>
      <content type="html">
        &lt;p&gt;In this article, we&amp;rsquo;ll identify high-quality Python code and show you how to improve the quality of your own code.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll analyze and compare tools you can use to take your code to the next level. Whether you&amp;rsquo;ve been using Python for a while, or just beginning, you can benefit from the practices and tools talked about here.&lt;/p&gt;
&lt;h2 id=&quot;what-is-code-quality&quot;&gt;What is Code Quality?&lt;/h2&gt;
&lt;p&gt;Of course you want quality code, who wouldn&amp;rsquo;t? But to improve code quality, we have to define what it is.&lt;/p&gt;
&lt;p&gt;A quick Google search yields many results defining code quality. As it turns out, the term can mean many different things to people.&lt;/p&gt;
&lt;p&gt;One way of trying to define code quality is to look at one end of the spectrum: high-quality code. Hopefully, you can agree on the following high-quality code identifiers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It does what it is supposed to do.&lt;/li&gt;
&lt;li&gt;It does not contain defects or problems.&lt;/li&gt;
&lt;li&gt;It is easy to read, maintain, and extend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three identifiers, while simplistic, seem to be generally agreed upon. In an effort to expand these ideas further, let&amp;rsquo;s delve into why each one matters in the realm of software.&lt;/p&gt;
&lt;h2 id=&quot;why-does-code-quality-matter&quot;&gt;Why Does Code Quality Matter?&lt;/h2&gt;
&lt;p&gt;To determine why high-quality code is important, let&amp;rsquo;s revisit those identifiers. We&amp;rsquo;ll see what happens when code doesn&amp;rsquo;t meet them.&lt;/p&gt;
&lt;h3 id=&quot;it-does-not-do-what-it-is-supposed-to-do&quot;&gt;It does &lt;strong&gt;not&lt;/strong&gt; do what it is supposed to do&lt;/h3&gt;
&lt;p&gt;Meeting requirements is the basis of any product, software or otherwise. We make software to do something. If in the end, it doesn&amp;rsquo;t do it&amp;hellip; well it&amp;rsquo;s definitely not high quality. If it doesn&amp;rsquo;t meet basic requirements, it&amp;rsquo;s hard to even call it low quality.&lt;/p&gt;
&lt;h3 id=&quot;it-does-contain-defects-and-problems&quot;&gt;It &lt;strong&gt;does&lt;/strong&gt; contain defects and problems&lt;/h3&gt;
&lt;p&gt;If something you&amp;rsquo;re using has issues or causes you problems, you probably wouldn&amp;rsquo;t call it high-quality. In fact, if it&amp;rsquo;s bad enough, you may stop using it altogether.&lt;/p&gt;
&lt;p&gt;For the sake of not using software as an example, let&amp;rsquo;s say your vacuum works great on regular carpet. It cleans up all the dust and cat hair. One fateful night the cat knocks over a plant, spilling dirt everywhere. When you try to use the vacuum to clean the pile of dirt, it breaks, spewing the dirt everywhere.&lt;/p&gt;
&lt;p&gt;While the vacuum worked under some circumstances, it didn&amp;rsquo;t efficiently handle the occasional extra load. Thus, you wouldn&amp;rsquo;t call it a high-quality vacuum cleaner.&lt;/p&gt;
&lt;p&gt;That is a problem we want to avoid in our code. If things break on edge cases and defects cause unwanted behavior, we don&amp;rsquo;t have a high-quality product.&lt;/p&gt;
&lt;h3 id=&quot;it-is-difficult-to-read-maintain-or-extend&quot;&gt;It is &lt;strong&gt;difficult&lt;/strong&gt; to read, maintain, or extend&lt;/h3&gt;
&lt;p&gt;Imagine this: a customer requests a new feature. The person who wrote the original code is gone. The person who has replaced them now has to make sense of the code that&amp;rsquo;s already there. That person is you.&lt;/p&gt;
&lt;p&gt;If the code is easy to comprehend, you&amp;rsquo;ll be able to analyze the problem and come up with a solution much quicker. If the code is complex and convoluted, you&amp;rsquo;ll probably take longer and possibly make some wrong assumptions.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also nice if it&amp;rsquo;s easy to add the new feature without disrupting previous features. If the code is &lt;em&gt;not&lt;/em&gt; easy to extend, your new feature could break other things.&lt;/p&gt;
&lt;p&gt;No one &lt;em&gt;wants&lt;/em&gt; to be in the position where they have to read, maintain, or extend low-quality code. It means more headaches and more work for everyone.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s bad enough that you have to deal with low-quality code, but don&amp;rsquo;t put someone else in the same situation. You can improve the quality of code that you write.&lt;/p&gt;
&lt;p&gt;If you work with a team of developers, you can start putting into place methods to ensure better overall code quality. Assuming that you have their support, of course. You may have to win some people over (feel free to send them this article 😃).&lt;/p&gt;
&lt;h2 id=&quot;how-to-improve-python-code-quality&quot;&gt;How to Improve Python Code Quality&lt;/h2&gt;
&lt;p&gt;There are a few things to consider on our journey for high-quality code. First, this journey is not one of pure objectivity. There are some strong feelings of what high-quality code looks like.&lt;/p&gt;
&lt;p&gt;While everyone can hopefully agree on the identifiers mentioned above, the way they get achieved is a subjective road. The most opinionated topics usually come up when you talk about achieving readability, maintenance, and extensibility.&lt;/p&gt;
&lt;p&gt;So keep in mind that while this article will try to stay objective throughout, there is a very-opinionated world out there when it comes to code.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s start with the most opinionated topic: code style.&lt;/p&gt;
&lt;h3 id=&quot;style-guides&quot;&gt;Style Guides&lt;/h3&gt;
&lt;p&gt;Ah, yes. The age-old question: &lt;a href=&quot;https://blog.codinghorror.com/death-to-the-space-infidels/&quot;&gt;spaces or tabs&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Regardless of your personal view on how to represent whitespace, it&amp;rsquo;s safe to assume that you at least want consistency in code.&lt;/p&gt;
&lt;p&gt;A style guide serves the purpose of defining a consistent way to write your code. Typically this is all cosmetic, meaning it doesn&amp;rsquo;t change the logical outcome of the code. Although, some stylistic choices do avoid common logical mistakes.&lt;/p&gt;
&lt;p&gt;Style guides serve to help facilitate the goal of making code easy to read, maintain, and extend.&lt;/p&gt;
&lt;p&gt;As far as Python goes, there is a well-accepted standard. It was written, in part, by the author of the Python programming language itself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pep8.org/&quot;&gt;PEP 8&lt;/a&gt; provides coding conventions for Python code. It is fairly common for Python code to follow this style guide. It&amp;rsquo;s a great place to start since it&amp;rsquo;s already well-defined.&lt;/p&gt;
&lt;p&gt;A sister Python Enhancement Proposal, &lt;a href=&quot;https://www.python.org/dev/peps/pep-0257/&quot;&gt;PEP 257&lt;/a&gt; describes conventions for Python&amp;rsquo;s docstrings, which are strings intended to document modules, classes, functions, and methods. As an added bonus, if docstrings are consistent, there are tools capable of generating documentation directly from the code.&lt;/p&gt;
&lt;p&gt;All these guides do is &lt;em&gt;define&lt;/em&gt; a way to style code. But how do you enforce it? And what about defects and problems in the code, how can you detect those? That&amp;rsquo;s where linters come in.&lt;/p&gt;
&lt;h3 id=&quot;linters&quot;&gt;Linters&lt;/h3&gt;
&lt;h4 id=&quot;what-is-a-linter&quot;&gt;What is a Linter?&lt;/h4&gt;
&lt;p&gt;First, let&amp;rsquo;s talk about lint. Those tiny, annoying little defects that somehow get all over your clothes. Clothes look and feel much better without all that lint. Your code is no different. Little mistakes, stylistic inconsistencies, and dangerous logic don&amp;rsquo;t make your code feel great.&lt;/p&gt;
&lt;p&gt;But we all make mistakes. You can&amp;rsquo;t expect yourself to always catch them in time. Mistyped variable names, forgetting a closing bracket, incorrect tabbing in Python, calling a function with the wrong number of arguments, the list goes on and on. Linters help to identify those problem areas.&lt;/p&gt;
&lt;p&gt;Additionally, &lt;a href=&quot;https://realpython.com/python-ides-code-editors-guide/&quot;&gt;most editors and IDE&amp;rsquo;s&lt;/a&gt; have the ability to run linters in the background as you type. This results in an environment capable of highlighting, underlining, or otherwise identifying problem areas in the code before you run it. It is like an advanced spell-check for code. It underlines issues in squiggly red lines much like your favorite word processor does.&lt;/p&gt;
&lt;p&gt;Linters analyze code to detect various categories of lint. Those categories can be broadly defined as the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logical Lint&lt;ul&gt;
&lt;li&gt;Code errors&lt;/li&gt;
&lt;li&gt;Code with potentially unintended results&lt;/li&gt;
&lt;li&gt;Dangerous code patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stylistic Lint&lt;ul&gt;
&lt;li&gt;Code not conforming to defined conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are also code analysis tools that provide other insights into your code. While maybe not linters by definition, these tools are usually used side-by-side with linters. They too hope to improve the quality of the code.&lt;/p&gt;
&lt;p&gt;Finally, there are tools that automatically format code to some specification. These automated tools ensure that our inferior human minds don&amp;rsquo;t mess up conventions.&lt;/p&gt;
&lt;h4 id=&quot;what-are-my-linter-options-for-python&quot;&gt;What Are My Linter Options For Python?&lt;/h4&gt;
&lt;p&gt;Before delving into your options, it&amp;rsquo;s important to recognize that some &amp;ldquo;linters&amp;rdquo; are just multiple linters packaged nicely together. Some popular examples of those combo-linters are the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flake8&lt;/strong&gt;: Capable of detecting both logical and stylistic lint. It adds the style and complexity checks of pycodestyle to the logical lint detection of PyFlakes. It combines the following linters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyFlakes&lt;/li&gt;
&lt;li&gt;pycodestyle (formerly pep8)&lt;/li&gt;
&lt;li&gt;Mccabe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pylama&lt;/strong&gt;: A code audit tool composed of a large number of linters and other tools for analyzing code. It combines the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pycodestyle (formerly pep8)&lt;/li&gt;
&lt;li&gt;pydocstyle (formerly pep257)&lt;/li&gt;
&lt;li&gt;PyFlakes&lt;/li&gt;
&lt;li&gt;Mccabe&lt;/li&gt;
&lt;li&gt;Pylint&lt;/li&gt;
&lt;li&gt;Radon&lt;/li&gt;
&lt;li&gt;gjslint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some stand-alone linters categorized with brief descriptions:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Linter&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.pylint.org/&quot;&gt;Pylint&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Logical &amp;amp; Stylistic&lt;/td&gt;
&lt;td&gt;Checks for errors, tries to enforce a coding standard, looks for code smells&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/pyflakes&quot;&gt;PyFlakes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Logical&lt;/td&gt;
&lt;td&gt;Analyzes programs and detects various errors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/pycodestyle&quot;&gt;pycodestyle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stylistic&lt;/td&gt;
&lt;td&gt;Checks against some of the style conventions in PEP 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/pydocstyle&quot;&gt;pydocstyle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stylistic&lt;/td&gt;
&lt;td&gt;Checks compliance with Python docstring conventions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/bandit&quot;&gt;Bandit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Logical&lt;/td&gt;
&lt;td&gt;Analyzes code to find common security issues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://mypy-lang.org/&quot;&gt;MyPy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Logical&lt;/td&gt;
&lt;td&gt;Checks for optionally-enforced static types&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;And here are some code analysis and formatting tools:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/mccabe&quot;&gt;Mccabe&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Analytical&lt;/td&gt;
&lt;td&gt;Checks &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;McCabe complexity&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://radon.readthedocs.io/en/latest/&quot;&gt;Radon&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Analytical&lt;/td&gt;
&lt;td&gt;Analyzes code for various metrics (lines of code, complexity, and so on)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ambv/black&quot;&gt;Black&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Formatter&lt;/td&gt;
&lt;td&gt;Formats Python code without compromise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/timothycrosley/isort&quot;&gt;Isort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Formatter&lt;/td&gt;
&lt;td&gt;Formats imports by sorting alphabetically and separating into sections&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&quot;comparing-python-linters&quot;&gt;Comparing Python Linters&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s get a better idea of what different linters are capable of catching and what the output looks like. To do this, I ran the same code through a handful of different linters with the default settings.&lt;/p&gt;
&lt;p&gt;The code I ran through the linters is below. It contains various logical and stylistic issues:&lt;/p&gt;
&lt;div class=&quot;card mb-3&quot; id=&quot;collapse_card0d53a8&quot;&gt;
&lt;div class=&quot;card-header border-0&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse0d53a8&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse0d53a8&quot;&gt;Python Code With Lint&lt;/button&gt; &lt;button class=&quot;btn btn-link float-right&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse0d53a8&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse0d53a8&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;collapse0d53a8&quot; class=&quot;collapse&quot; data-parent=&quot;#collapse_card0d53a8&quot;&gt;&lt;div class=&quot;card-body&quot; markdown=&quot;1&quot;&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;code_with_lint.py&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;Example Code with lots of lint!&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_global_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GLOBAL VAR NAMES SHOULD BE IN ALL_CAPS_WITH_UNDERSCOES&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14 &lt;/span&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    This returns the result of a multiplation of the inputs&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17 &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;some_global_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;this is actually a local variable...&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18 &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21 &lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jackpot!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_sum_lucky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24 &lt;/span&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This returns a string describing whether or not the sum of input is lucky&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    This function first makes sure the inputs are valid and then calculates the&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    sum. Then, it will determine a message to return based on whether or not&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    that sum should be considered &amp;quot;lucky&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31 &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32 &lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33 &lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a lucky number!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34 &lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35 &lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;an unlucky number!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37 &lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;just a normal number&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;some_other_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42 &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_other_arg&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;some_other_arg&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43 &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;list_comprehension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;45 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;46 &lt;/span&gt;        &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;date_and_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;48 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;The comparison below shows the linters I used and their runtime for analyzing the above file. I should point out that these aren&amp;rsquo;t all entirely comparable as they serve different purposes. PyFlakes, for example, does not identify stylistic errors like Pylint does.&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Linter&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.pylint.org/&quot;&gt;Pylint&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;pylint code_with_lint.py&lt;/td&gt;
&lt;td&gt;1.16s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/pyflakes&quot;&gt;PyFlakes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;pyflakes code_with_lint.py&lt;/td&gt;
&lt;td&gt;0.15s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/pycodestyle&quot;&gt;pycodestyle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;pycodestyle code_with_lint.py&lt;/td&gt;
&lt;td&gt;0.14s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/PyCQA/pydocstyle&quot;&gt;pydocstyle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;pydocstyle code_with_lint.py&lt;/td&gt;
&lt;td&gt;0.21s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;For the outputs of each, see the sections below.&lt;/p&gt;
&lt;h5 id=&quot;pylint&quot;&gt;Pylint&lt;/h5&gt;
&lt;p&gt;Pylint is one of the oldest linters (circa 2006) and is still well-maintained. Some might call this software battle-hardened. It&amp;rsquo;s been around long enough that contributors have fixed most major bugs and the core features are well-developed.&lt;/p&gt;
&lt;p&gt;The common complaints against Pylint are that it is slow, too verbose by default, and takes a lot of configuration to get it working the way you want. Slowness aside, the other complaints are somewhat of a double-edged sword. Verbosity can be because of thoroughness. Lots of configuration can mean lots of adaptability to your preferences.&lt;/p&gt;
&lt;p&gt;Without further ado, the output after running Pylint against the lint-filled code from above:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;No config file found, using default configuration
************* Module code_with_lint
W: 23, 0: Unnecessary semicolon (unnecessary-semicolon)
C: 27, 0: Unnecessary parens after &amp;#39;return&amp;#39; keyword (superfluous-parens)
C: 27, 0: No space allowed after bracket
                return( &amp;#39;an unlucky number!&amp;#39;)
                      ^ (bad-whitespace)
C: 29, 0: Unnecessary parens after &amp;#39;return&amp;#39; keyword (superfluous-parens)
C: 33, 0: Exactly one space required after comma
    def __init__(self, some_arg,  some_other_arg, verbose = False):
                               ^ (bad-whitespace)
C: 33, 0: No space allowed around keyword argument assignment
    def __init__(self, some_arg,  some_other_arg, verbose = False):
                                                          ^ (bad-whitespace)
C: 34, 0: Exactly one space required around assignment
        self.some_other_arg  =  some_other_arg
                             ^ (bad-whitespace)
C: 35, 0: Exactly one space required around assignment
        self.some_arg        =  some_arg
                             ^ (bad-whitespace)
C: 40, 0: Final newline missing (missing-final-newline)
W:  6, 0: Redefining built-in &amp;#39;pow&amp;#39; (redefined-builtin)
W:  6, 0: Wildcard import math (wildcard-import)
C: 11, 0: Constant name &amp;quot;some_global_var&amp;quot; doesn&amp;#39;t conform to UPPER_CASE naming style (invalid-name)
C: 13, 0: Argument name &amp;quot;x&amp;quot; doesn&amp;#39;t conform to snake_case naming style (invalid-name)
C: 13, 0: Argument name &amp;quot;y&amp;quot; doesn&amp;#39;t conform to snake_case naming style (invalid-name)
C: 13, 0: Missing function docstring (missing-docstring)
W: 14, 4: Redefining name &amp;#39;some_global_var&amp;#39; from outer scope (line 11) (redefined-outer-name)
W: 17, 4: Unreachable code (unreachable)
W: 14, 4: Unused variable &amp;#39;some_global_var&amp;#39; (unused-variable)
...
R: 24,12: Unnecessary &amp;quot;else&amp;quot; after &amp;quot;return&amp;quot; (no-else-return)
R: 20, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 31, 0: Missing class docstring (missing-docstring)
W: 37, 8: Redefining name &amp;#39;time&amp;#39; from outer scope (line 9) (redefined-outer-name)
E: 37,15: Using variable &amp;#39;time&amp;#39; before assignment (used-before-assignment)
W: 33,50: Unused argument &amp;#39;verbose&amp;#39; (unused-argument)
W: 36, 8: Unused variable &amp;#39;list_comprehension&amp;#39; (unused-variable)
W: 39, 8: Unused variable &amp;#39;date_and_time&amp;#39; (unused-variable)
R: 31, 0: Too few public methods (0/2) (too-few-public-methods)
W:  5, 0: Unused import io (unused-import)
W:  6, 0: Unused import acos from wildcard import (unused-wildcard-import)
...
W:  9, 0: Unused time imported from time (unused-import)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that I&amp;rsquo;ve condensed this with ellipses for similar lines. It&amp;rsquo;s quite a bit to take in, but there &lt;em&gt;is&lt;/em&gt; a lot of lint in this code.&lt;/p&gt;
&lt;p&gt;Note that Pylint prefixes each of the problem areas with a &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, or &lt;code&gt;F&lt;/code&gt;, meaning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[R]efactor for a &amp;ldquo;good practice&amp;rdquo; metric violation&lt;/li&gt;
&lt;li&gt;[C]onvention for coding standard violation&lt;/li&gt;
&lt;li&gt;[W]arning for stylistic problems, or minor programming issues&lt;/li&gt;
&lt;li&gt;[E]rror for important programming issues (i.e. most probably bug)&lt;/li&gt;
&lt;li&gt;[F]atal for errors which prevented further processing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above list is directly from Pylint&amp;rsquo;s &lt;a href=&quot;http://pylint.pycqa.org/en/latest/user_guide/output.html&quot;&gt;user guide&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;pyflakes&quot;&gt;PyFlakes&lt;/h5&gt;
&lt;p&gt;Pyflakes &amp;ldquo;makes a simple promise: it will never complain about style, and it will try very, very hard to never emit false positives&amp;rdquo;. This means that Pyflakes won&amp;rsquo;t tell you about missing docstrings or argument names not conforming to a naming style. It focuses on logical code issues and potential errors.&lt;/p&gt;
&lt;p&gt;The benefit here is speed. PyFlakes runs in a fraction of the time Pylint takes.&lt;/p&gt;
&lt;p&gt;Output after running against lint-filled code from above:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;code_with_lint.py:5: &amp;#39;io&amp;#39; imported but unused
code_with_lint.py:6: &amp;#39;from math import *&amp;#39; used; unable to detect undefined names
code_with_lint.py:14: local variable &amp;#39;some_global_var&amp;#39; is assigned to but never used
code_with_lint.py:36: &amp;#39;pi&amp;#39; may be undefined, or defined from star imports: math
code_with_lint.py:36: local variable &amp;#39;list_comprehension&amp;#39; is assigned to but never used
code_with_lint.py:37: local variable &amp;#39;time&amp;#39; (defined in enclosing scope on line 9) referenced before assignment
code_with_lint.py:37: local variable &amp;#39;time&amp;#39; is assigned to but never used
code_with_lint.py:39: local variable &amp;#39;date_and_time&amp;#39; is assigned to but never used
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The downside here is that parsing this output may be a bit more difficult. The various issues and errors are not labeled or organized by type. Depending on how you use this, that may not be a problem at all.&lt;/p&gt;
&lt;h5 id=&quot;pycodestyle-formerly-pep8&quot;&gt;pycodestyle (formerly pep8)&lt;/h5&gt;
&lt;p&gt;Used to check &lt;em&gt;some&lt;/em&gt; style conventions from &lt;a href=&quot;http://pep8.org/&quot;&gt;PEP8&lt;/a&gt;. Naming conventions are not checked and neither are docstrings. The errors and warnings it does catch are categorized in &lt;a href=&quot;https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes&quot;&gt;this table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Output after running against lint-filled code from above:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;code_with_lint.py:13:1: E302 expected 2 blank lines, found 1
code_with_lint.py:15:15: E225 missing whitespace around operator
code_with_lint.py:20:1: E302 expected 2 blank lines, found 1
code_with_lint.py:21:10: E711 comparison to None should be &amp;#39;if cond is not None:&amp;#39;
code_with_lint.py:23:25: E703 statement ends with a semicolon
code_with_lint.py:27:24: E201 whitespace after &amp;#39;(&amp;#39;
code_with_lint.py:31:1: E302 expected 2 blank lines, found 1
code_with_lint.py:33:58: E251 unexpected spaces around keyword / parameter equals
code_with_lint.py:33:60: E251 unexpected spaces around keyword / parameter equals
code_with_lint.py:34:28: E221 multiple spaces before operator
code_with_lint.py:34:31: E222 multiple spaces after operator
code_with_lint.py:35:22: E221 multiple spaces before operator
code_with_lint.py:35:31: E222 multiple spaces after operator
code_with_lint.py:36:80: E501 line too long (83 &amp;gt; 79 characters)
code_with_lint.py:40:15: W292 no newline at end of file
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The nice thing about this output is that the lint is labeled by category. You can choose to ignore certain errors if you don&amp;rsquo;t care to adhere to a specific convention as well.&lt;/p&gt;
&lt;h5 id=&quot;pydocstyle-formerly-pep257&quot;&gt;pydocstyle (formerly pep257)&lt;/h5&gt;
&lt;p&gt;Very similar to pycodestyle, except instead of checking against PEP8 code style conventions, it checks docstrings against conventions from &lt;a href=&quot;https://www.python.org/dev/peps/pep-0257/&quot;&gt;PEP257&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Output after running against lint-filled code from above:&lt;/p&gt;
&lt;div class=&quot;highlight text&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;code_with_lint.py:1 at module level:
        D200: One-line docstring should fit on one line with quotes (found 3)
code_with_lint.py:1 at module level:
        D400: First line should end with a period (not &amp;#39;!&amp;#39;)
code_with_lint.py:13 in public function `multiply`:
        D103: Missing docstring in public function
code_with_lint.py:20 in public function `is_sum_lucky`:
        D103: Missing docstring in public function
code_with_lint.py:31 in public class `SomeClass`:
        D101: Missing docstring in public class
code_with_lint.py:33 in public method `__init__`:
        D107: Missing docstring in __init__
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, like pycodestyle, pydocstyle labels and categorizes the various errors it finds. And the list doesn&amp;rsquo;t conflict with anything from pycodestyle since all the errors are prefixed with a &lt;code&gt;D&lt;/code&gt; for docstring. A list of those errors can be found &lt;a href=&quot;http://www.pydocstyle.org/en/latest/error_codes.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;code-without-lint&quot;&gt;Code Without Lint&lt;/h5&gt;
&lt;p&gt;You can adjust the previously lint-filled code based on the linter&amp;rsquo;s output and you&amp;rsquo;ll end up with something like the following:&lt;/p&gt;
&lt;div class=&quot;card mb-3&quot; id=&quot;collapse_card1e251d&quot;&gt;
&lt;div class=&quot;card-header border-0&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse1e251d&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse1e251d&quot;&gt;Python Code Without Lint&lt;/button&gt; &lt;button class=&quot;btn btn-link float-right&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapse1e251d&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse1e251d&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;collapse1e251d&quot; class=&quot;collapse&quot; data-parent=&quot;#collapse_card1e251d&quot;&gt;&lt;div class=&quot;card-body&quot; markdown=&quot;1&quot;&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Example Code with less lint.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOME_GLOBAL_VAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GLOBAL VAR NAMES SHOULD BE IN ALL_CAPS_WITH_UNDERSCOES&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Return the result of a multiplation of the inputs.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12 &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15 &lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jackpot!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_sum_lucky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21 &lt;/span&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    Return a string describing whether or not the sum of input is lucky.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    This function first makes sure the inputs are valid and then calculates the&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    sum. Then, it will determine a message to return based on whether or not&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    that sum should be considered &amp;quot;lucky&amp;quot;.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27 &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_value&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31 &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a lucky number!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33 &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;an unlucky number!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;an unknown number! Could not calculate sum...&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41 &lt;/span&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Is a class docstring.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_other_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44 &lt;/span&gt;        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Initialize an instance of SomeClass.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;45 &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_other_arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_other_arg&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;46 &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;list_comprehension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;48 &lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;49 &lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_arg&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;50 &lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;51 &lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;52 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;53 &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;date_and_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;54 &lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;created SomeClass instance at unix time: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{current_time}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;55 &lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;datetime: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{date_and_time}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;56 &lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;some calculated values: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{list_comprehension}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;57 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;58 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_public_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;59 &lt;/span&gt;        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Is a method docstring.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;60 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;61 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;62 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_other_public_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;63 &lt;/span&gt;        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Is a method docstring.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;64 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;That code is lint-free according to the linters above. While the logic itself is mostly nonsensical, you can see that at a minimum, consistency is enforced.&lt;/p&gt;
&lt;p&gt;In the above case, we ran linters after writing all the code. However, that&amp;rsquo;s not the only way to go about checking code quality.&lt;/p&gt;
&lt;h2 id=&quot;when-can-i-check-my-code-quality&quot;&gt;When Can I Check My Code Quality?&lt;/h2&gt;
&lt;p&gt;You can check your code&amp;rsquo;s quality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you write it&lt;/li&gt;
&lt;li&gt;When it&amp;rsquo;s checked in&lt;/li&gt;
&lt;li&gt;When you&amp;rsquo;re running your tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s useful to have linters run against your code frequently. If automation and consistency aren&amp;rsquo;t there, it&amp;rsquo;s easy for a large team or project to lose sight of the goal and start creating lower quality code. It happens slowly, of course. Some poorly written logic or maybe some code with formatting that doesn&amp;rsquo;t match the neighboring code. Over time, all that lint piles up. Eventually, you can get stuck with something that&amp;rsquo;s buggy, hard to read, hard to fix, and a pain to maintain.&lt;/p&gt;
&lt;p&gt;To avoid that, check code quality often!&lt;/p&gt;
&lt;h3 id=&quot;as-you-write&quot;&gt;As You Write&lt;/h3&gt;
&lt;p&gt;You can use linters as you write code, but configuring your environment to do so may take some extra work. It&amp;rsquo;s generally a matter of finding the plugin for your IDE or editor of choice. In fact, most IDEs will already have linters built in.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s some general info on Python linting for various editors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/setting-up-sublime-text-3-for-full-stack-python-development/&quot;&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/python/linting&quot;&gt;VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atom.io/packages/search?q=python+linter&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/vim-and-python-a-match-made-in-heaven/#syntax-checkinghighlighting&quot;&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/emacs-the-best-python-editor/#additional-python-features&quot;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;before-you-check-in-code&quot;&gt;Before You Check In Code&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re using Git, Git hooks can be set up to run your linters before committing. Other version control systems have similar methods to run scripts before or after some action in the system. You can use these methods to block any new code that doesn&amp;rsquo;t meet quality standards.&lt;/p&gt;
&lt;p&gt;While this may seem drastic, forcing every bit of code through a screening for lint is an important step towards ensuring continued quality. Automating that screening at the front gate to your code may be the best way to avoid lint-filled code.&lt;/p&gt;
&lt;h3 id=&quot;when-running-tests&quot;&gt;When Running Tests&lt;/h3&gt;
&lt;p&gt;You can also place linters directly into whatever system you may use for &lt;a href=&quot;http://docs.python-guide.org/en/latest/scenarios/ci/&quot;&gt;continuous integration&lt;/a&gt;. The linters can be set up to fail the build if the code doesn&amp;rsquo;t meet quality standards.&lt;/p&gt;
&lt;p&gt;Again, this may seem like a drastic step, especially if there are already lots of linter errors in the existing code. To combat this, some continuous integration systems will allow you the option of only failing the build if the new code increases the number of linter errors that were already present. That way you can start improving quality without doing a whole rewrite of your existing code base.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;High-quality code does what it&amp;rsquo;s supposed to do without breaking. It is easy to read, maintain, and extend. It functions without problems or defects and is written so that it&amp;rsquo;s easy for the next person to work with.&lt;/p&gt;
&lt;p&gt;Hopefully it goes without saying that you should strive to have such high-quality code. Luckily, there are methods and tools to help improve code quality.&lt;/p&gt;
&lt;p&gt;Style guides will bring consistency to your code. &lt;a href=&quot;http://pep8.org/&quot;&gt;PEP8&lt;/a&gt; is a great starting point for Python. Linters will help you identify problem areas and inconsistencies. You can use linters throughout the development process, even automating them to flag lint-filled code before it gets too far.&lt;/p&gt;
&lt;p&gt;Having linters complain about style also avoids the need for style discussions during code reviews. Some people may find it easier to receive candid feedback from these tools instead of a team member. Additionally, some team members may not want to &amp;ldquo;nitpick&amp;rdquo; style during code reviews. Linters avoid the politics, save time, and complain about any inconsistency.&lt;/p&gt;
&lt;p&gt;In addition, all the linters mentioned in this article have various command line options and configurations that let you tailor the tool to your liking. You can be as strict or as loose as you want, which is an important thing to realize.&lt;/p&gt;
&lt;p&gt;Improving code quality is a process. You can take steps towards improving it without completely disallowing all nonconformant code. Awareness is a great first step. It just takes a person, like you, to first realize how important high-quality code is.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Documenting Python Code: A Complete Guide</title>
      <id>https://realpython.com/documenting-python-code/</id>
      <link href="https://realpython.com/documenting-python-code/"/>
      <updated>2018-07-25T14:00:00+00:00</updated>
      <summary>A complete guide to documenting Python code. Whether you&#39;re documenting a small script or a large project, whether you&#39;re a beginner or seasoned Pythonista, this guide will cover everything you need to know.</summary>
      <content type="html">
        &lt;p&gt;Welcome to your complete guide to documenting Python code. Whether you&amp;rsquo;re documenting a small script or a large project, whether you&amp;rsquo;re a beginner or seasoned Pythonista, this guide will cover everything you need to know.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve broken up this tutorial into four major sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#why-documenting-your-code-is-so-important&quot;&gt;Why Documenting Your Code Is So Important&lt;/a&gt;:&lt;/strong&gt; An introduction to documentation and its importance&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#commenting-vs.-documenting-code&quot;&gt;Commenting vs. Documenting Code&lt;/a&gt;:&lt;/strong&gt; An overview of the major differences between commenting and documenting, as well as the appropriate times and ways to use commenting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#documenting-your-python-code-base&quot;&gt;Documenting Your Python Code Base Using Docstrings&lt;/a&gt;:&lt;/strong&gt; A deep dive into docstrings for classes, class methods, functions, modules, packages, and scripts, as well as what should be found within each one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#documenting-your-python-projects&quot;&gt;Documenting Your Python Projects&lt;/a&gt;:&lt;/strong&gt; The necessary elements and what they should contain for your Python projects&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Feel free to read through this tutorial from beginning to end or jump to a section you&amp;rsquo;re interested in. It was designed to work both ways.&lt;/p&gt;
&lt;h2 id=&quot;why-documenting-your-code-is-so-important&quot;&gt;Why Documenting Your Code Is So Important&lt;/h2&gt;
&lt;p&gt;Hopefully, if you&amp;rsquo;re reading this tutorial, you already know the importance of documenting your code. But if not, then let me quote something Guido mentioned to me at a recent PyCon:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Code is more often read than written.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;em&gt;Guido Van Rossum&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you write code, you write it for two primary audiences: your users and your developers (including yourself). Both audiences are equally important. If you&amp;rsquo;re like me, you&amp;rsquo;ve probably opened up old codebases and wondered to yourself, &amp;ldquo;What in the world was I thinking?&amp;rdquo; If you&amp;rsquo;re having a problem reading your own code, imagine what your users or other developers are experiencing when they&amp;rsquo;re trying to use or contribute to your code.&lt;/p&gt;
&lt;p&gt;Conversely, I&amp;rsquo;m sure you&amp;rsquo;ve run into a situation where you wanted to do something in Python and found what looks like a great library that can get the job done. However, when you start using the library, you look for examples, write-ups, or even official documentation on how to do something specific and can&amp;rsquo;t immediately find the solution.&lt;/p&gt;
&lt;p&gt;After searching, you come to realize that the documentation is lacking or even worse, missing entirely. This is a frustrating feeling that deters you from using the library, no matter how great or efficient the code is. Daniele Procida summarized this situation best:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;It doesn&amp;rsquo;t matter how good your software is, because &lt;strong&gt;if the documentation is not good enough, people will not use it.&lt;/strong&gt;&amp;ldquo;&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;em&gt;&lt;a href=&quot;https://www.divio.com/en/blog/documentation/&quot;&gt;Daniele Procida&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this guide, you&amp;rsquo;ll learn from the ground up how to properly document your Python code from the smallest of scripts to the largest of Python projects to help prevent your users from ever feeling too frustrated to use or contribute to your project.&lt;/p&gt;
&lt;h2 id=&quot;commenting-vs-documenting-code&quot;&gt;Commenting vs. Documenting Code&lt;/h2&gt;
&lt;p&gt;Before we can go into how to document your Python code, we need to distinguish documenting from commenting.&lt;/p&gt;
&lt;p&gt;In general, commenting is describing your code to/for developers. The intended main audience is the maintainers and developers of the Python code. In conjunction with well-written code, comments help to guide the reader to better understand your code and its purpose and design:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Code tells you how; Comments tell you why.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;em&gt;&lt;a href=&quot;https://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/&quot;&gt;Jeff Atwood&lt;/a&gt; (aka Coding Horror)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Documenting code is describing its use and functionality to your users. While it may be helpful in the development process, the main intended audience is the users. The following section describes how and when to comment your code.&lt;/p&gt;
&lt;h3 id=&quot;basics-of-commenting-code&quot;&gt;Basics of Commenting Code&lt;/h3&gt;
&lt;p&gt;Comments are created in Python using the pound sign (&lt;code&gt;#&lt;/code&gt;) and should be brief statements no longer than a few sentences. Here&amp;rsquo;s a simple example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# A simple comment preceding a simple print statement&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;According to &lt;a href=&quot;http://pep8.org/#maximum-line-length&quot;&gt;PEP 8&lt;/a&gt;, comments should have a maximum length of 72 characters. This is true even if your project changes the max line length to be greater than the recommended 80 characters. If a comment is going to be greater than the comment char limit, using multiple lines for the comment is appropriate:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_long_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# A very long statement that just goes on and on and on and on and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# never ends until after it&amp;#39;s reached the 80 char limit&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hellooooooooooooooooooooooooooooooooooooooooooooooooooooooo World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commenting your code serves &lt;a href=&quot;https://en.wikipedia.org/wiki/Comment_(computer_programming)#Uses&quot;&gt;multiple purposes, including&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Planning and Reviewing:&lt;/strong&gt; When you are developing new portions of your code, it may be appropriate to first use comments as a way of planning or outlining that section of code. Remember to remove these comments once the actual coding has been implemented and reviewed/tested:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# First step&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Second step&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Third step&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Description:&lt;/strong&gt; Comments can be used to explain the intent of specific sections of code:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Attempt a connection based on previous settings. If unsuccessful,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# prompt user for new settings.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Algorithmic Description:&lt;/strong&gt; When algorithms are used, especially complicated ones, it can be useful to explain how the algorithm works or how it&amp;rsquo;s implemented within your code. It may also be appropriate to describe why a specific algorithm was selected over another.&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Using quick sort for performance gains&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tagging:&lt;/strong&gt; The use of tagging can be used to label specific sections of code where known issues or areas of improvement are located. Some examples are: &lt;code&gt;BUG&lt;/code&gt;, &lt;code&gt;FIXME&lt;/code&gt;, and &lt;code&gt;TODO&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# TODO: Add condition for when val is None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments to your code should be kept brief and focused. Avoid using long comments when possible. Additionally, you should use the following four essential rules as &lt;a href=&quot;https://blog.codinghorror.com/when-good-comments-go-bad/&quot;&gt;suggested by Jeff Atwood&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Keep comments as close to the code being described as possible. Comments that aren&amp;rsquo;t near their describing code are frustrating to the reader and easily missed when updates are made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t use complex formatting (such as tables or ASCII figures). Complex formatting leads to distracting content and can be difficult to maintain over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t include redundant information. Assume the reader of the code has a basic understanding of programming principles and language syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design your code to comment itself. The easiest way to understand code is by reading it. When you design your code using clear, easy-to-understand concepts, the reader will be able to quickly conceptualize your intent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember that comments are designed for the reader, including yourself, to help guide them in understanding the purpose and design of the software.&lt;/p&gt;
&lt;h3 id=&quot;commenting-code-via-type-hinting-python-35&quot;&gt;Commenting Code via Type Hinting (Python 3.5+)&lt;/h3&gt;
&lt;p&gt;Type hinting was added to Python 3.5 and is an additional form to help the readers of your code. In fact, it takes Jeff&amp;rsquo;s fourth suggestion from above to the next level. It allows the developer to design and explain portions of their code without commenting. Here&amp;rsquo;s a quick example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From examining the type hinting, you can immediately tell that the function expects the input &lt;code&gt;name&lt;/code&gt; to be of a type &lt;code&gt;str&lt;/code&gt;, or string. You can also tell that the expected output of the function will be of a type &lt;code&gt;str&lt;/code&gt;, or string, as well. While type hinting helps reduce comments, take into consideration that doing so may also make extra work when you are creating or updating your project documentation.&lt;/p&gt;
&lt;p&gt;You can learn more about type hinting and type checking from &lt;a href=&quot;https://www.youtube.com/watch?v=2xWhaALHTvU&quot;&gt;this video created by Dan Bader&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;documenting-your-python-code-base-using-docstrings&quot;&gt;Documenting Your Python Code Base Using Docstrings&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve learned about commenting, let&amp;rsquo;s take a deep dive into documenting a Python code base. In this section, you&amp;rsquo;ll learn about docstrings and how to use them for documentation. This section is further divided into the following sub-sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#docstrings-background&quot;&gt;Docstrings Background&lt;/a&gt;:&lt;/strong&gt; A background on how docstrings work internally within Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#docstring-types&quot;&gt;Docstring Types&lt;/a&gt;:&lt;/strong&gt; The various docstring &amp;ldquo;types&amp;rdquo; (function, class, class method, module, package, and script)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#docstring-formats&quot;&gt;Docstring Formats&lt;/a&gt;:&lt;/strong&gt; The different docstring &amp;ldquo;formats&amp;rdquo; (Google, NumPy/SciPy, reStructured Text, and Epytext)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;docstrings-background&quot;&gt;Docstrings Background&lt;/h3&gt;
&lt;p&gt;Documenting your Python code is all centered on docstrings. These are built-in strings that, when configured correctly, can help your users and yourself with your project&amp;rsquo;s documentation. Along with docstrings, Python also has the built-in function &lt;code&gt;help()&lt;/code&gt; that prints out the objects docstring to the console. Here&amp;rsquo;s a quick example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Help on class str in module builtins:&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;class str(object)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  str(object=&amp;#39;&amp;#39;) -&amp;gt; str&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  str(bytes_or_buffer[, encoding[, errors]]) -&amp;gt; str&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  Create a new string object from the given object. If encoding or&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  errors are specified, then the object must expose a data buffer&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  that will be decoded using the given encoding and error handler.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  Otherwise, returns the result of object.__str__() (if defined)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  or repr(object).&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  encoding defaults to sys.getdefaultencoding().&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; |  errors defaults to &amp;#39;strict&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; # Truncated for readability&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How is this output generated?  Since everything in Python is an object, you can examine the directory of the object using the &lt;code&gt;dir()&lt;/code&gt; command. Let&amp;rsquo;s do that and see what find:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;__add__&amp;#39;, ..., &amp;#39;__doc__&amp;#39;, ..., &amp;#39;zfill&amp;#39;] # Truncated for readability&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Within that directory output, there&amp;rsquo;s an interesting property, &lt;code&gt;__doc__&lt;/code&gt;. If you examine that property, you&amp;rsquo;ll discover this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__doc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;str(object=&amp;#39;&amp;#39;) -&amp;gt; str&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;str(bytes_or_buffer[, encoding[, errors]]) -&amp;gt; str&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Create a new string object from the given object. If encoding or&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;errors are specified, then the object must expose a data buffer&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;that will be decoded using the given encoding and error handler.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Otherwise, returns the result of object.__str__() (if defined)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;or repr(object).&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;encoding defaults to sys.getdefaultencoding().&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;errors defaults to &amp;#39;strict&amp;#39;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voilà! You&amp;rsquo;ve found where docstrings are stored within the object. This means that you can directly manipulate that property. However, there are restrictions for builtins:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__doc__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m a little string doc! Short and stout; here is my input and print me for my out&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;can&amp;#39;t set attributes of built-in/extension type &amp;#39;str&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any other custom object can be manipulated:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, is it me you&amp;#39;re looking for?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__doc__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A simple function that says hello... Richie style&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Help on function say_hello in module __main__:&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;say_hello(name)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    A simple function that says hello... Richie style&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python has one more feature that simplifies docstring creation. Instead of directly manipulating the &lt;code&gt;__doc__&lt;/code&gt; property, the strategic placement of the string literal directly below the object will automatically set the &lt;code&gt;__doc__&lt;/code&gt; value. Here&amp;rsquo;s what happens with the same example as above:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;A simple function that says hello... Richie style&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, is it me you&amp;#39;re looking for?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Help on function say_hello in module __main__:&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;say_hello(name)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    A simple function that says hello... Richie style&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go! Now you understand the background of docstrings. Now it&amp;rsquo;s time to learn about the different types of docstrings and what information they should contain.&lt;/p&gt;
&lt;h3 id=&quot;docstring-types&quot;&gt;Docstring Types&lt;/h3&gt;
&lt;p&gt;Docstring conventions are described within &lt;a href=&quot;https://www.python.org/dev/peps/pep-0257/&quot;&gt;PEP 257&lt;/a&gt;. Their purpose is to provide your users with a brief overview of the object. They should be kept concise enough to be easy to maintain but still be elaborate enough for new users to understand their purpose and how to use the documented object.&lt;/p&gt;
&lt;p&gt;In all cases, the docstrings should use the triple-double quote (&lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;) string format. This should be done whether the docstring is multi-lined or not. At a bare minimum, a docstring should be a quick summary of whatever is it you&amp;rsquo;re describing and should be contained within a single line:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This is a quick summary line used as a description of the object.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Multi-lined docstrings are used to further elaborate on the object beyond the summary. All multi-lined docstrings have the following parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A one-line summary line&lt;/li&gt;
&lt;li&gt;A blank line proceeding the summary&lt;/li&gt;
&lt;li&gt;Any further elaboration for the docstring&lt;/li&gt;
&lt;li&gt;Another blank line&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This is the summary line&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;This is the further elaboration of the docstring. Within this section,&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;you can elaborate further on details as appropriate for the situation.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Notice that the summary and the elaboration is separated by a blank new&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;line.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Notice the blank line above. Code should continue on this line.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All docstrings should have the same max character length as comments (72 characters). Docstrings can be further broken up into three major categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Class Docstrings:&lt;/strong&gt; Class and class methods&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Package and Module Docstrings:&lt;/strong&gt; Package, modules, and functions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Script Docstrings:&lt;/strong&gt; Script and functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;class-docstrings&quot;&gt;Class Docstrings&lt;/h4&gt;
&lt;p&gt;Class Docstrings are created for the class itself, as well as any class methods. The docstrings are placed immediately following the class or class method indented by one level:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Class docstrings go here.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Class method docstrings go here.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Class docstrings should contain the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A brief summary of its purpose and behavior&lt;/li&gt;
&lt;li&gt;Any public methods, along with a brief description&lt;/li&gt;
&lt;li&gt;Any class properties (attributes)&lt;/li&gt;
&lt;li&gt;Anything related to the interface for subclassers, if the class is intended to be subclassed &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The class constructor parameters should be documented within the &lt;code&gt;__init__&lt;/code&gt; class method docstring. Individual methods should be documented using their individual docstrings. Class method docstrings should contain the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A brief description of what the method is and what it&amp;rsquo;s used for&lt;/li&gt;
&lt;li&gt;Any arguments (both required and optional) that are passed including keyword arguments&lt;/li&gt;
&lt;li&gt;Label any arguments that are considered optional or have a default value&lt;/li&gt;
&lt;li&gt;Any side effects that occur when executing the method&lt;/li&gt;
&lt;li&gt;Any exceptions that are raised&lt;/li&gt;
&lt;li&gt;Any restrictions on when the method can be called&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s take a simple example of a data class that represents an Animal. This class will contain a few class properties, instance properties, a &lt;code&gt;__init__&lt;/code&gt;, and a single instance method:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A class used to represent an Animal&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    ...&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    Attributes&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    ----------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    says_str : str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        a formatted string to print out what the animal says&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    name : str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        the name of the animal&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    sound : str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        the sound that the animal makes&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    num_legs : int&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        the number of legs the animal has (default 4)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    Methods&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    -------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    says(sound=None)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Prints the animals name and what sound it makes&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;says_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; says &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{sound}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Parameters&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        ----------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        name : str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            The name of the animal&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        sound : str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            The sound the animal makes&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        num_legs : int, optional&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            The number of legs the animal (default is 4)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_legs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_legs&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;says&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Prints what the animals name is and what sound it makes.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;        If the argument `sound` isn&amp;#39;t passed in, the default Animal&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        sound is used.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;        Parameters&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        ----------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        sound : str, optional&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            The sound the animal makes (default is None)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;        Raises&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        ------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        NotImplementedError&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            If no sound is set for the animal or passed in as a&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            parameter.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Silent Animals are not supported!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;out_sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;says_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;package-and-module-docstrings&quot;&gt;Package and Module Docstrings&lt;/h4&gt;
&lt;p&gt;Package docstrings should be placed at the top of the package&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt; file. This docstring should list the modules and sub-packages that are exported by the package.&lt;/p&gt;
&lt;p&gt;Module docstrings are similar to class docstrings. Instead of classes and class methods being documented, it&amp;rsquo;s now the module and any functions found within. Module docstrings are placed at the top of the file even before any imports. Module docstrings should include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A brief description of the module and its purpose&lt;/li&gt;
&lt;li&gt;A list of any classes, exception, functions, and any other objects exported by the module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The docstring for a module function should include the same items as a class method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A brief description of what the function is and what it&amp;rsquo;s used for&lt;/li&gt;
&lt;li&gt;Any arguments (both required and optional) that are passed including keyword arguments&lt;/li&gt;
&lt;li&gt;Label any arguments that are considered optional&lt;/li&gt;
&lt;li&gt;Any side effects that occur when executing the function&lt;/li&gt;
&lt;li&gt;Any exceptions that are raised&lt;/li&gt;
&lt;li&gt;Any restrictions on when the function can be called&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;script-docstrings&quot;&gt;Script Docstrings&lt;/h4&gt;
&lt;p&gt;Scripts are considered to be single file executables run from the console. Docstrings for scripts are placed at the top of the file and should be documented well enough for users to be able to have a sufficient understanding of how to use the script. It should be usable for its &amp;ldquo;usage&amp;rdquo; message, when the user incorrectly passes in a parameter or uses the &lt;code&gt;-h&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;If you use &lt;code&gt;argparse&lt;/code&gt;, then you can omit parameter-specific documentation, assuming it&amp;rsquo;s correctly been documented within the &lt;code&gt;help&lt;/code&gt; parameter of the &lt;code&gt;argparser.parser.add_argument&lt;/code&gt; function. It is recommended to use the &lt;code&gt;__doc__&lt;/code&gt; for the &lt;code&gt;description&lt;/code&gt; parameter within &lt;code&gt;argparse.ArgumentReader&lt;/code&gt;&amp;rsquo;s constructor. Check out our tutorial on &lt;a href=&quot;https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/&quot;&gt;Command-Line Parsing Libraries&lt;/a&gt; for more details on how to use &lt;code&gt;argparse&lt;/code&gt; and other common command line parsers.&lt;/p&gt;
&lt;p&gt;Finally, any custom or third-party imports should be listed within the docstrings to allow users to know which packages may be required for running the script. Here&amp;rsquo;s an example of a script that is used to simply print out the column headers of a spreadsheet:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Spreadsheet Column Printer&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;This script allows the user to print to the console all columns in the&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;spreadsheet. It is assumed that the first row of the spreadsheet is the&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;location of the columns.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;This tool accepts comma separated value files (.csv) as well as excel&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;(.xls, .xlsx) files.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;This script requires that `pandas` be installed within the Python&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;environment you are running this script in.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;This file can also be imported as a module and contains the following&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;functions:&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    * get_spreadsheet_cols - returns the column headers of the file&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    * main - the main function of the script&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_spreadsheet_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_cols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Gets and prints the spreadsheet&amp;#39;s header columns&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    Parameters&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    ----------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    file_loc : str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        The file location of the spreadsheet&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    print_cols : bool, optional&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        A flag used to print the columns to the console (default is&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        False)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    Returns&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    -------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    list&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        a list of strings used that are the header columns&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;file_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_excel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;col_headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_headers&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__doc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;input_file&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The spreadsheet file to pring the columns of&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_spreadsheet_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_cols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;docstring-formats&quot;&gt;Docstring Formats&lt;/h3&gt;
&lt;p&gt;You may have noticed that, throughout the examples given in this tutorial, there has been specific formatting with common elements: &lt;code&gt;Arguments&lt;/code&gt;, &lt;code&gt;Returns&lt;/code&gt;, and &lt;code&gt;Attributes&lt;/code&gt;. There are specific docstrings formats that can be used to help docstring parsers and users have a familiar and known format. The formatting used within the examples in this tutorial are NumPy/SciPy-style docstrings. Some of the most common formats are the following:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Formatting Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Supported by Sphynx&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Formal Specification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings&quot;&gt;Google docstrings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Google&amp;rsquo;s recommended form of documentation&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructured Text&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Official Python documentation standard; Not beginner friendly but feature rich&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://numpydoc.readthedocs.io/en/latest/format.html&quot;&gt;NumPy/SciPy docstrings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;NumPy&amp;rsquo;s combination of reStructured and Google Docstrings&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://epydoc.sourceforge.net/epytext.html&quot;&gt;Epytext&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A Python adaptation of Epydoc; Great for Java developers&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Not officially&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The selection of the docstring format is up to you, but you should stick with the same format throughout your document/project. The following are examples of each type to give you an idea of how each documentation format looks.&lt;/p&gt;
&lt;h4 id=&quot;google-docstrings-example&quot;&gt;Google Docstrings Example&lt;/h4&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Gets and prints the spreadsheet&amp;#39;s header columns&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;Parameters:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    file_loc (str): The file location of the spreadsheet&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    print_cols (bool): A flag used to print the columns to the console&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        (default is False)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;Returns:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    list: a list of strings representing the header columns&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;restructured-text-example&quot;&gt;reStructured Text Example&lt;/h4&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Gets and prints the spreadsheet&amp;#39;s header columns&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;:param file_loc: The file location of the spreadsheet&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;:type file_loc: str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;:param print_cols: A flag used to print the columns to the console&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    (default is False)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;:type print_cols: bool&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;:returns: a list of strings representing the header columns&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;:rtype: list&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;numpyscipy-docstrings-example&quot;&gt;NumPy/SciPy Docstrings Example&lt;/h4&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Gets and prints the spreadsheet&amp;#39;s header columns&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;Parameters&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;----------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;file_loc : str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    The file location of the spreadsheet&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;print_cols : bool, optional&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A flag used to print the columns to the console (default is False)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;Returns&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;-------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    a list of strings representing the header columns&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;epytext-example&quot;&gt;Epytext Example&lt;/h4&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Gets and prints the spreadsheet&amp;#39;s header columns&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;@type file_loc: str&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;@param file_loc: The file location of the spreadsheet&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;@type print_cols: bool&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;@param print_cols: A flag used to print the columns to the console&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    (default is False)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;@rtype: list&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;@returns: a list of strings representing the header columns&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;documenting-your-python-projects&quot;&gt;Documenting Your Python Projects&lt;/h2&gt;
&lt;p&gt;Python projects come in all sorts of shapes, sizes, and purposes. The way you document your project should suit your specific situation. Keep in mind who the users of your project are going to be and adapt to their needs. Depending on the project type, certain aspects of documentation are recommended. The general layout of the project and its documentation should be as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;project_root/
│
├── project/  # Project source code
├── docs/
├── README
├── HOW_TO_CONTRIBUTE
├── CODE_OF_CONDUCT
├── examples.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Projects can be generally subdivided into three major types: Private, Shared, and Public/Open Source.&lt;/p&gt;
&lt;h3 id=&quot;private-projects&quot;&gt;Private Projects&lt;/h3&gt;
&lt;p&gt;Private projects are projects intended for personal use only and generally aren&amp;rsquo;t shared with other users or developers. Documentation can be pretty light on these types of projects. There are some recommended parts to add as needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Readme:&lt;/strong&gt; A brief summary of the project and its purpose. Include any special requirements for installation or operating the project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;examples.py&lt;/code&gt;:&lt;/strong&gt; A Python script file that gives simple examples of how to use the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember, even though private projects are intended for you personally, you are also considered a user. Think about anything that may be confusing to you down the road and make sure to capture those in either comments, docstrings, or the readme.&lt;/p&gt;
&lt;h3 id=&quot;shared-projects&quot;&gt;Shared Projects&lt;/h3&gt;
&lt;p&gt;Shared projects are projects in which you collaborate with a few other people in the development and/or use of the project. The &amp;ldquo;customer&amp;rdquo; or user of the project continues to be yourself and those limited few that use the project as well.&lt;/p&gt;
&lt;p&gt;Documentation should be a little more rigorous than it needs to be for a private project, mainly to help onboard new members to the project or alert contributors/users of new changes to the project. Some of the recommended parts to add to the project are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Readme:&lt;/strong&gt; A brief summary of the project and its purpose. Include any special requirements for installing or operating the project. Additionally, add any major changes since the previous version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;examples.py&lt;/code&gt;:&lt;/strong&gt; A Python script file that gives simple examples of how to use the projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to Contribute:&lt;/strong&gt; This should include how new contributors to the project can start contributing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;public-and-open-source-projects&quot;&gt;Public and Open Source Projects&lt;/h3&gt;
&lt;p&gt;Public and Open Source projects are projects that are intended to be shared with a large group of users and can involve large development teams. These projects should place as high of a priority on project documentation as the actual development of the project itself. Some of the recommended parts to add to the project are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Readme:&lt;/strong&gt; A brief summary of the project and its purpose. Include any special requirements for installing or operating the projects. Additionally, add any major changes since the previous version. Finally, add links to further documentation, bug reporting, and any other important information for the project. Dan Bader has put together &lt;a href=&quot;https://dbader.org/blog/write-a-great-readme-for-your-github-project&quot;&gt;a great tutorial&lt;/a&gt; on what all should be included in your readme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How to Contribute:&lt;/strong&gt; This should include how new contributors to the project can help. This includes developing new features, fixing known issues, adding documentation, adding new tests, or reporting issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code of Conduct:&lt;/strong&gt; Defines how other contributors should treat each other when developing or using your software. This also states what will happen if this code is broken. If you&amp;rsquo;re using Github, a Code of Conduct &lt;a href=&quot;https://help.github.com/articles/adding-a-code-of-conduct-to-your-project/&quot;&gt;template&lt;/a&gt; can be generated with recommended wording. For Open Source projects especially, consider adding this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;License:&lt;/strong&gt; A plaintext file that describes the license your project is using. For Open Source projects especially, consider adding this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;docs:&lt;/strong&gt; A folder that contains further documentation. The next section describes more fully what should be included and how to organize the contents of this folder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;the-four-main-sections-of-the-docs-folder&quot;&gt;The Four Main Sections of the &lt;code&gt;docs&lt;/code&gt; Folder&lt;/h4&gt;
&lt;p&gt;Daniele Procida gave a wonderful &lt;a href=&quot;https://www.youtube.com/watch?v=azf6yzuJt54&quot;&gt;PyCon 2017 talk&lt;/a&gt; and subsequent &lt;a href=&quot;https://www.divio.com/en/blog/documentation/&quot;&gt;blog post&lt;/a&gt; about documenting Python projects. He mentions that all projects should have the following four major sections to help you focus your work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;: Lessons that take the reader by the hand through a series of steps to complete a projects (or meaningful exercise). Geared towards the users learning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How-To Guides&lt;/strong&gt;: Guides that take the reader through the steps required to solve a common problem (problem-oriented recipes).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;: Explanations that clarify and illuminate a particular topic. Geared towards understanding.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanations&lt;/strong&gt;: Technical descriptions of the machinery and how to operate it (key classes, functions, APIs, and so forth). Think Encyclopedia article.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table shows how all of these sections relates to each other as well as their overall purpose:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;right&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Most Useful When We&amp;rsquo;re Studying&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Most Useful When We&amp;rsquo;re Coding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Practical Step&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;em&gt;Tutorials&lt;/em&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;em&gt;How-To Guides&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Theoretical Knowledge&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;em&gt;Explanation&lt;/em&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;em&gt;Reference&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In the end, you want to make sure that your users have access to the answers to any questions they may have. By organizing your project in this manner, you&amp;rsquo;ll be able to answer those questions easily and in a format they&amp;rsquo;ll be able to navigate quickly.&lt;/p&gt;
&lt;h3 id=&quot;documentation-tools-and-resources&quot;&gt;Documentation Tools and Resources&lt;/h3&gt;
&lt;p&gt;Documenting your code, especially large projects, can be daunting. Thankfully there are some tools out and references to get you started:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A collection of tools to auto-generate documentation in multiple formats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://epydoc.sourceforge.net/&quot;&gt;Epydoc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A tool for generating API documentation for Python modules based on their docstrings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://readthedocs.org/&quot;&gt;Read The Docs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Automatic building, versioning, and hosting of your docs for you&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html#pythonblocks&quot;&gt;Doxygen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A tool for generating documentation that supports Python as well as multiple other languages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.mkdocs.org/&quot;&gt;MkDocs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A static site generator to help build project documentation using the Markdown language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://pycco-docs.github.io/pycco/&quot;&gt;pycco&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A &amp;ldquo;quick and dirty&amp;rdquo; documentation generator that displays code and documentation side by side. Check out &lt;a href=&quot;https://realpython.com/generating-code-documentation-with-pycco/&quot;&gt;our tutorial on how to use it for more info&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Along with these tools, there are some additional tutorials, videos, and articles that can be useful when you are documenting your project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0ROZRNZkPS8&quot;&gt;Carol Willing - Practical Sphinx - PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bQSR1UpUdFQ&quot;&gt;Daniele Procida - Documentation-driven development - Lessons from the Django Project - PyCon 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hM4I58TA72g&quot;&gt;Eric Holscher - Documenting your project with Sphinx &amp;amp; Read the Docs - PyCon 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/SUt3wT43AeM?t=6299&quot;&gt;Titus Brown, Luiz Irber - Creating, building, testing, and documenting a Python project: a hands-on HOWTO - PyCon 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;Restructured Text Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html&quot;&gt;Sphinx&amp;rsquo;s reStructured Text Primer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes, the best way to learn is to mimic others. Here are some great examples of projects that use documentation well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Django:&lt;/strong&gt; &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/&quot;&gt;Docs&lt;/a&gt; (&lt;a href=&quot;https://github.com/django/django/tree/master/docs&quot;&gt;Source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Requests:&lt;/strong&gt; &lt;a href=&quot;http://docs.Python-requests.org/en/master/&quot;&gt;Docs&lt;/a&gt; (&lt;a href=&quot;https://github.com/requests/requests/tree/master/docs&quot;&gt;Source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Click:&lt;/strong&gt; &lt;a href=&quot;http://click.pocoo.org/dev/&quot;&gt;Docs&lt;/a&gt; (&lt;a href=&quot;https://github.com/pallets/click/tree/master/docs&quot;&gt;Source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pandas:&lt;/strong&gt; &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/&quot;&gt;Docs&lt;/a&gt; (&lt;a href=&quot;https://github.com/pandas-dev/pandas/tree/master/doc&quot;&gt;Source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;where-do-i-start&quot;&gt;Where Do I Start?&lt;/h2&gt;
&lt;p&gt;The documentation of projects have a simple progression:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No Documentation&lt;/li&gt;
&lt;li&gt;Some Documentation&lt;/li&gt;
&lt;li&gt;Complete Documentation&lt;/li&gt;
&lt;li&gt;Good Documentation&lt;/li&gt;
&lt;li&gt;Great Documentation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&amp;rsquo;re at a loss about where to go next with your documentation, look at where your project is now in relation to the progression above. Do you have any documentation? If not, then start there. If you have some documentation but are missing some of the key project files, get started by adding those.&lt;/p&gt;
&lt;p&gt;In the end, don&amp;rsquo;t get discouraged or overwhelmed by the amount of work required for documenting code. Once you get started documenting your code, it becomes easier to keep going. Feel free to comment if you have questions or reach out to the Real Python Team on social media, and we&amp;rsquo;ll help.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Fast, Flexible, Easy and Intuitive: How to Speed Up Your Pandas Projects</title>
      <id>https://realpython.com/fast-flexible-pandas/</id>
      <link href="https://realpython.com/fast-flexible-pandas/"/>
      <updated>2018-07-23T14:00:00+00:00</updated>
      <summary>What is it about Pandas that has data scientists, analysts, and engineers raving? This is a guide to using Pandas Pythonically to get the most out of its powerful and easy-to-use built-in features. Additionally, you will learn a couple of practical time-saving tips.</summary>
      <content type="html">
        &lt;p&gt;If you work with big data sets, you probably remember the &amp;ldquo;aha&amp;rdquo; moment along your Python journey when you discovered the &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/&quot;&gt;Pandas&lt;/a&gt; library. Pandas is a game-changer for &lt;a href=&quot;https://realpython.com/tutorials/data-science/&quot;&gt;data science and analytics&lt;/a&gt;, particularly if you came to Python because you were searching for something more powerful than Excel and VBA.&lt;/p&gt;
&lt;p&gt;So what is it about Pandas that has data scientists, analysts, and engineers like me raving? Well, the Pandas documentation says that it uses:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;flexible&lt;/strong&gt;, and expressive data structures designed to make working with &amp;ldquo;relational&amp;rdquo; or &amp;ldquo;labeled&amp;rdquo; data both &lt;strong&gt;easy&lt;/strong&gt; and &lt;strong&gt;intuitive&lt;/strong&gt;.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast, flexible, easy, and intuitive? That sounds great! If your job involves building complicated data models, you don’t want to spend half of your development hours waiting for modules to churn through big data sets.  You want to dedicate your time and brainpower to interpreting your data, rather than painstakingly fumbling around with less powerful tools.&lt;/p&gt;
&lt;h2 id=&quot;but-i-heard-that-pandas-is-slow&quot;&gt;But I Heard That Pandas Is Slow&amp;hellip;&lt;/h2&gt;
&lt;p&gt;When I first started using Pandas, I was advised that, while it was a great tool for dissecting data, Pandas was too slow to use as a statistical modeling tool. Starting out, this proved true. I spent more than a few minutes twiddling my thumbs, waiting for Pandas to churn through data.&lt;/p&gt;
&lt;p&gt;But then I learned that Pandas is built on top of the NumPy array structure, and so many of its operations are carried out in C, either via NumPy or through Pandas&amp;rsquo; own &lt;a href=&quot;https://github.com/pandas-dev/pandas/tree/master/pandas/_libs&quot;&gt;library&lt;/a&gt; of Python extension modules that are written in Cython and compiled to C.  So, shouldn’t Pandas be fast too?&lt;/p&gt;
&lt;p&gt;It absolutely should be, if you use it the way it was intended!&lt;/p&gt;
&lt;p&gt;The paradox is that what may otherwise &amp;ldquo;look like&amp;rdquo; &lt;a href=&quot;https://stackoverflow.com/q/25011078/7954504&quot;&gt;Pythonic&lt;/a&gt; code can be suboptimal in Pandas as far as efficiency is concerned.  Like NumPy, &lt;a href=&quot;https://realpython.com/numpy-array-programming/#what-is-vectorization&quot;&gt;Pandas is designed for vectorized operations&lt;/a&gt; that operate on entire columns or datasets in one sweep.  Thinking about each &amp;ldquo;cell&amp;rdquo; or row individually should generally be a last resort, not a first.&lt;/p&gt;
&lt;h2 id=&quot;this-tutorial&quot;&gt;This Tutorial&lt;/h2&gt;
&lt;p&gt;To be clear, this is not a guide about how to over-optimize your Pandas code. Pandas is already built to run quickly if used correctly. Also, there’s a big difference between optimization and writing clean code.&lt;/p&gt;
&lt;p&gt;This is a guide to using Pandas Pythonically to get the most out of its powerful and easy-to-use built-in features. Additionally, you will learn a couple of practical time-saving tips, so you won’t be twiddling those thumbs every time you work with your data.&lt;/p&gt;
&lt;p&gt;In this tutorial, you&amp;rsquo;ll cover the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advantages of using &lt;code&gt;datetime&lt;/code&gt; data with time series&lt;/li&gt;
&lt;li&gt;The most efficient route to doing batch calculations&lt;/li&gt;
&lt;li&gt;Saving time by storing data with HDFStore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To demonstrate these topics, I&amp;rsquo;ll take an example from my day job that looks at a time series of electricity consumption.  After loading the data, you&amp;rsquo;ll successively progress through more efficient ways to get to the end result.  One adage that holds true for most of Pandas is that there is more than one way to get from A to B.  This doesn&amp;rsquo;t mean, however, that all of the available options will scale equally well to larger, more demanding datasets.&lt;/p&gt;
&lt;p&gt;Assuming that you already know how to do some basic &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/indexing.html&quot;&gt;data selection in Pandas&lt;/a&gt;, let&amp;rsquo;s get started.&lt;/p&gt;
&lt;h2 id=&quot;the-task-at-hand&quot;&gt;The Task at Hand&lt;/h2&gt;
&lt;p&gt;The goal of this example will be to apply time-of-use energy tariffs to find the total cost of energy consumption for one year. That is, at different hours of the day, the price for electricity varies, so the task is to multiply the electricity consumed for each hour by the correct price for the hour in which it was consumed.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s read our data from a &lt;a href=&quot;https://github.com/realpython/materials/blob/master/pandas-fast-flexible-intuitive/tutorial/demand_profile.csv&quot;&gt;CSV file&lt;/a&gt; that has two columns: one for date plus time and one for electrical energy consumed in kilowatt hours (kWh):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/csv_image.86d313f7aab0.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/csv_image.86d313f7aab0.jpg&quot; width=&quot;502&quot; height=&quot;308&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/csv_image.86d313f7aab0.jpg&amp;amp;w=125&amp;amp;sig=be79df22e1eabb48bc160c2876e28deb2a80d06f 125w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/csv_image.86d313f7aab0.jpg&amp;amp;w=251&amp;amp;sig=cbc6d737de5235a6ea98e0ddbbb4c11243b9a151 251w, https://files.realpython.com/media/csv_image.86d313f7aab0.jpg 502w&quot; sizes=&quot;75vw&quot; alt=&quot;CSV data&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rows contains the electricity used in each hour, so there are &lt;em&gt;365 x 24 = 8760&lt;/em&gt; rows for the whole year.  Each row indicates the usage for the &amp;ldquo;hour starting&amp;rdquo; at the time, so 1/1/13 0:00 indicates the usage for the first hour of January 1st.&lt;/p&gt;
&lt;h2 id=&quot;saving-time-with-datetime-data&quot;&gt;Saving Time With Datetime Data&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is to read your data from the CSV file with one of Pandas&amp;rsquo; I/O functions:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__version__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;0.23.1&amp;#39;&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;# Make sure that `demand_profile.csv` is in your&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;# current working directory.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;demand_profile.csv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     date_time  energy_kwh&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0  1/1/13 0:00       0.586&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1  1/1/13 1:00       0.580&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2  1/1/13 2:00       0.572&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3  1/1/13 3:00       0.596&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4  1/1/13 4:00       0.592&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This looks okay at first glance, but there&amp;rsquo;s a small issue.  Pandas and NumPy have a concept of &lt;code&gt;dtypes&lt;/code&gt; (data types). If no arguments are specified, &lt;code&gt;date_time&lt;/code&gt; will take on an &lt;code&gt;object&lt;/code&gt; dtype:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtypes&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;date_time      object&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;energy_kwh    float64&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;dtype: object&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is not ideal.  &lt;code&gt;object&lt;/code&gt; is a container for not just &lt;code&gt;str&lt;/code&gt;, but any column that can&amp;rsquo;t neatly fit into one data type.  It would be arduous and inefficient to work with dates as strings.  (It would also be memory-inefficient.)&lt;/p&gt;
&lt;p&gt;For working with time series data, you&amp;rsquo;ll want the &lt;code&gt;date_time&lt;/code&gt; column to be formatted as an array of datetime objects.  (Pandas calls this a &lt;code&gt;Timestamp&lt;/code&gt;.) Pandas makes each step here rather simple:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;datetime64[ns]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note that you could alternatively use a Pandas &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.PeriodIndex.html&quot;&gt;&lt;code&gt;PeriodIndex&lt;/code&gt;&lt;/a&gt; in this case.)&lt;/p&gt;
&lt;p&gt;You now have a DataFrame called &lt;code&gt;df&lt;/code&gt; that looks much like our CSV file.  It has two columns and a numerical index for referencing the rows.&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;               date_time    energy_kwh&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0    2013-01-01 00:00:00         0.586&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1    2013-01-01 01:00:00         0.580&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2    2013-01-01 02:00:00         0.572&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3    2013-01-01 03:00:00         0.596&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4    2013-01-01 04:00:00         0.592&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above is simple and easy, but how fast it? Let’s put it to the test using a &lt;a href=&quot;https://github.com/realpython/materials/blob/master/pandas-fast-flexible-intuitive/tutorial/timer.py&quot;&gt;timing decorator&lt;/a&gt;, which I have unoriginally called &lt;code&gt;@timeit&lt;/code&gt;.  This decorator largely mimics &lt;code&gt;timeit.repeat()&lt;/code&gt; from Python&amp;rsquo;s standard library, but it allows you to return the result of the function itself and print its average runtime from multiple trials.  (Python&amp;rsquo;s &lt;code&gt;timeit.repeat()&lt;/code&gt; returns the timing results, not the function result.)&lt;/p&gt;
&lt;p&gt;Creating a function and placing the &lt;code&gt;@timeit&lt;/code&gt; decorator directly above it will mean that every time the function is called, it will be timed.  The decorator runs an outer loop and an inner loop:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Read in again so that we have `object` dtype to start &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 10 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `convert` ran in average of 1.610 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result? 1.6 seconds for 8760 rows of data. &amp;ldquo;Great,&amp;rdquo; you might say, &amp;ldquo;that’s no time at all.&amp;rdquo; But what if you encounter larger data sets&amp;mdash;say, one year of electricity use at one-minute intervals? That’s 60 times more data, so you’ll end up waiting around one and a half minutes. That&amp;rsquo;s starting to sound less tolerable. &lt;/p&gt;
&lt;p&gt;In actuality, I recently analyzed 10 years of hourly electricity data from 330 sites. Do you think I waited 88 minutes to convert datetimes? Absolutely not!&lt;/p&gt;
&lt;p&gt;How can you speed this up? As a general rule, Pandas will be far quicker the less it has to interpret your data. In this case, you will see huge speed improvements just by telling Pandas what your time and date data looks like, using the format parameter. You can do this by using the &lt;code&gt;strftime&lt;/code&gt; codes found &lt;a href=&quot;http://strftime.org/&quot;&gt;here&lt;/a&gt; and entering them like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert_with_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;                          &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/%m/%y %H:%M&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 100 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `convert_with_format` ran in average of 0.032 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The new result? 0.032 seconds, which is 50 times faster! So you’ve just saved about 86 minutes of processing time for my 330 sites. Not a bad improvement!&lt;/p&gt;
&lt;p&gt;One finer detail is that the datetimes in the CSV are not in &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601 format&lt;/a&gt;: you&amp;rsquo;d need &lt;code&gt;YYYY-MM-DD HH:MM&lt;/code&gt;.  If you don&amp;rsquo;t specify a format, Pandas will use the &lt;a href=&quot;https://dateutil.readthedocs.io/en/stable/&quot;&gt;&lt;code&gt;dateutil&lt;/code&gt;&lt;/a&gt; package to convert each string to a date.  &lt;/p&gt;
&lt;p&gt;Conversely, if the raw datetime data is already in ISO 8601 format, Pandas can immediately take a &lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/08158c076d89177a962d00e4851649f1ef76d12f/pandas/_libs/tslib.pyx#L2129&quot;&gt;fast route&lt;/a&gt; to parsing the dates.  This is one reason why being explicit about the format is so beneficial here.  Another option is to pass &lt;code&gt;infer_datetime_format=True&lt;/code&gt; parameter, but it generally pays to be explicit.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Pandas&amp;rsquo; &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html&quot;&gt;&lt;code&gt;read_csv()&lt;/code&gt;&lt;/a&gt; also allows you to parse dates as a part of the file I/O step.  See the &lt;code&gt;parse_dates&lt;/code&gt;, &lt;code&gt;infer_datetime_format&lt;/code&gt;, and &lt;code&gt;date_parser&lt;/code&gt; parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;simple-looping-over-pandas-data&quot;&gt;Simple Looping Over Pandas Data&lt;/h2&gt;
&lt;p&gt;Now that your dates and times are in a convenient format, you are ready to get down to the business of calculating your electricity costs. Remember that cost varies by hour, so you will need to conditionally apply a cost factor to each hour of the day. In this example, the time-of-use costs will be defined as follows:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tariff Type&lt;/th&gt;
&lt;th&gt;Cents per kWh&lt;/th&gt;
&lt;th&gt;Time Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Peak&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;17:00 to 24:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shoulder&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;7:00 to 17:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Off-Peak&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;0:00 to 7:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If the price were a flat 28 cents per kWh for every hour of the day, most people familiar with Pandas would know that this calculation could be achieved in one line:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will result in the creation of a new column with the cost of electricity for that hour:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;date_time&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;energy_kwh&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;cost_cents&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.586&lt;/span&gt;           &lt;span class=&quot;mf&quot;&gt;16.408&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.580&lt;/span&gt;           &lt;span class=&quot;mf&quot;&gt;16.240&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.572&lt;/span&gt;           &lt;span class=&quot;mf&quot;&gt;16.016&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.596&lt;/span&gt;           &lt;span class=&quot;mf&quot;&gt;16.688&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.592&lt;/span&gt;           &lt;span class=&quot;mf&quot;&gt;16.576&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But our cost calculation is conditional on the time of day. This is where you will see a lot of people using Pandas the way it was not intended: by writing a loop to do the conditional calculation. &lt;/p&gt;
&lt;p&gt;For the rest of this tutorial, you&amp;rsquo;ll start from a less-than-ideal baseline solution and work up to a Pythonic solution that fully leverages Pandas.&lt;/p&gt;
&lt;p&gt;But what is Pythonic in the case of Pandas?  The irony is that it is those who are experienced in other (less user-friendly) coding languages such as C++ or Java that are particularly susceptible to this because they instinctively &amp;ldquo;think in loops.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Let’s look at a &lt;a href=&quot;https://dbader.org/blog/pythonic-loops&quot;&gt;loop approach&lt;/a&gt; that is not Pythonic and that many people take when they are unaware of how Pandas is designed to be used. We will use &lt;code&gt;@timeit&lt;/code&gt; again to see how fast this approach is.&lt;/p&gt;
&lt;p&gt;First, let’s create a function to apply the appropriate tariff to a given hour:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_tariff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Calculates cost of electricity for given hour.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Invalid hour: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{hour}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s the loop that isn&amp;rsquo;t Pythonic, in all its glory:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# NOTE: Don&amp;#39;t do this!&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_tariff_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Calculate costs in loop.  Modifies `df` inplace.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;energy_cost_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Get electricity used and hour of day&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;energy_used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;energy_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_tariff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy_used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;energy_cost_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;energy_cost_list&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_tariff_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 100 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `apply_tariff_loop` ran in average of 3.152 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For people who picked up Pandas after having written &amp;ldquo;pure Python&amp;rdquo; for some time prior, this design might seem natural: you have a typical &amp;ldquo;for each &lt;em&gt;x&lt;/em&gt;, conditional on &lt;em&gt;y&lt;/em&gt;, do &lt;em&gt;z&lt;/em&gt;.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;However, this loop is clunky. You can consider the above to be an &amp;ldquo;antipattern&amp;rdquo; in Pandas for several reasons.  Firstly, it needs to initialize a list in which the outputs will be recorded.&lt;/p&gt;
&lt;p&gt;Secondly, it uses the opaque object &lt;code&gt;range(0, len(df))&lt;/code&gt; to loop over, and then after applying &lt;code&gt;apply_tariff()&lt;/code&gt;, it has to append the result to a list that is used to make the new DataFrame column.  It also does what is called &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/indexing.html#returning-a-view-versus-a-copy&quot;&gt;chained indexing&lt;/a&gt; with &lt;code&gt;df.iloc[i][&#39;date_time&#39;]&lt;/code&gt;, which often leads to unintended results.&lt;/p&gt;
&lt;p&gt;But the biggest issue with this approach is the time cost of the calculations. On my machine, this loop took over 3 seconds for 8760 rows of data.  Next, you&amp;rsquo;ll look at some improved solutions for iteration over Pandas structures.&lt;/p&gt;
&lt;h2 id=&quot;looping-with-itertuples-and-iterrows&quot;&gt;Looping with &lt;code&gt;.itertuples()&lt;/code&gt; and &lt;code&gt;.iterrows()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;What other approaches can you take? Well, Pandas has actually made the &lt;code&gt;for i in range(len(df))&lt;/code&gt; syntax redundant by introducing the &lt;code&gt;DataFrame.itertuples()&lt;/code&gt; and &lt;code&gt;DataFrame.iterrows()&lt;/code&gt; methods.  These are both generator methods that &lt;code&gt;yield&lt;/code&gt; one row at a time. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;.itertuples()&lt;/code&gt; yields a &lt;a href=&quot;https://docs.python.org/3.6/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/a&gt; for each row, with the row&amp;rsquo;s index value as the first element of the tuple.  A &lt;code&gt;nametuple&lt;/code&gt; is a data structure from Python&amp;rsquo;s &lt;code&gt;collections&lt;/code&gt; module that behaves like a Python tuple but has fields accessible by attribute lookup.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.iterrows()&lt;/code&gt; yields pairs (tuples) of (index, &lt;code&gt;Series&lt;/code&gt;) for each row in the DataFrame.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;.itertuples()&lt;/code&gt; tends to be a bit faster, let&amp;rsquo;s stay in Pandas and use &lt;code&gt;.iterrows()&lt;/code&gt; in this example, because some readers might not have run across &lt;code&gt;nametuple&lt;/code&gt;.  Let’s see what this achieves:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_tariff_iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;energy_cost_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Get electricity used and hour of day&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;energy_used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Append cost list&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;energy_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_tariff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy_used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;energy_cost_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;energy_cost_list&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_tariff_iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 100 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `apply_tariff_iterrows` ran in average of 0.713 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some marginal gains have been made. The syntax is more explicit, and there is less clutter in your row value references, so it’s more readable. In terms of time gains, is almost 5 five times quicker!&lt;/p&gt;
&lt;p&gt;However, there is more room for improvement.  You&amp;rsquo;re still using some form of a Python for-loop, meaning that each and every function call is done in Python when it could ideally be done in a faster language built into Pandas&amp;rsquo; internal architecture.&lt;/p&gt;
&lt;h2 id=&quot;pandas-apply&quot;&gt;Pandas&amp;rsquo; &lt;code&gt;.apply()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You can further improve this operation using the &lt;code&gt;.apply()&lt;/code&gt; method instead of &lt;code&gt;.iterrows()&lt;/code&gt;. Pandas&amp;rsquo; &lt;code&gt;.apply()&lt;/code&gt; method takes functions (callables) and applies them along an axis of a DataFrame (all rows, or all columns). In this example, a &lt;a href=&quot;https://docs.python.org/3.6/tutorial/controlflow.html#lambda-expressions&quot;&gt;lambda function&lt;/a&gt; will help you pass the two columns of data into &lt;code&gt;apply_tariff()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_tariff_withapply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_tariff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;kwh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_tariff_withapply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 100 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `apply_tariff_withapply` ran in average of 0.272 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The syntactic advantages of &lt;code&gt;.apply()&lt;/code&gt; are clear, with a significant reduction in the number of lines and very readable, explicit code. In this case, the time taken was roughly half that of the &lt;code&gt;.iterrows()&lt;/code&gt; method. &lt;/p&gt;
&lt;p&gt;However, this is not yet &amp;ldquo;blazingly fast.&amp;rdquo;  One reason is that &lt;code&gt;.apply()&lt;/code&gt; will try internally to loop over &lt;a href=&quot;http://cython.org/&quot;&gt;Cython&lt;/a&gt; iterators.  But in this case, the &lt;code&gt;lambda&lt;/code&gt; that you passed isn&amp;rsquo;t something that can be handled in Cython, so it&amp;rsquo;s called in Python, which is consequently not all that fast.&lt;/p&gt;
&lt;p&gt;If you were to use &lt;code&gt;.apply()&lt;/code&gt; for my 10 years of hourly data for 330 sites, you’d be looking at around 15 minutes of processing time. If this calculation were intended to be a small part of a larger model, you’d really want to speed things up. That’s where vectorized operations come in handy.&lt;/p&gt;
&lt;h2 id=&quot;selecting-data-with-isin&quot;&gt;Selecting Data With &lt;code&gt;.isin()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Earlier, you saw that if there were a single electricity price, you could apply that price across all the electricity consumption data in one line of code (&lt;code&gt;df[&#39;energy_kwh&#39;] * 28&lt;/code&gt;).  This particular operation was an example of a vectorized operation, and it is the fastest way to do things in Pandas.&lt;/p&gt;
&lt;p&gt;But how can you apply condition calculations as vectorized operations in Pandas? One trick is to select and group parts the DataFrame based on your conditions and then apply a vectorized operation to each selected group.&lt;/p&gt;
&lt;p&gt;In this next example, you will see how to select rows with Pandas&amp;rsquo; &lt;code&gt;.isin()&lt;/code&gt; method and then apply the appropriate tariff in a vectorized operation. Before you do this, it will make things a little more convenient if you set the &lt;code&gt;date_time&lt;/code&gt; column as the DataFrame&amp;rsquo;s index:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inplace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_tariff_isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Define hour range Boolean arrays&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;peak_hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shoulder_hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;off_peak_hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Apply tariffs to hour ranges&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peak_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peak_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shoulder_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shoulder_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off_peak_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off_peak_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s see how this compares:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_tariff_isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 100 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `apply_tariff_isin` ran in average of 0.010 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To understand what’s happening in this code, you need to know that the &lt;code&gt;.isin()&lt;/code&gt; method is returning an array of Boolean values that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These values identify which DataFrame indices (datetimes) fall within the hour range specified. Then, when you pass these Boolean arrays to the DataFrame’s &lt;code&gt;.loc&lt;/code&gt; indexer, you get a slice of the DataFrame that only includes rows that match those hours. After that, it is simply a matter of multiplying the slice by the appropriate tariff, which is a speedy vectorized operation.&lt;/p&gt;
&lt;p&gt;How does this compare to our looping operations above? Firstly, you may notice that you no longer need &lt;code&gt;apply_tariff()&lt;/code&gt;, because all the conditional logic is applied in the selection of the rows. So there is a huge reduction in the lines of code you have to write and in the Python code that is called.&lt;/p&gt;
&lt;p&gt;What about the processing time? 315 times faster than the loop that wasn&amp;rsquo;t Pythonic, around 71 times faster than &lt;code&gt;.iterrows()&lt;/code&gt; and 27 times faster that &lt;code&gt;.apply()&lt;/code&gt;. Now you are moving at the kind of speed you need to get through big data sets nice and quickly.&lt;/p&gt;
&lt;h2 id=&quot;can-we-do-better&quot;&gt;Can We Do Better?&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;apply_tariff_isin()&lt;/code&gt;, we are still admittedly doing some &amp;ldquo;manual work&amp;rdquo; by calling &lt;code&gt;df.loc&lt;/code&gt; and &lt;code&gt;df.index.hour.isin()&lt;/code&gt; three times each.  You could argue that this solution isn&amp;rsquo;t scalable if we had a more granular range of time slots.  (A different rate for each hour would require 24 &lt;code&gt;.isin()&lt;/code&gt; calls.)  Luckily, you can do things even more programmatically with Pandas&amp;rsquo; &lt;code&gt;pd.cut()&lt;/code&gt; function in this case:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_tariff_cut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cents_per_kwh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;bins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;include_lowest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cents_per_kwh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s take a second to see what&amp;rsquo;s going on here.  &lt;code&gt;pd.cut()&lt;/code&gt; is applying an array of labels (our costs) according to which bin each hour belongs in. Note that the &lt;code&gt;include_lowest&lt;/code&gt; parameter indicates whether the first interval should be left-inclusive or not.  (You want to include &lt;code&gt;time=0&lt;/code&gt; in a group.)&lt;/p&gt;
&lt;p&gt;This is a fully vectorized way to get to your intended result, and it comes out on top in terms of timing:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_tariff_cut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 100 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `apply_tariff_cut` ran in average of 0.003 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, you&amp;rsquo;ve built up from taking potentially over an hour to under a second to process the full 300-site dataset.  Not bad!  There is one last option, though, which is to use NumPy functions to manipulate the underlying NumPy arrays for each DataFrame, and then to integrate the results back into Pandas data structures.&lt;/p&gt;
&lt;h2 id=&quot;dont-forget-numpy&quot;&gt;Don’t Forget NumPy!&lt;/h2&gt;
&lt;p&gt;One point that should not be forgotten when you are using Pandas is that Pandas Series and DataFrames are designed on top of the NumPy library. This gives you even more computation flexibility, because Pandas works seamlessly with NumPy arrays and operations.&lt;/p&gt;
&lt;p&gt;In this next case you&amp;rsquo;ll use NumPy&amp;rsquo;s &lt;code&gt;digitize()&lt;/code&gt; function. It is similar to Pandas&amp;rsquo; &lt;code&gt;cut()&lt;/code&gt; in that the data will be binned, but this time it will be represented by an array of indexes representing which bin each hour belongs to. These indexes are then applied to a prices array:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_tariff_digitize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digitize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cost_cents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;energy_kwh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Like the &lt;code&gt;cut()&lt;/code&gt; function, this syntax is wonderfully concise and easy to read. But how does it compare in speed? Let&amp;rsquo;s see:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_tariff_digitize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Best of 3 trials with 100 function calls per trial:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Function `apply_tariff_digitize` ran in average of 0.002 seconds.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, there&amp;rsquo;s still a performance improvement, but it&amp;rsquo;s becoming more marginal in nature.  This is probably a good time to call it a day on hacking away at code improvement and think about the bigger picture.&lt;/p&gt;
&lt;p&gt;With Pandas, it can help to maintain &amp;ldquo;hierarchy,&amp;rdquo; if you will, of preferred options for doing batch calculations like you&amp;rsquo;ve done here.  These will usually rank from fastest to slowest (and most to least flexible):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use vectorized operations: Pandas methods and functions with no for-loops.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;.apply()&lt;/code&gt; method with a callable.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;.itertuples()&lt;/code&gt;: iterate over DataFrame rows as &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuples&lt;/code&gt;&lt;/a&gt; from Python&amp;rsquo;s &lt;code&gt;collections&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;.iterrows()&lt;/code&gt;: iterate over DataFrame rows as (index, &lt;code&gt;pd.Series&lt;/code&gt;) pairs.  While a Pandas Series is a flexible data structure, it can be costly to construct each row into a Series and then access it.&lt;/li&gt;
&lt;li&gt;Use &amp;ldquo;element-by-element&amp;rdquo; for loops, updating each cell or row one at a time with &lt;code&gt;df.loc&lt;/code&gt; or &lt;code&gt;df.iloc&lt;/code&gt;.  (Or, &lt;code&gt;.at&lt;/code&gt;/&lt;code&gt;.iat&lt;/code&gt; for fast scalar access.)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t Take My Word For It:&lt;/strong&gt;  The order of precedence above is a suggestion &lt;a href=&quot;https://stackoverflow.com/a/24871316/7954504&quot;&gt;straight from a core Pandas developer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s the &amp;ldquo;order of precedence&amp;rdquo; above at work, with each function you&amp;rsquo;ve built here:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Runtime (seconds)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apply_tariff_loop()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.152&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apply_tariff_iterrows()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.713&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apply_tariff_withapply()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.272&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apply_tariff_isin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apply_tariff_cut()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apply_tariff_digitize()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&quot;prevent-reprocessing-with-hdfstore&quot;&gt;Prevent Reprocessing with HDFStore&lt;/h2&gt;
&lt;p&gt;Now that you have looked at quick data processes in Pandas, let’s explore how to avoid reprocessing time altogether with &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/io.html#hdf5-pytables&quot;&gt;HDFStore&lt;/a&gt;, which was recently integrated into Pandas.&lt;/p&gt;
&lt;p&gt;Often when you are building a complex data model, it is convenient to do some pre-processing of your data. For example, if you had 10 years of minute-frequency electricity consumption data, simply converting the date and time to datetime might take 20 minutes, even if you specify the format parameter. You really only want to have to do this once, not every time you run your model, for testing or analysis.&lt;/p&gt;
&lt;p&gt;A very useful thing you can do here is pre-process and then store your data in its processed form to be used when needed. But how can you store data in the right format without having to reprocess it again? If you were to save as CSV, you would simply lose your datetime objects and have to re-process it when accessing again.&lt;/p&gt;
&lt;p&gt;Pandas has a built-in solution for this which uses &lt;a href=&quot;https://portal.hdfgroup.org/display/HDF5/HDF5&quot;&gt;HDF5&lt;/a&gt; , a high-performance storage format designed specifically for storing tabular arrays of data. Pandas’ &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/api.html#hdfstore-pytables-hdf5&quot;&gt;&lt;code&gt;HDFStore&lt;/code&gt;&lt;/a&gt; class allows you to store your DataFrame in an HDF5 file so that it can be accessed efficiently, while still retaining column types and other metadata. It is a dictionary-like class, so you can read and write just as you would for a Python &lt;code&gt;dict&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Here’s how you would go about storing your pre-processed electricity consumption DataFrame, &lt;code&gt;df&lt;/code&gt;, in an HDF5 file:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Create storage object with filename `processed_data`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HDFStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;processed_data.h5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Put DataFrame into the object setting the key as &amp;#39;preprocessed_df&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;preprocessed_df&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can shut your computer down and take a break knowing that you can come back and your processed data will be waiting for you when you need it. No reprocessing required. Here’s how you would access your data from the HDF5 file, with data types preserved:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Access data store&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HDFStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;processed_data.h5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Retrieve data using key&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;preprocessed_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;preprocessed_df&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A data store can house multiple tables, with the name of each as a key.&lt;/p&gt;
&lt;p&gt;Just a note about using the HDFStore in Pandas: you will need to have PyTables &gt;= 3.0.0 installed, so after you have installed Pandas, make sure to update PyTables like this:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;pip install --upgrade tables&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;If you don’t feel like your Pandas project is &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;flexible&lt;/strong&gt;, &lt;strong&gt;easy&lt;/strong&gt;, and &lt;strong&gt;intuitive&lt;/strong&gt;, consider rethinking how you&amp;rsquo;re using the library.&lt;/p&gt;
&lt;p&gt;The examples you&amp;rsquo;ve explored here are fairly straightforward but illustrate how the proper application of Pandas features can make vast improvements to runtime and code readability to boot. Here are a few rules of thumb that you can apply next time you&amp;rsquo;re working with large data sets in Pandas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Try to use &lt;a href=&quot;https://realpython.com/numpy-array-programming/#what-is-vectorization&quot;&gt;vectorized operations&lt;/a&gt; where possible rather than approaching problems with the &lt;code&gt;for x in df...&lt;/code&gt; mentality.  If your code is home to a lot of for-loops, it might be better suited to working with native Python data structures, because Pandas otherwise comes with a lot of overhead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have more complex operations where vectorization is simply impossible or too difficult to work out efficiently, use the &lt;code&gt;.apply()&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you do have to loop over your array (which does happen), use &lt;code&gt;.iterrows()&lt;/code&gt; or &lt;code&gt;.itertuples()&lt;/code&gt; to improve speed and syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pandas has a lot of optionality, and there are almost always several ways to get from A to B.  Be mindful of this, compare how different routes perform, and choose the one that works best in the context of your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you&amp;rsquo;ve got a data cleaning script built, avoid reprocessing by storing your intermediate results with HDFStore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrating NumPy into Pandas operations can often improve speed and simplify syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  
    <entry>
      <title>Lists and Tuples in Python</title>
      <id>https://realpython.com/python-lists-tuples/</id>
      <link href="https://realpython.com/python-lists-tuples/"/>
      <updated>2018-07-18T14:00:00+00:00</updated>
      <summary>You&#39;ll cover the important characteristics of lists and tuples in Python 3. You&#39;ll learn how to define them and how to manipulate them. When you&#39;re finished, you should have a good feel for when and how to use these object types in a Python program.</summary>
      <content type="html">
        &lt;p&gt;&lt;strong&gt;Lists&lt;/strong&gt; and &lt;strong&gt;tuples&lt;/strong&gt; are arguably Python&amp;rsquo;s most versatile, useful &lt;a href=&quot;https://realpython.com/python-data-types/&quot;&gt;data types&lt;/a&gt;.  You will find them in virtually every nontrivial Python program.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;rsquo;s what you&amp;rsquo;ll learn in this tutorial:&lt;/strong&gt; You&amp;rsquo;ll cover the important characteristics of lists and tuples. You&amp;rsquo;ll learn how to define them and how to manipulate them.  When you&amp;rsquo;re finished, you should have a good feel for when and how to use these object types in a Python program.&lt;/p&gt;
&lt;h2 id=&quot;python-lists&quot;&gt;Python Lists&lt;/h2&gt;
&lt;p&gt;In short, a list is a collection of arbitrary objects, somewhat akin to an array in many other programming languages but more flexible.  Lists are defined in Python by enclosing a comma-separated sequence of objects in square brackets (&lt;code&gt;[]&lt;/code&gt;), as shown below:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important characteristics of Python lists are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists are ordered.&lt;/li&gt;
&lt;li&gt;Lists can contain any arbitrary objects.&lt;/li&gt;
&lt;li&gt;List elements can be accessed by index.&lt;/li&gt;
&lt;li&gt;Lists can be nested to arbitrary depth.&lt;/li&gt;
&lt;li&gt;Lists are mutable.&lt;/li&gt;
&lt;li&gt;Lists are dynamic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these features is examined in more detail below.&lt;/p&gt;
&lt;h3 id=&quot;lists-are-ordered&quot;&gt;Lists Are Ordered&lt;/h3&gt;
&lt;p&gt;A list is not merely a collection of objects.  It is an ordered collection of objects.  The order in which you specify the elements when you define a list is an innate characteristic of that list and is maintained for that list&amp;rsquo;s lifetime.  (You will see a Python data type that is not ordered in the next tutorial on dictionaries.)&lt;/p&gt;
&lt;p&gt;Lists that have the same elements in a different order are not the same:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;lists-can-contain-arbitrary-objects&quot;&gt;Lists Can Contain Arbitrary Objects&lt;/h3&gt;
&lt;p&gt;A list can contain any assortment of objects.  The elements of a list can all be the same type:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[2, 4, 6, 8]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or the elements can be of varying types:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;21.42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bark&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[21.42, &amp;#39;foobar&amp;#39;, 3, 4, &amp;#39;bark&amp;#39;, False, 3.14159]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lists can even contain complex objects, like functions, classes, and modules, which you will learn about in upcoming tutorials:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;built-in function len&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;function foo at 0x035B9030&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;module &amp;#39;math&amp;#39; (built-in)&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;, &amp;lt;built-in function len&amp;gt;, &amp;lt;function foo at 0x02CA2618&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;module &amp;#39;math&amp;#39; (built-in)&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A list can contain any number of objects, from zero to as many as your computer&amp;rsquo;s memory will allow:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;93&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;97, 98, 99, 100]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(A list with a single object is sometimes referred to as a singleton list.)&lt;/p&gt;
&lt;p&gt;List objects needn&amp;rsquo;t be unique.  A given object can appear in a list multiple times:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bark&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;meow&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;woof&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bark&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cheep&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bark&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bark&amp;#39;, &amp;#39;meow&amp;#39;, &amp;#39;woof&amp;#39;, &amp;#39;bark&amp;#39;, &amp;#39;cheep&amp;#39;, &amp;#39;bark&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;list-elements-can-be-accessed-by-index&quot;&gt;List Elements Can Be Accessed by Index&lt;/h3&gt;
&lt;p&gt;Individual elements in a list can be accessed using an index in square brackets.  This is exactly analogous to accessing individual characters in a string. List indexing is zero-based as it is with strings.&lt;/p&gt;
&lt;p&gt;Consider the following list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The indices for the elements in &lt;code&gt;a&lt;/code&gt; are shown below:&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.eb0b38e642c5.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/t.eb0b38e642c5.png&quot; width=&quot;1653&quot; height=&quot;312&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.eb0b38e642c5.png&amp;amp;w=413&amp;amp;sig=f8dcdd3099e8c901b3b9f6b1530d6f8467816dbd 413w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.eb0b38e642c5.png&amp;amp;w=826&amp;amp;sig=2bcd68779a3392e73771853446fbc7e1ac3ae082 826w, https://files.realpython.com/media/t.eb0b38e642c5.png 1653w&quot; sizes=&quot;75vw&quot; alt=&quot;Diagram of a Python list&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;List Indices&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is Python code to access some elements of &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Virtually everything about string indexing works similarly for lists.  For example, a negative list index counts from the end of the list:&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.c11ea56e8ca2.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/t.c11ea56e8ca2.png&quot; width=&quot;1653&quot; height=&quot;429&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.c11ea56e8ca2.png&amp;amp;w=413&amp;amp;sig=ee7f719c6f0024388d0f661dfde3c19e2fb8d1bb 413w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.c11ea56e8ca2.png&amp;amp;w=826&amp;amp;sig=c458a198a84e6c6ee75a118936c23a954b1a7d33 826w, https://files.realpython.com/media/t.c11ea56e8ca2.png 1653w&quot; sizes=&quot;75vw&quot; alt=&quot;Diagram of a Python list&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Negative List Indexing&lt;/figcaption&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Slicing also works.  If &lt;code&gt;a&lt;/code&gt; is a list, the expression &lt;code&gt;a[m:n]&lt;/code&gt; returns the portion of &lt;code&gt;a&lt;/code&gt; from index &lt;code&gt;m&lt;/code&gt; to, but not including, index &lt;code&gt;n&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other features of string slicing work analogously for list slicing as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Both positive and negative indices can be specified:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omitting the first index starts the slice at the beginning of the list, and omitting the second index extends the slice to the end of the list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;] [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;] [&amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can specify a stride&amp;mdash;either positive or negative:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;quux&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bar&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;corge&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;bar&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax for reversing a list works the same way it does for strings:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;corge&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;[:]&lt;/code&gt; syntax works for lists.  However, there is an important difference between how this operation works with a list and how it works with a string.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is a string, &lt;code&gt;s[:]&lt;/code&gt; returns a reference to the same object:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Conversely, if &lt;code&gt;a&lt;/code&gt; is a list, &lt;code&gt;a[:]&lt;/code&gt; returns a new object that is a copy of &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several Python operators and built-in functions can also be used with lists in ways that are analogous to strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;thud&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The concatenation (&lt;code&gt;+&lt;/code&gt;) and replication (&lt;code&gt;*&lt;/code&gt;) operators:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grault&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;garply&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;, &amp;#39;grault&amp;#39;, &amp;#39;garply&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;len()&lt;/code&gt;, &lt;code&gt;min()&lt;/code&gt;, and &lt;code&gt;max()&lt;/code&gt; functions:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s not an accident that strings and lists behave so similarly.  They are both special cases of a more general object type called an iterable, which you will encounter in more detail in the upcoming tutorial on definite iteration.&lt;/p&gt;
&lt;p&gt;By the way, in each example above, the list is always assigned to a variable before an operation is performed on it.  But you can operate on a list literal as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;corge&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For that matter, you can do likewise with a string literal:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;If Comrade Napoleon says it, it must be right.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;.thgir eb tsum ti ,ti syas noelopaN edarmoC fI&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;lists-can-be-nested&quot;&gt;Lists Can Be Nested&lt;/h3&gt;
&lt;p&gt;You have seen that an element in a list can be any sort of object.  That includes another list.  A list can contain sublists, which in turn can contain sublists themselves, and so on to arbitrary depth.&lt;/p&gt;
&lt;p&gt;Consider this (admittedly contrived) example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ddd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ff&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ii&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, [&amp;#39;bb&amp;#39;, [&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;], &amp;#39;ee&amp;#39;, &amp;#39;ff&amp;#39;], &amp;#39;g&amp;#39;, [&amp;#39;hh&amp;#39;, &amp;#39;ii&amp;#39;], &amp;#39;j&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The object structure that &lt;code&gt;x&lt;/code&gt; references is diagrammed below:&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.08554d94a1e5.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block &quot; src=&quot;https://files.realpython.com/media/t.08554d94a1e5.png&quot; width=&quot;2301&quot; height=&quot;1122&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.08554d94a1e5.png&amp;amp;w=575&amp;amp;sig=58bdf1b765fd6dcbaebbe8e090d7ff1c201dbd39 575w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.08554d94a1e5.png&amp;amp;w=1150&amp;amp;sig=dd460296ea6940e0ea6e809b7d98b1272708da03 1150w, https://files.realpython.com/media/t.08554d94a1e5.png 2301w&quot; sizes=&quot;75vw&quot; alt=&quot;Nested lists diagram&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;A Nested List&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;x[0]&lt;/code&gt;, &lt;code&gt;x[2]&lt;/code&gt;, and &lt;code&gt;x[4]&lt;/code&gt; are strings, each one character long:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;a g j&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But &lt;code&gt;x[1]&lt;/code&gt; and &lt;code&gt;x[3]&lt;/code&gt; are sublists:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bb&amp;#39;, [&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;], &amp;#39;ee&amp;#39;, &amp;#39;ff&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;hh&amp;#39;, &amp;#39;ii&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To access the items in a sublist, simply append an additional index:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bb&amp;#39;, [&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;], &amp;#39;ee&amp;#39;, &amp;#39;ff&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bb&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;ee&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;ff&amp;#39;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;hh&amp;#39;, &amp;#39;ii&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;hh ii&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;x[1][1]&lt;/code&gt; is yet another sublist, so adding one more index accesses its elements:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ccc ddd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no limit, short of the extent of your computer&amp;rsquo;s memory, to the depth or complexity with which lists can be nested in this way.&lt;/p&gt;
&lt;p&gt;All the usual syntax regarding indices and slicing applies to sublists as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;ddd&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[[&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;], &amp;#39;ee&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;ii&amp;#39;, &amp;#39;hh&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, be aware that operators and functions apply to only the list at the level you specify and are not recursive.  Consider what happens when you query the length of &lt;code&gt;x&lt;/code&gt; using &lt;code&gt;len()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, [&amp;#39;bb&amp;#39;, [&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;], &amp;#39;ee&amp;#39;, &amp;#39;ff&amp;#39;], &amp;#39;g&amp;#39;, [&amp;#39;hh&amp;#39;, &amp;#39;ii&amp;#39;], &amp;#39;j&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bb&amp;#39;, [&amp;#39;ccc&amp;#39;, &amp;#39;ddd&amp;#39;], &amp;#39;ee&amp;#39;, &amp;#39;ff&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;hh&amp;#39;, &amp;#39;ii&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;j&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;x&lt;/code&gt; has only five elements&amp;mdash;three strings and two sublists.  The individual elements in the sublists don&amp;rsquo;t count toward &lt;code&gt;x&lt;/code&gt;&amp;rsquo;s length.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;d encounter a similar situation when using the &lt;code&gt;in&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ddd&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ddd&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ddd&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&#39;ddd&#39;&lt;/code&gt; is not one of the elements in &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;x[1]&lt;/code&gt;. It is only directly an element in the sublist &lt;code&gt;x[1][1]&lt;/code&gt;.  An individual element in a sublist does not count as an element of the parent list(s).&lt;/p&gt;
&lt;h3 id=&quot;lists-are-mutable&quot;&gt;Lists Are Mutable&lt;/h3&gt;
&lt;p&gt;Most of the data types you have encountered so far have been atomic types.  Integer or float objects, for example, are primitive units that can&amp;rsquo;t be further broken down.  These types are immutable, meaning that they can&amp;rsquo;t be changed once they have been assigned. It doesn&amp;rsquo;t make much sense to think of changing the value of an integer.  If you want a different integer, you just assign a different one.&lt;/p&gt;
&lt;p&gt;By contrast, the string type is a composite type.  Strings are reducible to smaller parts&amp;mdash;the component characters.  It might make sense to think of changing the characters in a string.  But you can&amp;rsquo;t.  In Python, strings are also immutable.&lt;/p&gt;
&lt;p&gt;The list is the first mutable data type you have encountered.  Once a list has been created, elements can be added, deleted, shifted, and moved around at will.  Python provides a wide range of ways to modify lists.&lt;/p&gt;
&lt;h4 id=&quot;modifying-a-single-list-value&quot;&gt;Modifying a Single List Value&lt;/h4&gt;
&lt;p&gt;A single value in a list can be replaced by indexing and simple assignment:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, 10, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, 20]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may recall from the tutorial &lt;a href=&quot;https://realpython.com/python-strings/#modifying-strings]&quot;&gt;Strings and Character Data in Python&lt;/a&gt; that you can&amp;rsquo;t do this with a string:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foobarbaz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;str&amp;#39; object does not support item assignment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A list item can be deleted with the &lt;code&gt;del&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;modifying-multiple-list-values&quot;&gt;Modifying Multiple List Values&lt;/h4&gt;
&lt;p&gt;What if you want to change several contiguous elements in a list at one time?  Python allows this with slice assignment, which has the following syntax:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, for the moment, think of an iterable as a list. This assignment replaces the specified slice of &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;&amp;lt;iterable&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, 1.1, 2.2, 3.3, 4.4, 5.5, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[1.1, 2.2, 3.3, 4.4, 5.5]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Bark!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;Bark!&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The number of elements inserted need not be equal to the number replaced. Python just grows or shrinks the list as needed.&lt;/p&gt;
&lt;p&gt;You can insert multiple elements in place of a single element&amp;mdash;just use a slice that denotes only one element:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[1, 2.1, 2.2, 2.3, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this is not the same as replacing the single element with a list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[1, [2.1, 2.2, 2.3], 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also insert elements into a list without removing anything. Simply specify a slice of the form &lt;code&gt;[n:n]&lt;/code&gt; (a zero-length slice) at the desired index:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[1, 2, 3, 4, 5, 6, 7, 8]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can delete multiple elements out of the middle of a list by assigning the appropriate slice to an empty list.  You can also use the &lt;code&gt;del&lt;/code&gt; statement with the same slice:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;prepending-or-appending-items-to-a-list&quot;&gt;Prepending or Appending Items to a List&lt;/h4&gt;
&lt;p&gt;Additional items can be added to the start or end of a list using the &lt;code&gt;+&lt;/code&gt; concatenation operator or the &lt;code&gt;+=&lt;/code&gt; augmented assignment operator:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grault&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;garply&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;, &amp;#39;grault&amp;#39;, &amp;#39;garply&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[10, 20, &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that a list must be concatenated with another list, so if you want to add only one element, you need to specify it as a singleton list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#58&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;int&amp;#39; object is not iterable&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;, 20]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Technically, it isn&amp;rsquo;t quite correct to say a list must be concatenated with another list. More precisely, a list must be concatenated with an object that is iterable.  Of course, lists are iterable, so it works to concatenate a list with another list.&lt;/p&gt;
&lt;p&gt;Strings are iterable also.  But watch what happens when you concatenate a string onto a list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;e&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This result is perhaps not quite what you expected.  When a string is iterated through, the result is a list of its component characters.  In the above example, what gets concatenated onto list &lt;code&gt;a&lt;/code&gt; is a list of the characters in the string &lt;code&gt;&#39;corge&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you really want to add just the single string &lt;code&gt;&#39;corge&#39;&lt;/code&gt; to the end of the list, you need to specify it as a singleton list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If this seems mysterious, don&amp;rsquo;t fret too much.  You&amp;rsquo;ll learn about the ins and outs of iterables in the tutorial on definite iteration.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&quot;methods-that-modify-a-list&quot;&gt;Methods That Modify a List&lt;/h4&gt;
&lt;p&gt;Finally, Python supplies several built-in methods that can be used to modify lists.  Information on these methods is detailed below.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The string methods you saw in the previous tutorial did not modify the target string directly.  That is because strings are immutable.  Instead, string methods return a new string object that is modified as directed by the method. They leave the original target string unchanged:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;foobar FOOBAR&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;List methods are different. Because lists are mutable, the list methods shown here modify the target list in place.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;a.append(&amp;lt;obj&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Appends an object to a list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;a.append(&amp;lt;obj&amp;gt;)&lt;/code&gt; appends object &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; to the end of list &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, 123]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, list methods modify the target list in place. They do not return a new list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, 123]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember that when the &lt;code&gt;+&lt;/code&gt; operator is used to concatenate to a list, if the target operand is an iterable, then its elements are broken out and appended to the list individually:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, 1, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.append()&lt;/code&gt; method does not work that way!  If an iterable is appended to a list with &lt;code&gt;.append()&lt;/code&gt;, it is added as a single object:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [1, 2, 3]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus, with &lt;code&gt;.append()&lt;/code&gt;, you can append a string as a single entity:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;a.extend(&amp;lt;iterable&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extends a list with the objects from an iterable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, this is probably what you think it is.  &lt;code&gt;.extend()&lt;/code&gt; also adds to the end of a list, but the argument is expected to be an iterable.  The items in &lt;code&gt;&amp;lt;iterable&amp;gt;&lt;/code&gt; are added individually:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, 1, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words, &lt;code&gt;.extend()&lt;/code&gt; behaves like the &lt;code&gt;+&lt;/code&gt; operator. More precisely, since it modifies the list in place, it behaves like the &lt;code&gt;+=&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, 1, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;a.insert(&amp;lt;index&amp;gt;, &amp;lt;obj&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inserts an object into a list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;a.insert(&amp;lt;index&amp;gt;, &amp;lt;obj&amp;gt;)&lt;/code&gt; inserts object &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; into list &lt;code&gt;a&lt;/code&gt; at the specified &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt;.  Following the method call, &lt;code&gt;a[&amp;lt;index&amp;gt;]&lt;/code&gt; is &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt;, and the remaining list elements are pushed to the right:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3.14159&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, 3.14159, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;a.remove(&amp;lt;obj&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Removes an object from a list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;a.remove(&amp;lt;obj&amp;gt;)&lt;/code&gt; removes object &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; from list &lt;code&gt;a&lt;/code&gt;.  If &lt;code&gt;&amp;lt;obj&amp;gt;&lt;/code&gt; isn&amp;rsquo;t in &lt;code&gt;a&lt;/code&gt;, an  exception is raised:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Bark!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#13&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Bark!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;list.remove(x): x not in list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;h4 mt-5&quot;&gt;&lt;code&gt;a.pop(index=-1)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Removes an element from a list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This method differs from &lt;code&gt;.remove()&lt;/code&gt; in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You specify the index of the item to remove, rather than the object itself.&lt;/li&gt;
&lt;li&gt;The method returns a value: the item that was removed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;a.pop()&lt;/code&gt; simply removes the last item in the list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the optional &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt; parameter is specified, the item at that index is removed and returned.  &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt; may be negative, as with string and list indexing:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt; defaults to &lt;code&gt;-1&lt;/code&gt;, so &lt;code&gt;a.pop(-1)&lt;/code&gt; is equivalent to &lt;code&gt;a.pop()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;lists-are-dynamic&quot;&gt;Lists Are Dynamic&lt;/h3&gt;
&lt;p&gt;This tutorial began with a list of six defining characteristics of Python lists.  The last one is that lists are dynamic.  You have seen many examples of this in the sections above.  When items are added to a list, it grows as needed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, 1, 2, 3, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;, 3.14159]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, a list shrinks to accommodate the removal of items:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[&amp;#39;bar&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-tuples&quot;&gt;Python Tuples&lt;/h2&gt;
&lt;p&gt;Python provides another type that is an ordered collection of objects, called a tuple.&lt;/p&gt;
&lt;p&gt;Pronunciation varies depending on whom you ask.  Some pronounce it as though it were spelled &amp;ldquo;too-ple&amp;rdquo; (rhyming with &amp;ldquo;Mott the Hoople&amp;rdquo;), and others as though it were spelled &amp;ldquo;tup-ple&amp;rdquo; (rhyming with &amp;ldquo;supple&amp;rdquo;).  My inclination is the latter, since it presumably derives from the same origin as &amp;ldquo;quintuple,&amp;rdquo; &amp;ldquo;sextuple,&amp;rdquo; &amp;ldquo;octuple,&amp;rdquo; and so on, and everyone I know pronounces these latter as though they rhymed with &amp;ldquo;supple.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&quot;defining-and-using-tuples&quot;&gt;Defining and Using Tuples&lt;/h3&gt;
&lt;p&gt;Tuples are identical to lists in all respects, except for the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are defined by enclosing the elements in parentheses (&lt;code&gt;()&lt;/code&gt;) instead of square brackets (&lt;code&gt;[]&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Tuples are immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a short example showing a tuple definition, indexing, and slicing:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;corge&amp;#39;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;bar&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;corge&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Never fear!  Our favorite string and list reversal mechanism works for tuples as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;corge&amp;#39;, &amp;#39;quux&amp;#39;, &amp;#39;qux&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Even though tuples are defined using parentheses, you still index and slice tuples using square brackets, just as for strings and lists.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Everything you&amp;rsquo;ve learned about lists&amp;mdash;they are ordered, they can contain arbitrary objects, they can be indexed and sliced, they can be nested&amp;mdash;is true of tuples as well.  But they can&amp;rsquo;t be modified:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;quux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;corge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Bark!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#65&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Bark!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;tuple&amp;#39; object does not support item assignment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why use a tuple instead of a list?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Program execution is faster when manipulating a tuple than it is for the equivalent list.  (This is probably not going to be noticeable when the list or tuple is small.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes you don&amp;rsquo;t want data to be modified.  If the values in the collection are meant to remain constant for the life of the program, using a tuple instead of a list guards against accidental modification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is another Python data type that you will encounter shortly called a dictionary, which requires as one of its components a value that is of an immutable type.  A tuple can be used for this purpose, whereas a list can&amp;rsquo;t be.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a Python REPL session, you can display the values of several objects simultaneously by entering them directly at the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; prompt, separated by commas:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;foo&amp;#39;, 3.14159, 42)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python displays the response in parentheses because it is implicitly interpreting the input as a tuple.&lt;/p&gt;
&lt;p&gt;There is one peculiarity regarding tuple definition that you should be aware of.  There is no ambiguity when defining an empty tuple, nor one with two or more elements.  Python knows you are defining a tuple:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But what happens when you try to define a tuple with one item:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Doh!&lt;/em&gt;  Since parentheses are also used to define operator precedence in expressions, Python evaluates the expression &lt;code&gt;(2)&lt;/code&gt; as simply the integer &lt;code&gt;2&lt;/code&gt; and creates an &lt;code&gt;int&lt;/code&gt; object.  To tell Python that you really want to define a singleton tuple, include a trailing comma (&lt;code&gt;,&lt;/code&gt;) just before the closing parenthesis:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You probably won&amp;rsquo;t need to define a singleton tuple often, but there has to be a way.&lt;/p&gt;
&lt;p&gt;When you display a singleton tuple, Python includes the comma, to remind you that it&amp;rsquo;s a tuple:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(2,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;tuple-assignment-packing-and-unpacking&quot;&gt;Tuple Assignment, Packing, and Unpacking&lt;/h3&gt;
&lt;p&gt;As you have already seen above, a literal tuple containing several items can be assigned to a single object:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When this occurs, it is as though the items in the tuple have been &amp;ldquo;packed&amp;rdquo; into the object:&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.feb20d10b75d.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-66&quot; src=&quot;https://files.realpython.com/media/t.feb20d10b75d.png&quot; width=&quot;1611&quot; height=&quot;882&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.feb20d10b75d.png&amp;amp;w=402&amp;amp;sig=2baae3ec4ab272f2a558a5eafb179383e247b36a 402w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.feb20d10b75d.png&amp;amp;w=805&amp;amp;sig=756d57bf47a5e10eff8bea4f11041156c1867227 805w, https://files.realpython.com/media/t.feb20d10b75d.png 1611w&quot; sizes=&quot;75vw&quot; alt=&quot;tuple packing&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Tuple Packing&lt;/figcaption&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;qux&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If that &amp;ldquo;packed&amp;rdquo; object is subsequently assigned to a new tuple, the individual items are &amp;ldquo;unpacked&amp;rdquo; into the objects in the tuple:&lt;/p&gt;
&lt;figure class=&quot;figure mx-auto d-block&quot;&gt;&lt;a href=&quot;https://files.realpython.com/media/t.629d7402a412.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block w-50&quot; src=&quot;https://files.realpython.com/media/t.629d7402a412.png&quot; width=&quot;1023&quot; height=&quot;894&quot; srcset=&quot;https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.629d7402a412.png&amp;amp;w=255&amp;amp;sig=d4d17768b651a8e1bebe0858c48cdcce091bf9a6 255w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/t.629d7402a412.png&amp;amp;w=511&amp;amp;sig=abe51c8a6b81363f7f61d59fcdc57b4b8cf397a0 511w, https://files.realpython.com/media/t.629d7402a412.png 1023w&quot; sizes=&quot;75vw&quot; alt=&quot;tuple unpacking&quot;/&gt;&lt;/a&gt;&lt;figcaption class=&quot;figure-caption text-center&quot;&gt;Tuple Unpacking&lt;/figcaption&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When unpacking, the number of variables on the left must match the number of values in the tuple:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#16&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;too many values to unpack (expected 3)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#17&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;not enough values to unpack (expected 5, got 4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Packing and unpacking can be combined into one statement to make a compound assignment:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, the number of elements in the tuple on the left of the assignment must equal the number on the right:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#63&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;not enough values to unpack (expected 5, got 4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In assignments like this and a small handful of other situations, Python allows the parentheses that are usually used for denoting a tuple to be left out:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(1, 2, 3)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(1, 2, 3)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(4, 5, 6)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(2,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works the same whether the parentheses are included or not, so if you have any doubt as to whether they&amp;rsquo;re needed, go ahead and include them.&lt;/p&gt;
&lt;p&gt;Tuple assignment allows for a curious bit of idiomatic Python.  Frequently when programming, you have two variables whose values you need to swap.  In most programming languages, it is necessary to store one of the values in a temporary variable while the swap occurs like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;&amp;gt;&amp;gt;&amp;gt;# We need to define a temp variable to accomplish the swap.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Python, the swap can be done with a single tuple assignment:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;&amp;gt;&amp;gt;&amp;gt;# Magic time!&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As anyone who has ever had to swap values using a temporary variable knows, being able to do it this way in Python is the pinnacle of modern technological achievement.  It will never get better than this.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This tutorial covered the basic properties of Python &lt;strong&gt;lists&lt;/strong&gt; and &lt;strong&gt;tuples&lt;/strong&gt;, and how to manipulate them.  You will use these extensively in your Python programming.&lt;/p&gt;
&lt;p&gt;One of the chief characteristics of a list is that it is ordered.  The order of the elements in a list is an intrinsic property of that list and does not change, unless the list itself is modified.  (The same is true of tuples, except of course they can&amp;rsquo;t be modified.)&lt;/p&gt;
&lt;p&gt;The next tutorial will introduce you to the Python &lt;strong&gt;dictionary:&lt;/strong&gt; a composite data type that is unordered.  Read on!&lt;/p&gt;
&lt;div class=&quot;container py-3 series-nav mb-3&quot;&gt;
  &lt;div class=&quot;row justify-content-between&quot;&gt;
    &lt;div class=&quot;col-12 col-md-3 text-left text-muted ml-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-strings/&quot;&gt; «&amp;nbsp;Strings in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-center text-muted&quot;&gt;&lt;a href=&quot;#&quot;&gt;Lists and Tuples in Python&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-3 text-right text-muted mr-1&quot;&gt;&lt;a href=&quot;https://realpython.com/python-dicts/&quot;&gt;Dictionaries in Python&amp;nbsp;»&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;amp;utm_medium=rss&amp;amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;
      </content>
    </entry>
  

</feed>
